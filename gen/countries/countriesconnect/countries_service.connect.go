// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: countries/countries_service.proto

package countriesconnect

import (
	context "context"
	countries "davensi.com/core/gen/countries"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "countries.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/countries.Service/Create"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/countries.Service/Update"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/countries.Service/Get"
	// ServiceGetListProcedure is the fully-qualified name of the Service's GetList RPC.
	ServiceGetListProcedure = "/countries.Service/GetList"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/countries.Service/Delete"
	// ServiceSetFiatsProcedure is the fully-qualified name of the Service's SetFiats RPC.
	ServiceSetFiatsProcedure = "/countries.Service/SetFiats"
	// ServiceAddFiatsProcedure is the fully-qualified name of the Service's AddFiats RPC.
	ServiceAddFiatsProcedure = "/countries.Service/AddFiats"
	// ServiceGetFiatsProcedure is the fully-qualified name of the Service's GetFiats RPC.
	ServiceGetFiatsProcedure = "/countries.Service/GetFiats"
	// ServiceRemoveFiatsProcedure is the fully-qualified name of the Service's RemoveFiats RPC.
	ServiceRemoveFiatsProcedure = "/countries.Service/RemoveFiats"
	// ServiceSetCryptosProcedure is the fully-qualified name of the Service's SetCryptos RPC.
	ServiceSetCryptosProcedure = "/countries.Service/SetCryptos"
	// ServiceAddCryptosProcedure is the fully-qualified name of the Service's AddCryptos RPC.
	ServiceAddCryptosProcedure = "/countries.Service/AddCryptos"
	// ServiceGetCryptosProcedure is the fully-qualified name of the Service's GetCryptos RPC.
	ServiceGetCryptosProcedure = "/countries.Service/GetCryptos"
	// ServiceRemoveCryptosProcedure is the fully-qualified name of the Service's RemoveCryptos RPC.
	ServiceRemoveCryptosProcedure = "/countries.Service/RemoveCryptos"
	// ServiceSetMarketsProcedure is the fully-qualified name of the Service's SetMarkets RPC.
	ServiceSetMarketsProcedure = "/countries.Service/SetMarkets"
	// ServiceAddMarketsProcedure is the fully-qualified name of the Service's AddMarkets RPC.
	ServiceAddMarketsProcedure = "/countries.Service/AddMarkets"
	// ServiceGetMarketsProcedure is the fully-qualified name of the Service's GetMarkets RPC.
	ServiceGetMarketsProcedure = "/countries.Service/GetMarkets"
	// ServiceRemoveMarketsProcedure is the fully-qualified name of the Service's RemoveMarkets RPC.
	ServiceRemoveMarketsProcedure = "/countries.Service/RemoveMarkets"
)

// ServiceClient is a client for the countries.Service service.
type ServiceClient interface {
	Create(context.Context, *connect_go.Request[countries.CreateRequest]) (*connect_go.Response[countries.CreateResponse], error)
	Update(context.Context, *connect_go.Request[countries.UpdateRequest]) (*connect_go.Response[countries.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[countries.GetRequest]) (*connect_go.Response[countries.GetResponse], error)
	GetList(context.Context, *connect_go.Request[countries.GetListRequest]) (*connect_go.ServerStreamForClient[countries.GetListResponse], error)
	Delete(context.Context, *connect_go.Request[countries.DeleteRequest]) (*connect_go.Response[countries.DeleteResponse], error)
	SetFiats(context.Context, *connect_go.Request[countries.SetFiatsRequest]) (*connect_go.Response[countries.SetFiatsResponse], error)
	AddFiats(context.Context, *connect_go.Request[countries.AddFiatsRequest]) (*connect_go.Response[countries.AddFiatsResponse], error)
	GetFiats(context.Context, *connect_go.Request[countries.GetFiatsRequest]) (*connect_go.Response[countries.GetFiatsResponse], error)
	RemoveFiats(context.Context, *connect_go.Request[countries.RemoveFiatsRequest]) (*connect_go.Response[countries.RemoveFiatsResponse], error)
	SetCryptos(context.Context, *connect_go.Request[countries.SetCryptosRequest]) (*connect_go.Response[countries.SetCryptosResponse], error)
	AddCryptos(context.Context, *connect_go.Request[countries.AddCryptosRequest]) (*connect_go.Response[countries.AddCryptosResponse], error)
	GetCryptos(context.Context, *connect_go.Request[countries.GetCryptosRequest]) (*connect_go.Response[countries.GetCryptosResponse], error)
	RemoveCryptos(context.Context, *connect_go.Request[countries.RemoveCryptosRequest]) (*connect_go.Response[countries.RemoveCryptosResponse], error)
	SetMarkets(context.Context, *connect_go.Request[countries.SetMarketsRequest]) (*connect_go.Response[countries.SetMarketsResponse], error)
	AddMarkets(context.Context, *connect_go.Request[countries.AddMarketsRequest]) (*connect_go.Response[countries.AddMarketsResponse], error)
	GetMarkets(context.Context, *connect_go.Request[countries.GetMarketsRequest]) (*connect_go.Response[countries.GetMarketsResponse], error)
	RemoveMarkets(context.Context, *connect_go.Request[countries.RemoveMarketsRequest]) (*connect_go.Response[countries.RemoveMarketsResponse], error)
}

// NewServiceClient constructs a client for the countries.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[countries.CreateRequest, countries.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		update: connect_go.NewClient[countries.UpdateRequest, countries.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		get: connect_go.NewClient[countries.GetRequest, countries.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		getList: connect_go.NewClient[countries.GetListRequest, countries.GetListResponse](
			httpClient,
			baseURL+ServiceGetListProcedure,
			opts...,
		),
		delete: connect_go.NewClient[countries.DeleteRequest, countries.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		setFiats: connect_go.NewClient[countries.SetFiatsRequest, countries.SetFiatsResponse](
			httpClient,
			baseURL+ServiceSetFiatsProcedure,
			opts...,
		),
		addFiats: connect_go.NewClient[countries.AddFiatsRequest, countries.AddFiatsResponse](
			httpClient,
			baseURL+ServiceAddFiatsProcedure,
			opts...,
		),
		getFiats: connect_go.NewClient[countries.GetFiatsRequest, countries.GetFiatsResponse](
			httpClient,
			baseURL+ServiceGetFiatsProcedure,
			opts...,
		),
		removeFiats: connect_go.NewClient[countries.RemoveFiatsRequest, countries.RemoveFiatsResponse](
			httpClient,
			baseURL+ServiceRemoveFiatsProcedure,
			opts...,
		),
		setCryptos: connect_go.NewClient[countries.SetCryptosRequest, countries.SetCryptosResponse](
			httpClient,
			baseURL+ServiceSetCryptosProcedure,
			opts...,
		),
		addCryptos: connect_go.NewClient[countries.AddCryptosRequest, countries.AddCryptosResponse](
			httpClient,
			baseURL+ServiceAddCryptosProcedure,
			opts...,
		),
		getCryptos: connect_go.NewClient[countries.GetCryptosRequest, countries.GetCryptosResponse](
			httpClient,
			baseURL+ServiceGetCryptosProcedure,
			opts...,
		),
		removeCryptos: connect_go.NewClient[countries.RemoveCryptosRequest, countries.RemoveCryptosResponse](
			httpClient,
			baseURL+ServiceRemoveCryptosProcedure,
			opts...,
		),
		setMarkets: connect_go.NewClient[countries.SetMarketsRequest, countries.SetMarketsResponse](
			httpClient,
			baseURL+ServiceSetMarketsProcedure,
			opts...,
		),
		addMarkets: connect_go.NewClient[countries.AddMarketsRequest, countries.AddMarketsResponse](
			httpClient,
			baseURL+ServiceAddMarketsProcedure,
			opts...,
		),
		getMarkets: connect_go.NewClient[countries.GetMarketsRequest, countries.GetMarketsResponse](
			httpClient,
			baseURL+ServiceGetMarketsProcedure,
			opts...,
		),
		removeMarkets: connect_go.NewClient[countries.RemoveMarketsRequest, countries.RemoveMarketsResponse](
			httpClient,
			baseURL+ServiceRemoveMarketsProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create        *connect_go.Client[countries.CreateRequest, countries.CreateResponse]
	update        *connect_go.Client[countries.UpdateRequest, countries.UpdateResponse]
	get           *connect_go.Client[countries.GetRequest, countries.GetResponse]
	getList       *connect_go.Client[countries.GetListRequest, countries.GetListResponse]
	delete        *connect_go.Client[countries.DeleteRequest, countries.DeleteResponse]
	setFiats      *connect_go.Client[countries.SetFiatsRequest, countries.SetFiatsResponse]
	addFiats      *connect_go.Client[countries.AddFiatsRequest, countries.AddFiatsResponse]
	getFiats      *connect_go.Client[countries.GetFiatsRequest, countries.GetFiatsResponse]
	removeFiats   *connect_go.Client[countries.RemoveFiatsRequest, countries.RemoveFiatsResponse]
	setCryptos    *connect_go.Client[countries.SetCryptosRequest, countries.SetCryptosResponse]
	addCryptos    *connect_go.Client[countries.AddCryptosRequest, countries.AddCryptosResponse]
	getCryptos    *connect_go.Client[countries.GetCryptosRequest, countries.GetCryptosResponse]
	removeCryptos *connect_go.Client[countries.RemoveCryptosRequest, countries.RemoveCryptosResponse]
	setMarkets    *connect_go.Client[countries.SetMarketsRequest, countries.SetMarketsResponse]
	addMarkets    *connect_go.Client[countries.AddMarketsRequest, countries.AddMarketsResponse]
	getMarkets    *connect_go.Client[countries.GetMarketsRequest, countries.GetMarketsResponse]
	removeMarkets *connect_go.Client[countries.RemoveMarketsRequest, countries.RemoveMarketsResponse]
}

// Create calls countries.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[countries.CreateRequest]) (*connect_go.Response[countries.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls countries.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[countries.UpdateRequest]) (*connect_go.Response[countries.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls countries.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[countries.GetRequest]) (*connect_go.Response[countries.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetList calls countries.Service.GetList.
func (c *serviceClient) GetList(ctx context.Context, req *connect_go.Request[countries.GetListRequest]) (*connect_go.ServerStreamForClient[countries.GetListResponse], error) {
	return c.getList.CallServerStream(ctx, req)
}

// Delete calls countries.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[countries.DeleteRequest]) (*connect_go.Response[countries.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SetFiats calls countries.Service.SetFiats.
func (c *serviceClient) SetFiats(ctx context.Context, req *connect_go.Request[countries.SetFiatsRequest]) (*connect_go.Response[countries.SetFiatsResponse], error) {
	return c.setFiats.CallUnary(ctx, req)
}

// AddFiats calls countries.Service.AddFiats.
func (c *serviceClient) AddFiats(ctx context.Context, req *connect_go.Request[countries.AddFiatsRequest]) (*connect_go.Response[countries.AddFiatsResponse], error) {
	return c.addFiats.CallUnary(ctx, req)
}

// GetFiats calls countries.Service.GetFiats.
func (c *serviceClient) GetFiats(ctx context.Context, req *connect_go.Request[countries.GetFiatsRequest]) (*connect_go.Response[countries.GetFiatsResponse], error) {
	return c.getFiats.CallUnary(ctx, req)
}

// RemoveFiats calls countries.Service.RemoveFiats.
func (c *serviceClient) RemoveFiats(ctx context.Context, req *connect_go.Request[countries.RemoveFiatsRequest]) (*connect_go.Response[countries.RemoveFiatsResponse], error) {
	return c.removeFiats.CallUnary(ctx, req)
}

// SetCryptos calls countries.Service.SetCryptos.
func (c *serviceClient) SetCryptos(ctx context.Context, req *connect_go.Request[countries.SetCryptosRequest]) (*connect_go.Response[countries.SetCryptosResponse], error) {
	return c.setCryptos.CallUnary(ctx, req)
}

// AddCryptos calls countries.Service.AddCryptos.
func (c *serviceClient) AddCryptos(ctx context.Context, req *connect_go.Request[countries.AddCryptosRequest]) (*connect_go.Response[countries.AddCryptosResponse], error) {
	return c.addCryptos.CallUnary(ctx, req)
}

// GetCryptos calls countries.Service.GetCryptos.
func (c *serviceClient) GetCryptos(ctx context.Context, req *connect_go.Request[countries.GetCryptosRequest]) (*connect_go.Response[countries.GetCryptosResponse], error) {
	return c.getCryptos.CallUnary(ctx, req)
}

// RemoveCryptos calls countries.Service.RemoveCryptos.
func (c *serviceClient) RemoveCryptos(ctx context.Context, req *connect_go.Request[countries.RemoveCryptosRequest]) (*connect_go.Response[countries.RemoveCryptosResponse], error) {
	return c.removeCryptos.CallUnary(ctx, req)
}

// SetMarkets calls countries.Service.SetMarkets.
func (c *serviceClient) SetMarkets(ctx context.Context, req *connect_go.Request[countries.SetMarketsRequest]) (*connect_go.Response[countries.SetMarketsResponse], error) {
	return c.setMarkets.CallUnary(ctx, req)
}

// AddMarkets calls countries.Service.AddMarkets.
func (c *serviceClient) AddMarkets(ctx context.Context, req *connect_go.Request[countries.AddMarketsRequest]) (*connect_go.Response[countries.AddMarketsResponse], error) {
	return c.addMarkets.CallUnary(ctx, req)
}

// GetMarkets calls countries.Service.GetMarkets.
func (c *serviceClient) GetMarkets(ctx context.Context, req *connect_go.Request[countries.GetMarketsRequest]) (*connect_go.Response[countries.GetMarketsResponse], error) {
	return c.getMarkets.CallUnary(ctx, req)
}

// RemoveMarkets calls countries.Service.RemoveMarkets.
func (c *serviceClient) RemoveMarkets(ctx context.Context, req *connect_go.Request[countries.RemoveMarketsRequest]) (*connect_go.Response[countries.RemoveMarketsResponse], error) {
	return c.removeMarkets.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the countries.Service service.
type ServiceHandler interface {
	Create(context.Context, *connect_go.Request[countries.CreateRequest]) (*connect_go.Response[countries.CreateResponse], error)
	Update(context.Context, *connect_go.Request[countries.UpdateRequest]) (*connect_go.Response[countries.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[countries.GetRequest]) (*connect_go.Response[countries.GetResponse], error)
	GetList(context.Context, *connect_go.Request[countries.GetListRequest], *connect_go.ServerStream[countries.GetListResponse]) error
	Delete(context.Context, *connect_go.Request[countries.DeleteRequest]) (*connect_go.Response[countries.DeleteResponse], error)
	SetFiats(context.Context, *connect_go.Request[countries.SetFiatsRequest]) (*connect_go.Response[countries.SetFiatsResponse], error)
	AddFiats(context.Context, *connect_go.Request[countries.AddFiatsRequest]) (*connect_go.Response[countries.AddFiatsResponse], error)
	GetFiats(context.Context, *connect_go.Request[countries.GetFiatsRequest]) (*connect_go.Response[countries.GetFiatsResponse], error)
	RemoveFiats(context.Context, *connect_go.Request[countries.RemoveFiatsRequest]) (*connect_go.Response[countries.RemoveFiatsResponse], error)
	SetCryptos(context.Context, *connect_go.Request[countries.SetCryptosRequest]) (*connect_go.Response[countries.SetCryptosResponse], error)
	AddCryptos(context.Context, *connect_go.Request[countries.AddCryptosRequest]) (*connect_go.Response[countries.AddCryptosResponse], error)
	GetCryptos(context.Context, *connect_go.Request[countries.GetCryptosRequest]) (*connect_go.Response[countries.GetCryptosResponse], error)
	RemoveCryptos(context.Context, *connect_go.Request[countries.RemoveCryptosRequest]) (*connect_go.Response[countries.RemoveCryptosResponse], error)
	SetMarkets(context.Context, *connect_go.Request[countries.SetMarketsRequest]) (*connect_go.Response[countries.SetMarketsResponse], error)
	AddMarkets(context.Context, *connect_go.Request[countries.AddMarketsRequest]) (*connect_go.Response[countries.AddMarketsResponse], error)
	GetMarkets(context.Context, *connect_go.Request[countries.GetMarketsRequest]) (*connect_go.Response[countries.GetMarketsResponse], error)
	RemoveMarkets(context.Context, *connect_go.Request[countries.RemoveMarketsRequest]) (*connect_go.Response[countries.RemoveMarketsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceGetListHandler := connect_go.NewServerStreamHandler(
		ServiceGetListProcedure,
		svc.GetList,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceSetFiatsHandler := connect_go.NewUnaryHandler(
		ServiceSetFiatsProcedure,
		svc.SetFiats,
		opts...,
	)
	serviceAddFiatsHandler := connect_go.NewUnaryHandler(
		ServiceAddFiatsProcedure,
		svc.AddFiats,
		opts...,
	)
	serviceGetFiatsHandler := connect_go.NewUnaryHandler(
		ServiceGetFiatsProcedure,
		svc.GetFiats,
		opts...,
	)
	serviceRemoveFiatsHandler := connect_go.NewUnaryHandler(
		ServiceRemoveFiatsProcedure,
		svc.RemoveFiats,
		opts...,
	)
	serviceSetCryptosHandler := connect_go.NewUnaryHandler(
		ServiceSetCryptosProcedure,
		svc.SetCryptos,
		opts...,
	)
	serviceAddCryptosHandler := connect_go.NewUnaryHandler(
		ServiceAddCryptosProcedure,
		svc.AddCryptos,
		opts...,
	)
	serviceGetCryptosHandler := connect_go.NewUnaryHandler(
		ServiceGetCryptosProcedure,
		svc.GetCryptos,
		opts...,
	)
	serviceRemoveCryptosHandler := connect_go.NewUnaryHandler(
		ServiceRemoveCryptosProcedure,
		svc.RemoveCryptos,
		opts...,
	)
	serviceSetMarketsHandler := connect_go.NewUnaryHandler(
		ServiceSetMarketsProcedure,
		svc.SetMarkets,
		opts...,
	)
	serviceAddMarketsHandler := connect_go.NewUnaryHandler(
		ServiceAddMarketsProcedure,
		svc.AddMarkets,
		opts...,
	)
	serviceGetMarketsHandler := connect_go.NewUnaryHandler(
		ServiceGetMarketsProcedure,
		svc.GetMarkets,
		opts...,
	)
	serviceRemoveMarketsHandler := connect_go.NewUnaryHandler(
		ServiceRemoveMarketsProcedure,
		svc.RemoveMarkets,
		opts...,
	)
	return "/countries.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceGetListProcedure:
			serviceGetListHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceSetFiatsProcedure:
			serviceSetFiatsHandler.ServeHTTP(w, r)
		case ServiceAddFiatsProcedure:
			serviceAddFiatsHandler.ServeHTTP(w, r)
		case ServiceGetFiatsProcedure:
			serviceGetFiatsHandler.ServeHTTP(w, r)
		case ServiceRemoveFiatsProcedure:
			serviceRemoveFiatsHandler.ServeHTTP(w, r)
		case ServiceSetCryptosProcedure:
			serviceSetCryptosHandler.ServeHTTP(w, r)
		case ServiceAddCryptosProcedure:
			serviceAddCryptosHandler.ServeHTTP(w, r)
		case ServiceGetCryptosProcedure:
			serviceGetCryptosHandler.ServeHTTP(w, r)
		case ServiceRemoveCryptosProcedure:
			serviceRemoveCryptosHandler.ServeHTTP(w, r)
		case ServiceSetMarketsProcedure:
			serviceSetMarketsHandler.ServeHTTP(w, r)
		case ServiceAddMarketsProcedure:
			serviceAddMarketsHandler.ServeHTTP(w, r)
		case ServiceGetMarketsProcedure:
			serviceGetMarketsHandler.ServeHTTP(w, r)
		case ServiceRemoveMarketsProcedure:
			serviceRemoveMarketsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[countries.CreateRequest]) (*connect_go.Response[countries.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[countries.UpdateRequest]) (*connect_go.Response[countries.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[countries.GetRequest]) (*connect_go.Response[countries.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) GetList(context.Context, *connect_go.Request[countries.GetListRequest], *connect_go.ServerStream[countries.GetListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.GetList is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[countries.DeleteRequest]) (*connect_go.Response[countries.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) SetFiats(context.Context, *connect_go.Request[countries.SetFiatsRequest]) (*connect_go.Response[countries.SetFiatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.SetFiats is not implemented"))
}

func (UnimplementedServiceHandler) AddFiats(context.Context, *connect_go.Request[countries.AddFiatsRequest]) (*connect_go.Response[countries.AddFiatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.AddFiats is not implemented"))
}

func (UnimplementedServiceHandler) GetFiats(context.Context, *connect_go.Request[countries.GetFiatsRequest]) (*connect_go.Response[countries.GetFiatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.GetFiats is not implemented"))
}

func (UnimplementedServiceHandler) RemoveFiats(context.Context, *connect_go.Request[countries.RemoveFiatsRequest]) (*connect_go.Response[countries.RemoveFiatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.RemoveFiats is not implemented"))
}

func (UnimplementedServiceHandler) SetCryptos(context.Context, *connect_go.Request[countries.SetCryptosRequest]) (*connect_go.Response[countries.SetCryptosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.SetCryptos is not implemented"))
}

func (UnimplementedServiceHandler) AddCryptos(context.Context, *connect_go.Request[countries.AddCryptosRequest]) (*connect_go.Response[countries.AddCryptosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.AddCryptos is not implemented"))
}

func (UnimplementedServiceHandler) GetCryptos(context.Context, *connect_go.Request[countries.GetCryptosRequest]) (*connect_go.Response[countries.GetCryptosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.GetCryptos is not implemented"))
}

func (UnimplementedServiceHandler) RemoveCryptos(context.Context, *connect_go.Request[countries.RemoveCryptosRequest]) (*connect_go.Response[countries.RemoveCryptosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.RemoveCryptos is not implemented"))
}

func (UnimplementedServiceHandler) SetMarkets(context.Context, *connect_go.Request[countries.SetMarketsRequest]) (*connect_go.Response[countries.SetMarketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.SetMarkets is not implemented"))
}

func (UnimplementedServiceHandler) AddMarkets(context.Context, *connect_go.Request[countries.AddMarketsRequest]) (*connect_go.Response[countries.AddMarketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.AddMarkets is not implemented"))
}

func (UnimplementedServiceHandler) GetMarkets(context.Context, *connect_go.Request[countries.GetMarketsRequest]) (*connect_go.Response[countries.GetMarketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.GetMarkets is not implemented"))
}

func (UnimplementedServiceHandler) RemoveMarkets(context.Context, *connect_go.Request[countries.RemoveMarketsRequest]) (*connect_go.Response[countries.RemoveMarketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("countries.Service.RemoveMarkets is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dvbots/dvbots_service.proto

package dvbotsconnect

import (
	context "context"
	dvbots "davensi.com/core/gen/dvbots"
	recipients "davensi.com/core/gen/recipients"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "dvbots.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/dvbots.Service/Create"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/dvbots.Service/Update"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/dvbots.Service/Get"
	// ServiceGetListProcedure is the fully-qualified name of the Service's GetList RPC.
	ServiceGetListProcedure = "/dvbots.Service/GetList"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/dvbots.Service/Delete"
	// ServiceSetParameterProcedure is the fully-qualified name of the Service's SetParameter RPC.
	ServiceSetParameterProcedure = "/dvbots.Service/SetParameter"
	// ServiceRemoveParameterProcedure is the fully-qualified name of the Service's RemoveParameter RPC.
	ServiceRemoveParameterProcedure = "/dvbots.Service/RemoveParameter"
	// ServiceGetParameterProcedure is the fully-qualified name of the Service's GetParameter RPC.
	ServiceGetParameterProcedure = "/dvbots.Service/GetParameter"
	// ServiceGetParameterListProcedure is the fully-qualified name of the Service's GetParameterList
	// RPC.
	ServiceGetParameterListProcedure = "/dvbots.Service/GetParameterList"
	// ServiceResetParameterProcedure is the fully-qualified name of the Service's ResetParameter RPC.
	ServiceResetParameterProcedure = "/dvbots.Service/ResetParameter"
)

// ServiceClient is a client for the dvbots.Service service.
type ServiceClient interface {
	Create(context.Context, *connect_go.Request[dvbots.CreateRequest]) (*connect_go.Response[dvbots.CreateResponse], error)
	Update(context.Context, *connect_go.Request[dvbots.UpdateRequest]) (*connect_go.Response[dvbots.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[recipients.GetRequest]) (*connect_go.Response[dvbots.GetResponse], error)
	GetList(context.Context, *connect_go.Request[dvbots.GetListRequest]) (*connect_go.ServerStreamForClient[dvbots.GetListResponse], error)
	Delete(context.Context, *connect_go.Request[recipients.DeleteRequest]) (*connect_go.Response[dvbots.DeleteResponse], error)
	SetParameter(context.Context, *connect_go.Request[dvbots.SetParameterRequest]) (*connect_go.Response[dvbots.SetParameterResponse], error)
	RemoveParameter(context.Context, *connect_go.Request[dvbots.RemoveParameterRequest]) (*connect_go.Response[dvbots.RemoveParameterResponse], error)
	GetParameter(context.Context, *connect_go.Request[dvbots.GetParameterRequest]) (*connect_go.Response[dvbots.GetParameterResponse], error)
	GetParameterList(context.Context, *connect_go.Request[dvbots.GetParameterListRequest]) (*connect_go.ServerStreamForClient[dvbots.GetParameterListResponse], error)
	ResetParameter(context.Context, *connect_go.Request[dvbots.ResetParameterRequest]) (*connect_go.ServerStreamForClient[dvbots.ResetParameterResponse], error)
}

// NewServiceClient constructs a client for the dvbots.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[dvbots.CreateRequest, dvbots.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		update: connect_go.NewClient[dvbots.UpdateRequest, dvbots.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		get: connect_go.NewClient[recipients.GetRequest, dvbots.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		getList: connect_go.NewClient[dvbots.GetListRequest, dvbots.GetListResponse](
			httpClient,
			baseURL+ServiceGetListProcedure,
			opts...,
		),
		delete: connect_go.NewClient[recipients.DeleteRequest, dvbots.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		setParameter: connect_go.NewClient[dvbots.SetParameterRequest, dvbots.SetParameterResponse](
			httpClient,
			baseURL+ServiceSetParameterProcedure,
			opts...,
		),
		removeParameter: connect_go.NewClient[dvbots.RemoveParameterRequest, dvbots.RemoveParameterResponse](
			httpClient,
			baseURL+ServiceRemoveParameterProcedure,
			opts...,
		),
		getParameter: connect_go.NewClient[dvbots.GetParameterRequest, dvbots.GetParameterResponse](
			httpClient,
			baseURL+ServiceGetParameterProcedure,
			opts...,
		),
		getParameterList: connect_go.NewClient[dvbots.GetParameterListRequest, dvbots.GetParameterListResponse](
			httpClient,
			baseURL+ServiceGetParameterListProcedure,
			opts...,
		),
		resetParameter: connect_go.NewClient[dvbots.ResetParameterRequest, dvbots.ResetParameterResponse](
			httpClient,
			baseURL+ServiceResetParameterProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create           *connect_go.Client[dvbots.CreateRequest, dvbots.CreateResponse]
	update           *connect_go.Client[dvbots.UpdateRequest, dvbots.UpdateResponse]
	get              *connect_go.Client[recipients.GetRequest, dvbots.GetResponse]
	getList          *connect_go.Client[dvbots.GetListRequest, dvbots.GetListResponse]
	delete           *connect_go.Client[recipients.DeleteRequest, dvbots.DeleteResponse]
	setParameter     *connect_go.Client[dvbots.SetParameterRequest, dvbots.SetParameterResponse]
	removeParameter  *connect_go.Client[dvbots.RemoveParameterRequest, dvbots.RemoveParameterResponse]
	getParameter     *connect_go.Client[dvbots.GetParameterRequest, dvbots.GetParameterResponse]
	getParameterList *connect_go.Client[dvbots.GetParameterListRequest, dvbots.GetParameterListResponse]
	resetParameter   *connect_go.Client[dvbots.ResetParameterRequest, dvbots.ResetParameterResponse]
}

// Create calls dvbots.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[dvbots.CreateRequest]) (*connect_go.Response[dvbots.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls dvbots.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[dvbots.UpdateRequest]) (*connect_go.Response[dvbots.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls dvbots.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[recipients.GetRequest]) (*connect_go.Response[dvbots.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetList calls dvbots.Service.GetList.
func (c *serviceClient) GetList(ctx context.Context, req *connect_go.Request[dvbots.GetListRequest]) (*connect_go.ServerStreamForClient[dvbots.GetListResponse], error) {
	return c.getList.CallServerStream(ctx, req)
}

// Delete calls dvbots.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[recipients.DeleteRequest]) (*connect_go.Response[dvbots.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SetParameter calls dvbots.Service.SetParameter.
func (c *serviceClient) SetParameter(ctx context.Context, req *connect_go.Request[dvbots.SetParameterRequest]) (*connect_go.Response[dvbots.SetParameterResponse], error) {
	return c.setParameter.CallUnary(ctx, req)
}

// RemoveParameter calls dvbots.Service.RemoveParameter.
func (c *serviceClient) RemoveParameter(ctx context.Context, req *connect_go.Request[dvbots.RemoveParameterRequest]) (*connect_go.Response[dvbots.RemoveParameterResponse], error) {
	return c.removeParameter.CallUnary(ctx, req)
}

// GetParameter calls dvbots.Service.GetParameter.
func (c *serviceClient) GetParameter(ctx context.Context, req *connect_go.Request[dvbots.GetParameterRequest]) (*connect_go.Response[dvbots.GetParameterResponse], error) {
	return c.getParameter.CallUnary(ctx, req)
}

// GetParameterList calls dvbots.Service.GetParameterList.
func (c *serviceClient) GetParameterList(ctx context.Context, req *connect_go.Request[dvbots.GetParameterListRequest]) (*connect_go.ServerStreamForClient[dvbots.GetParameterListResponse], error) {
	return c.getParameterList.CallServerStream(ctx, req)
}

// ResetParameter calls dvbots.Service.ResetParameter.
func (c *serviceClient) ResetParameter(ctx context.Context, req *connect_go.Request[dvbots.ResetParameterRequest]) (*connect_go.ServerStreamForClient[dvbots.ResetParameterResponse], error) {
	return c.resetParameter.CallServerStream(ctx, req)
}

// ServiceHandler is an implementation of the dvbots.Service service.
type ServiceHandler interface {
	Create(context.Context, *connect_go.Request[dvbots.CreateRequest]) (*connect_go.Response[dvbots.CreateResponse], error)
	Update(context.Context, *connect_go.Request[dvbots.UpdateRequest]) (*connect_go.Response[dvbots.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[recipients.GetRequest]) (*connect_go.Response[dvbots.GetResponse], error)
	GetList(context.Context, *connect_go.Request[dvbots.GetListRequest], *connect_go.ServerStream[dvbots.GetListResponse]) error
	Delete(context.Context, *connect_go.Request[recipients.DeleteRequest]) (*connect_go.Response[dvbots.DeleteResponse], error)
	SetParameter(context.Context, *connect_go.Request[dvbots.SetParameterRequest]) (*connect_go.Response[dvbots.SetParameterResponse], error)
	RemoveParameter(context.Context, *connect_go.Request[dvbots.RemoveParameterRequest]) (*connect_go.Response[dvbots.RemoveParameterResponse], error)
	GetParameter(context.Context, *connect_go.Request[dvbots.GetParameterRequest]) (*connect_go.Response[dvbots.GetParameterResponse], error)
	GetParameterList(context.Context, *connect_go.Request[dvbots.GetParameterListRequest], *connect_go.ServerStream[dvbots.GetParameterListResponse]) error
	ResetParameter(context.Context, *connect_go.Request[dvbots.ResetParameterRequest], *connect_go.ServerStream[dvbots.ResetParameterResponse]) error
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceGetListHandler := connect_go.NewServerStreamHandler(
		ServiceGetListProcedure,
		svc.GetList,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceSetParameterHandler := connect_go.NewUnaryHandler(
		ServiceSetParameterProcedure,
		svc.SetParameter,
		opts...,
	)
	serviceRemoveParameterHandler := connect_go.NewUnaryHandler(
		ServiceRemoveParameterProcedure,
		svc.RemoveParameter,
		opts...,
	)
	serviceGetParameterHandler := connect_go.NewUnaryHandler(
		ServiceGetParameterProcedure,
		svc.GetParameter,
		opts...,
	)
	serviceGetParameterListHandler := connect_go.NewServerStreamHandler(
		ServiceGetParameterListProcedure,
		svc.GetParameterList,
		opts...,
	)
	serviceResetParameterHandler := connect_go.NewServerStreamHandler(
		ServiceResetParameterProcedure,
		svc.ResetParameter,
		opts...,
	)
	return "/dvbots.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceGetListProcedure:
			serviceGetListHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceSetParameterProcedure:
			serviceSetParameterHandler.ServeHTTP(w, r)
		case ServiceRemoveParameterProcedure:
			serviceRemoveParameterHandler.ServeHTTP(w, r)
		case ServiceGetParameterProcedure:
			serviceGetParameterHandler.ServeHTTP(w, r)
		case ServiceGetParameterListProcedure:
			serviceGetParameterListHandler.ServeHTTP(w, r)
		case ServiceResetParameterProcedure:
			serviceResetParameterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[dvbots.CreateRequest]) (*connect_go.Response[dvbots.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[dvbots.UpdateRequest]) (*connect_go.Response[dvbots.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[recipients.GetRequest]) (*connect_go.Response[dvbots.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) GetList(context.Context, *connect_go.Request[dvbots.GetListRequest], *connect_go.ServerStream[dvbots.GetListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.GetList is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[recipients.DeleteRequest]) (*connect_go.Response[dvbots.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) SetParameter(context.Context, *connect_go.Request[dvbots.SetParameterRequest]) (*connect_go.Response[dvbots.SetParameterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.SetParameter is not implemented"))
}

func (UnimplementedServiceHandler) RemoveParameter(context.Context, *connect_go.Request[dvbots.RemoveParameterRequest]) (*connect_go.Response[dvbots.RemoveParameterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.RemoveParameter is not implemented"))
}

func (UnimplementedServiceHandler) GetParameter(context.Context, *connect_go.Request[dvbots.GetParameterRequest]) (*connect_go.Response[dvbots.GetParameterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.GetParameter is not implemented"))
}

func (UnimplementedServiceHandler) GetParameterList(context.Context, *connect_go.Request[dvbots.GetParameterListRequest], *connect_go.ServerStream[dvbots.GetParameterListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.GetParameterList is not implemented"))
}

func (UnimplementedServiceHandler) ResetParameter(context.Context, *connect_go.Request[dvbots.ResetParameterRequest], *connect_go.ServerStream[dvbots.ResetParameterResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dvbots.Service.ResetParameter is not implemented"))
}

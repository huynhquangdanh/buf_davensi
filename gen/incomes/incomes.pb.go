// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: incomes/incomes.proto

package incomes

import (
	addresses "davensi.com/core/gen/addresses"
	common "davensi.com/core/gen/common"
	countries "davensi.com/core/gen/countries"
	kyc "davensi.com/core/gen/kyc"
	uoms "davensi.com/core/gen/uoms"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_SALARY      Type = 1
	Type_TYPE_FEES        Type = 2
	Type_TYPE_DIVIDENDS   Type = 3
	Type_TYPE_INVESTMENT  Type = 4
	Type_TYPE_PENSION     Type = 5
	Type_TYPE_OTHER       Type = 255
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:   "TYPE_UNSPECIFIED",
		1:   "TYPE_SALARY",
		2:   "TYPE_FEES",
		3:   "TYPE_DIVIDENDS",
		4:   "TYPE_INVESTMENT",
		5:   "TYPE_PENSION",
		255: "TYPE_OTHER",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_SALARY":      1,
		"TYPE_FEES":        2,
		"TYPE_DIVIDENDS":   3,
		"TYPE_INVESTMENT":  4,
		"TYPE_PENSION":     5,
		"TYPE_OTHER":       255,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_incomes_incomes_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_incomes_incomes_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{0}
}

type TypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []Type `protobuf:"varint,1,rep,packed,name=list,proto3,enum=incomes.Type" json:"list,omitempty"`
}

func (x *TypeList) Reset() {
	*x = TypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeList) ProtoMessage() {}

func (x *TypeList) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeList.ProtoReflect.Descriptor instead.
func (*TypeList) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{0}
}

func (x *TypeList) GetList() []Type {
	if x != nil {
		return x.List
	}
	return nil
}

// Backed by table 'kyc_incomes'
type Income struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // System Key: id is generated by the server or the database
	Type                Type               `protobuf:"varint,2,opt,name=type,proto3,enum=incomes.Type" json:"type,omitempty"`
	AmountYear          *common.Decimal    `protobuf:"bytes,3,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth         *common.Decimal    `protobuf:"bytes,4,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek          *common.Decimal    `protobuf:"bytes,5,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay           *common.Decimal    `protobuf:"bytes,6,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour          *common.Decimal    `protobuf:"bytes,7,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency            *uoms.UoM          `protobuf:"bytes,8,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Description         *string            `protobuf:"bytes,9,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Employer            *string            `protobuf:"bytes,10,opt,name=employer,proto3,oneof" json:"employer,omitempty"`
	Industry            *string            `protobuf:"bytes,11,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Occupation          *string            `protobuf:"bytes,12,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	EmploymentType      *string            `protobuf:"bytes,13,opt,name=employment_type,json=employmentType,proto3,oneof" json:"employment_type,omitempty"`
	EmploymentStatus    *string            `protobuf:"bytes,14,opt,name=employment_status,json=employmentStatus,proto3,oneof" json:"employment_status,omitempty"`
	EmploymentStartDate *string            `protobuf:"bytes,15,opt,name=employment_start_date,json=employmentStartDate,proto3,oneof" json:"employment_start_date,omitempty"`
	Company             *string            `protobuf:"bytes,16,opt,name=company,proto3,oneof" json:"company,omitempty"`
	InvestmentVehicle   *string            `protobuf:"bytes,17,opt,name=investment_vehicle,json=investmentVehicle,proto3,oneof" json:"investment_vehicle,omitempty"`
	PropertyAddress     *addresses.Address `protobuf:"bytes,18,opt,name=property_address,json=propertyAddress,proto3,oneof" json:"property_address,omitempty"`
	FromCountry         *countries.Country `protobuf:"bytes,19,opt,name=from_country,json=fromCountry,proto3,oneof" json:"from_country,omitempty"`
	Status              common.Status      `protobuf:"varint,20,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
}

func (x *Income) Reset() {
	*x = Income{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Income) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Income) ProtoMessage() {}

func (x *Income) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Income.ProtoReflect.Descriptor instead.
func (*Income) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{1}
}

func (x *Income) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Income) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *Income) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Income) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Income) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Income) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Income) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *Income) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Income) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Income) GetEmployer() string {
	if x != nil && x.Employer != nil {
		return *x.Employer
	}
	return ""
}

func (x *Income) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *Income) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *Income) GetEmploymentType() string {
	if x != nil && x.EmploymentType != nil {
		return *x.EmploymentType
	}
	return ""
}

func (x *Income) GetEmploymentStatus() string {
	if x != nil && x.EmploymentStatus != nil {
		return *x.EmploymentStatus
	}
	return ""
}

func (x *Income) GetEmploymentStartDate() string {
	if x != nil && x.EmploymentStartDate != nil {
		return *x.EmploymentStartDate
	}
	return ""
}

func (x *Income) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *Income) GetInvestmentVehicle() string {
	if x != nil && x.InvestmentVehicle != nil {
		return *x.InvestmentVehicle
	}
	return ""
}

func (x *Income) GetPropertyAddress() *addresses.Address {
	if x != nil {
		return x.PropertyAddress
	}
	return nil
}

func (x *Income) GetFromCountry() *countries.Country {
	if x != nil {
		return x.FromCountry
	}
	return nil
}

func (x *Income) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Income `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{2}
}

func (x *List) GetList() []*Income {
	if x != nil {
		return x.List
	}
	return nil
}

type SelectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectList) Reset() {
	*x = SelectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectList) ProtoMessage() {}

func (x *SelectList) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectList.ProtoReflect.Descriptor instead.
func (*SelectList) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{3}
}

func (x *SelectList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type Salary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear          *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth         *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek          *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay           *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour          *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency            *uoms.UoM       `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Employer            *string         `protobuf:"bytes,7,opt,name=employer,proto3,oneof" json:"employer,omitempty"`
	Industry            *string         `protobuf:"bytes,8,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Occupation          *string         `protobuf:"bytes,9,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	EmploymentType      *string         `protobuf:"bytes,10,opt,name=employment_type,json=employmentType,proto3,oneof" json:"employment_type,omitempty"`
	EmploymentStatus    *string         `protobuf:"bytes,11,opt,name=employment_status,json=employmentStatus,proto3,oneof" json:"employment_status,omitempty"`
	EmploymentStartDate *string         `protobuf:"bytes,12,opt,name=employment_start_date,json=employmentStartDate,proto3,oneof" json:"employment_start_date,omitempty"`
}

func (x *Salary) Reset() {
	*x = Salary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Salary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salary) ProtoMessage() {}

func (x *Salary) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salary.ProtoReflect.Descriptor instead.
func (*Salary) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{4}
}

func (x *Salary) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Salary) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Salary) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Salary) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Salary) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *Salary) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Salary) GetEmployer() string {
	if x != nil && x.Employer != nil {
		return *x.Employer
	}
	return ""
}

func (x *Salary) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *Salary) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *Salary) GetEmploymentType() string {
	if x != nil && x.EmploymentType != nil {
		return *x.EmploymentType
	}
	return ""
}

func (x *Salary) GetEmploymentStatus() string {
	if x != nil && x.EmploymentStatus != nil {
		return *x.EmploymentStatus
	}
	return ""
}

func (x *Salary) GetEmploymentStartDate() string {
	if x != nil && x.EmploymentStartDate != nil {
		return *x.EmploymentStartDate
	}
	return ""
}

type SetSalary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear          *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth         *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek          *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay           *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour          *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency            *uoms.Select    `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Employer            *string         `protobuf:"bytes,7,opt,name=employer,proto3,oneof" json:"employer,omitempty"`
	Industry            *string         `protobuf:"bytes,8,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Occupation          *string         `protobuf:"bytes,9,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	EmploymentType      *string         `protobuf:"bytes,10,opt,name=employment_type,json=employmentType,proto3,oneof" json:"employment_type,omitempty"`
	EmploymentStatus    *string         `protobuf:"bytes,11,opt,name=employment_status,json=employmentStatus,proto3,oneof" json:"employment_status,omitempty"`
	EmploymentStartDate *string         `protobuf:"bytes,12,opt,name=employment_start_date,json=employmentStartDate,proto3,oneof" json:"employment_start_date,omitempty"`
}

func (x *SetSalary) Reset() {
	*x = SetSalary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSalary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSalary) ProtoMessage() {}

func (x *SetSalary) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSalary.ProtoReflect.Descriptor instead.
func (*SetSalary) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{5}
}

func (x *SetSalary) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetSalary) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetSalary) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *SetSalary) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *SetSalary) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *SetSalary) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetSalary) GetEmployer() string {
	if x != nil && x.Employer != nil {
		return *x.Employer
	}
	return ""
}

func (x *SetSalary) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *SetSalary) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *SetSalary) GetEmploymentType() string {
	if x != nil && x.EmploymentType != nil {
		return *x.EmploymentType
	}
	return ""
}

func (x *SetSalary) GetEmploymentStatus() string {
	if x != nil && x.EmploymentStatus != nil {
		return *x.EmploymentStatus
	}
	return ""
}

func (x *SetSalary) GetEmploymentStartDate() string {
	if x != nil && x.EmploymentStartDate != nil {
		return *x.EmploymentStartDate
	}
	return ""
}

type Freelancing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour  *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency    *uoms.UoM       `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Occupation  *string         `protobuf:"bytes,7,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
}

func (x *Freelancing) Reset() {
	*x = Freelancing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Freelancing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Freelancing) ProtoMessage() {}

func (x *Freelancing) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Freelancing.ProtoReflect.Descriptor instead.
func (*Freelancing) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{6}
}

func (x *Freelancing) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Freelancing) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Freelancing) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Freelancing) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Freelancing) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *Freelancing) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Freelancing) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

type SetFreelancing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour  *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency    *uoms.Select    `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Occupation  *string         `protobuf:"bytes,7,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
}

func (x *SetFreelancing) Reset() {
	*x = SetFreelancing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFreelancing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFreelancing) ProtoMessage() {}

func (x *SetFreelancing) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFreelancing.ProtoReflect.Descriptor instead.
func (*SetFreelancing) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{7}
}

func (x *SetFreelancing) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetFreelancing) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetFreelancing) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *SetFreelancing) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *SetFreelancing) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *SetFreelancing) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetFreelancing) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

type Dividends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	Currency   *uoms.UoM       `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Company    *string         `protobuf:"bytes,3,opt,name=company,proto3,oneof" json:"company,omitempty"`
	Industry   *string         `protobuf:"bytes,4,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
}

func (x *Dividends) Reset() {
	*x = Dividends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dividends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dividends) ProtoMessage() {}

func (x *Dividends) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dividends.ProtoReflect.Descriptor instead.
func (*Dividends) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{8}
}

func (x *Dividends) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Dividends) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Dividends) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *Dividends) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

type SetDividends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	Currency   *uoms.Select    `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Company    *string         `protobuf:"bytes,3,opt,name=company,proto3,oneof" json:"company,omitempty"`
	Industry   *string         `protobuf:"bytes,4,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
}

func (x *SetDividends) Reset() {
	*x = SetDividends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDividends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDividends) ProtoMessage() {}

func (x *SetDividends) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDividends.ProtoReflect.Descriptor instead.
func (*SetDividends) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{9}
}

func (x *SetDividends) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetDividends) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetDividends) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *SetDividends) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

type Investment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear        *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth       *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	Currency          *uoms.UoM       `protobuf:"bytes,3,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	InvestmentVehicle *string         `protobuf:"bytes,4,opt,name=investment_vehicle,json=investmentVehicle,proto3,oneof" json:"investment_vehicle,omitempty"`
}

func (x *Investment) Reset() {
	*x = Investment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Investment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investment) ProtoMessage() {}

func (x *Investment) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investment.ProtoReflect.Descriptor instead.
func (*Investment) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{10}
}

func (x *Investment) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Investment) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Investment) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Investment) GetInvestmentVehicle() string {
	if x != nil && x.InvestmentVehicle != nil {
		return *x.InvestmentVehicle
	}
	return ""
}

type SetInvestment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear        *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth       *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	Currency          *uoms.Select    `protobuf:"bytes,3,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	InvestmentVehicle *string         `protobuf:"bytes,4,opt,name=investment_vehicle,json=investmentVehicle,proto3,oneof" json:"investment_vehicle,omitempty"`
}

func (x *SetInvestment) Reset() {
	*x = SetInvestment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInvestment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInvestment) ProtoMessage() {}

func (x *SetInvestment) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInvestment.ProtoReflect.Descriptor instead.
func (*SetInvestment) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{11}
}

func (x *SetInvestment) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetInvestment) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetInvestment) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetInvestment) GetInvestmentVehicle() string {
	if x != nil && x.InvestmentVehicle != nil {
		return *x.InvestmentVehicle
	}
	return ""
}

type Rent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear      *common.Decimal          `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth     *common.Decimal          `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek      *common.Decimal          `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay       *common.Decimal          `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour      *common.Decimal          `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency        *uoms.UoM                `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	PropertyAddress *addresses.CreateRequest `protobuf:"bytes,7,opt,name=property_address,json=propertyAddress,proto3,oneof" json:"property_address,omitempty"`
}

func (x *Rent) Reset() {
	*x = Rent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rent) ProtoMessage() {}

func (x *Rent) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rent.ProtoReflect.Descriptor instead.
func (*Rent) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{12}
}

func (x *Rent) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Rent) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Rent) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Rent) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Rent) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *Rent) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Rent) GetPropertyAddress() *addresses.CreateRequest {
	if x != nil {
		return x.PropertyAddress
	}
	return nil
}

type SetRent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear      *common.Decimal          `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth     *common.Decimal          `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek      *common.Decimal          `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay       *common.Decimal          `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour      *common.Decimal          `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency        *uoms.Select             `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	PropertyAddress *addresses.CreateRequest `protobuf:"bytes,7,opt,name=property_address,json=propertyAddress,proto3,oneof" json:"property_address,omitempty"`
}

func (x *SetRent) Reset() {
	*x = SetRent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRent) ProtoMessage() {}

func (x *SetRent) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRent.ProtoReflect.Descriptor instead.
func (*SetRent) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{13}
}

func (x *SetRent) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetRent) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetRent) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *SetRent) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *SetRent) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *SetRent) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetRent) GetPropertyAddress() *addresses.CreateRequest {
	if x != nil {
		return x.PropertyAddress
	}
	return nil
}

type Pension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal   `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal   `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal   `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal   `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	Currency    *uoms.UoM         `protobuf:"bytes,5,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	FromCountry *countries.Select `protobuf:"bytes,6,opt,name=from_country,json=fromCountry,proto3,oneof" json:"from_country,omitempty"`
}

func (x *Pension) Reset() {
	*x = Pension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pension) ProtoMessage() {}

func (x *Pension) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pension.ProtoReflect.Descriptor instead.
func (*Pension) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{14}
}

func (x *Pension) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Pension) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Pension) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Pension) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Pension) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Pension) GetFromCountry() *countries.Select {
	if x != nil {
		return x.FromCountry
	}
	return nil
}

type SetPension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal   `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal   `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal   `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal   `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	Currency    *uoms.Select      `protobuf:"bytes,5,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	FromCountry *countries.Select `protobuf:"bytes,6,opt,name=from_country,json=fromCountry,proto3,oneof" json:"from_country,omitempty"`
}

func (x *SetPension) Reset() {
	*x = SetPension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPension) ProtoMessage() {}

func (x *SetPension) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPension.ProtoReflect.Descriptor instead.
func (*SetPension) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{15}
}

func (x *SetPension) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetPension) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetPension) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *SetPension) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *SetPension) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetPension) GetFromCountry() *countries.Select {
	if x != nil {
		return x.FromCountry
	}
	return nil
}

type Other struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour  *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency    *uoms.UoM       `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Description *string         `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *Other) Reset() {
	*x = Other{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Other) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Other) ProtoMessage() {}

func (x *Other) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Other.ProtoReflect.Descriptor instead.
func (*Other) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{16}
}

func (x *Other) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *Other) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *Other) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *Other) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *Other) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *Other) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Other) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type SetOther struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountYear  *common.Decimal `protobuf:"bytes,1,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth *common.Decimal `protobuf:"bytes,2,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek  *common.Decimal `protobuf:"bytes,3,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay   *common.Decimal `protobuf:"bytes,4,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour  *common.Decimal `protobuf:"bytes,5,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency    *uoms.Select    `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Description *string         `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *SetOther) Reset() {
	*x = SetOther{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOther) ProtoMessage() {}

func (x *SetOther) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOther.ProtoReflect.Descriptor instead.
func (*SetOther) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{17}
}

func (x *SetOther) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *SetOther) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *SetOther) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *SetOther) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *SetOther) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *SetOther) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SetOther) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is generated by the server or the database
	//
	// Types that are assignable to Select:
	//
	//	*CreateRequest_Salary
	//	*CreateRequest_Freelancing
	//	*CreateRequest_Dividends
	//	*CreateRequest_Investment
	//	*CreateRequest_Rent
	//	*CreateRequest_Pension
	//	*CreateRequest_Other
	Select isCreateRequest_Select `protobuf_oneof:"select"`
	Status *common.Status         `protobuf:"varint,8,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"` // Default: STATUS_UNSPECIFIED, which means Income needs to be activated after creation
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{18}
}

func (m *CreateRequest) GetSelect() isCreateRequest_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *CreateRequest) GetSalary() *SetSalary {
	if x, ok := x.GetSelect().(*CreateRequest_Salary); ok {
		return x.Salary
	}
	return nil
}

func (x *CreateRequest) GetFreelancing() *SetFreelancing {
	if x, ok := x.GetSelect().(*CreateRequest_Freelancing); ok {
		return x.Freelancing
	}
	return nil
}

func (x *CreateRequest) GetDividends() *SetDividends {
	if x, ok := x.GetSelect().(*CreateRequest_Dividends); ok {
		return x.Dividends
	}
	return nil
}

func (x *CreateRequest) GetInvestment() *SetInvestment {
	if x, ok := x.GetSelect().(*CreateRequest_Investment); ok {
		return x.Investment
	}
	return nil
}

func (x *CreateRequest) GetRent() *SetRent {
	if x, ok := x.GetSelect().(*CreateRequest_Rent); ok {
		return x.Rent
	}
	return nil
}

func (x *CreateRequest) GetPension() *SetPension {
	if x, ok := x.GetSelect().(*CreateRequest_Pension); ok {
		return x.Pension
	}
	return nil
}

func (x *CreateRequest) GetOther() *SetOther {
	if x, ok := x.GetSelect().(*CreateRequest_Other); ok {
		return x.Other
	}
	return nil
}

func (x *CreateRequest) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type isCreateRequest_Select interface {
	isCreateRequest_Select()
}

type CreateRequest_Salary struct {
	Salary *SetSalary `protobuf:"bytes,1,opt,name=salary,proto3,oneof"`
}

type CreateRequest_Freelancing struct {
	Freelancing *SetFreelancing `protobuf:"bytes,2,opt,name=freelancing,proto3,oneof"`
}

type CreateRequest_Dividends struct {
	Dividends *SetDividends `protobuf:"bytes,3,opt,name=dividends,proto3,oneof"`
}

type CreateRequest_Investment struct {
	Investment *SetInvestment `protobuf:"bytes,4,opt,name=investment,proto3,oneof"`
}

type CreateRequest_Rent struct {
	Rent *SetRent `protobuf:"bytes,5,opt,name=rent,proto3,oneof"`
}

type CreateRequest_Pension struct {
	Pension *SetPension `protobuf:"bytes,6,opt,name=pension,proto3,oneof"`
}

type CreateRequest_Other struct {
	Other *SetOther `protobuf:"bytes,7,opt,name=other,proto3,oneof"`
}

func (*CreateRequest_Salary) isCreateRequest_Select() {}

func (*CreateRequest_Freelancing) isCreateRequest_Select() {}

func (*CreateRequest_Dividends) isCreateRequest_Select() {}

func (*CreateRequest_Investment) isCreateRequest_Select() {}

func (*CreateRequest_Rent) isCreateRequest_Select() {}

func (*CreateRequest_Pension) isCreateRequest_Select() {}

func (*CreateRequest_Other) isCreateRequest_Select() {}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CreateResponse_Error
	//	*CreateResponse_Income
	Response isCreateResponse_Response `protobuf_oneof:"response"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{19}
}

func (m *CreateResponse) GetResponse() isCreateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CreateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*CreateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *CreateResponse) GetIncome() *Income {
	if x, ok := x.GetResponse().(*CreateResponse_Income); ok {
		return x.Income
	}
	return nil
}

type isCreateResponse_Response interface {
	isCreateResponse_Response()
}

type CreateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type CreateResponse_Income struct {
	Income *Income `protobuf:"bytes,2,opt,name=income,proto3,oneof"`
}

func (*CreateResponse_Error) isCreateResponse_Response() {}

func (*CreateResponse_Income) isCreateResponse_Response() {}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Select:
	//
	//	*UpdateRequest_Salary
	//	*UpdateRequest_Freelancing
	//	*UpdateRequest_Dividends
	//	*UpdateRequest_Investment
	//	*UpdateRequest_Rent
	//	*UpdateRequest_Pension
	//	*UpdateRequest_Other
	Select isUpdateRequest_Select `protobuf_oneof:"select"`
	Status *common.Status         `protobuf:"varint,9,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *UpdateRequest) GetSelect() isUpdateRequest_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *UpdateRequest) GetSalary() *SetSalary {
	if x, ok := x.GetSelect().(*UpdateRequest_Salary); ok {
		return x.Salary
	}
	return nil
}

func (x *UpdateRequest) GetFreelancing() *SetFreelancing {
	if x, ok := x.GetSelect().(*UpdateRequest_Freelancing); ok {
		return x.Freelancing
	}
	return nil
}

func (x *UpdateRequest) GetDividends() *SetDividends {
	if x, ok := x.GetSelect().(*UpdateRequest_Dividends); ok {
		return x.Dividends
	}
	return nil
}

func (x *UpdateRequest) GetInvestment() *SetInvestment {
	if x, ok := x.GetSelect().(*UpdateRequest_Investment); ok {
		return x.Investment
	}
	return nil
}

func (x *UpdateRequest) GetRent() *SetRent {
	if x, ok := x.GetSelect().(*UpdateRequest_Rent); ok {
		return x.Rent
	}
	return nil
}

func (x *UpdateRequest) GetPension() *SetPension {
	if x, ok := x.GetSelect().(*UpdateRequest_Pension); ok {
		return x.Pension
	}
	return nil
}

func (x *UpdateRequest) GetOther() *SetOther {
	if x, ok := x.GetSelect().(*UpdateRequest_Other); ok {
		return x.Other
	}
	return nil
}

func (x *UpdateRequest) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type isUpdateRequest_Select interface {
	isUpdateRequest_Select()
}

type UpdateRequest_Salary struct {
	Salary *SetSalary `protobuf:"bytes,2,opt,name=salary,proto3,oneof"`
}

type UpdateRequest_Freelancing struct {
	Freelancing *SetFreelancing `protobuf:"bytes,3,opt,name=freelancing,proto3,oneof"`
}

type UpdateRequest_Dividends struct {
	Dividends *SetDividends `protobuf:"bytes,4,opt,name=dividends,proto3,oneof"`
}

type UpdateRequest_Investment struct {
	Investment *SetInvestment `protobuf:"bytes,5,opt,name=investment,proto3,oneof"`
}

type UpdateRequest_Rent struct {
	Rent *SetRent `protobuf:"bytes,6,opt,name=rent,proto3,oneof"`
}

type UpdateRequest_Pension struct {
	Pension *SetPension `protobuf:"bytes,7,opt,name=pension,proto3,oneof"`
}

type UpdateRequest_Other struct {
	Other *SetOther `protobuf:"bytes,8,opt,name=other,proto3,oneof"`
}

func (*UpdateRequest_Salary) isUpdateRequest_Select() {}

func (*UpdateRequest_Freelancing) isUpdateRequest_Select() {}

func (*UpdateRequest_Dividends) isUpdateRequest_Select() {}

func (*UpdateRequest_Investment) isUpdateRequest_Select() {}

func (*UpdateRequest_Rent) isUpdateRequest_Select() {}

func (*UpdateRequest_Pension) isUpdateRequest_Select() {}

func (*UpdateRequest_Other) isUpdateRequest_Select() {}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*UpdateResponse_Error
	//	*UpdateResponse_Income
	Response isUpdateResponse_Response `protobuf_oneof:"response"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{21}
}

func (m *UpdateResponse) GetResponse() isUpdateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UpdateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*UpdateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *UpdateResponse) GetIncome() *Income {
	if x, ok := x.GetResponse().(*UpdateResponse_Income); ok {
		return x.Income
	}
	return nil
}

type isUpdateResponse_Response interface {
	isUpdateResponse_Response()
}

type UpdateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type UpdateResponse_Income struct {
	Income *Income `protobuf:"bytes,2,opt,name=income,proto3,oneof"`
}

func (*UpdateResponse_Error) isUpdateResponse_Response() {}

func (*UpdateResponse_Income) isUpdateResponse_Response() {}

// GetRequest is expected to return a single value.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{22}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// An error is returned if there is more than one record found.
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetResponse_Error
	//	*GetResponse_Income
	Response isGetResponse_Response `protobuf_oneof:"response"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{23}
}

func (m *GetResponse) GetResponse() isGetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetIncome() *Income {
	if x, ok := x.GetResponse().(*GetResponse_Income); ok {
		return x.Income
	}
	return nil
}

type isGetResponse_Response interface {
	isGetResponse_Response()
}

type GetResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetResponse_Income struct {
	Income *Income `protobuf:"bytes,2,opt,name=income,proto3,oneof"`
}

func (*GetResponse_Error) isGetResponse_Response() {}

func (*GetResponse_Income) isGetResponse_Response() {}

// GetList will use SQL 'LIKE' instead of '=' for string fields
type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *TypeList                 `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	AmountYear          *common.Decimal           `protobuf:"bytes,2,opt,name=amount_year,json=amountYear,proto3,oneof" json:"amount_year,omitempty"`
	AmountMonth         *common.Decimal           `protobuf:"bytes,3,opt,name=amount_month,json=amountMonth,proto3,oneof" json:"amount_month,omitempty"`
	AmountWeek          *common.Decimal           `protobuf:"bytes,4,opt,name=amount_week,json=amountWeek,proto3,oneof" json:"amount_week,omitempty"`
	AmountDay           *common.Decimal           `protobuf:"bytes,5,opt,name=amount_day,json=amountDay,proto3,oneof" json:"amount_day,omitempty"`
	AmountHour          *common.Decimal           `protobuf:"bytes,6,opt,name=amount_hour,json=amountHour,proto3,oneof" json:"amount_hour,omitempty"`
	Currency            *uoms.GetListRequest      `protobuf:"bytes,7,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Description         *string                   `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Employer            *string                   `protobuf:"bytes,9,opt,name=employer,proto3,oneof" json:"employer,omitempty"`
	Industry            *string                   `protobuf:"bytes,10,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Occupation          *string                   `protobuf:"bytes,11,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	EmploymentType      *string                   `protobuf:"bytes,12,opt,name=employment_type,json=employmentType,proto3,oneof" json:"employment_type,omitempty"`
	EmploymentStatus    *string                   `protobuf:"bytes,13,opt,name=employment_status,json=employmentStatus,proto3,oneof" json:"employment_status,omitempty"`
	EmploymentStartDate *string                   `protobuf:"bytes,14,opt,name=employment_start_date,json=employmentStartDate,proto3,oneof" json:"employment_start_date,omitempty"`
	Company             *string                   `protobuf:"bytes,15,opt,name=company,proto3,oneof" json:"company,omitempty"`
	InvestmentVehicle   *string                   `protobuf:"bytes,16,opt,name=investment_vehicle,json=investmentVehicle,proto3,oneof" json:"investment_vehicle,omitempty"`
	PropertyAddress     *addresses.GetListRequest `protobuf:"bytes,17,opt,name=property_address,json=propertyAddress,proto3,oneof" json:"property_address,omitempty"`
	FromCountry         *countries.GetListRequest `protobuf:"bytes,18,opt,name=from_country,json=fromCountry,proto3,oneof" json:"from_country,omitempty"`
	Status              *common.StatusList        `protobuf:"bytes,19,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{24}
}

func (x *GetListRequest) GetType() *TypeList {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetListRequest) GetAmountYear() *common.Decimal {
	if x != nil {
		return x.AmountYear
	}
	return nil
}

func (x *GetListRequest) GetAmountMonth() *common.Decimal {
	if x != nil {
		return x.AmountMonth
	}
	return nil
}

func (x *GetListRequest) GetAmountWeek() *common.Decimal {
	if x != nil {
		return x.AmountWeek
	}
	return nil
}

func (x *GetListRequest) GetAmountDay() *common.Decimal {
	if x != nil {
		return x.AmountDay
	}
	return nil
}

func (x *GetListRequest) GetAmountHour() *common.Decimal {
	if x != nil {
		return x.AmountHour
	}
	return nil
}

func (x *GetListRequest) GetCurrency() *uoms.GetListRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *GetListRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetListRequest) GetEmployer() string {
	if x != nil && x.Employer != nil {
		return *x.Employer
	}
	return ""
}

func (x *GetListRequest) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *GetListRequest) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *GetListRequest) GetEmploymentType() string {
	if x != nil && x.EmploymentType != nil {
		return *x.EmploymentType
	}
	return ""
}

func (x *GetListRequest) GetEmploymentStatus() string {
	if x != nil && x.EmploymentStatus != nil {
		return *x.EmploymentStatus
	}
	return ""
}

func (x *GetListRequest) GetEmploymentStartDate() string {
	if x != nil && x.EmploymentStartDate != nil {
		return *x.EmploymentStartDate
	}
	return ""
}

func (x *GetListRequest) GetCompany() string {
	if x != nil && x.Company != nil {
		return *x.Company
	}
	return ""
}

func (x *GetListRequest) GetInvestmentVehicle() string {
	if x != nil && x.InvestmentVehicle != nil {
		return *x.InvestmentVehicle
	}
	return ""
}

func (x *GetListRequest) GetPropertyAddress() *addresses.GetListRequest {
	if x != nil {
		return x.PropertyAddress
	}
	return nil
}

func (x *GetListRequest) GetFromCountry() *countries.GetListRequest {
	if x != nil {
		return x.FromCountry
	}
	return nil
}

func (x *GetListRequest) GetStatus() *common.StatusList {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetListResponse_Error
	//	*GetListResponse_Income
	Response isGetListResponse_Response `protobuf_oneof:"response"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{25}
}

func (m *GetListResponse) GetResponse() isGetListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetListResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetListResponse) GetIncome() *Income {
	if x, ok := x.GetResponse().(*GetListResponse_Income); ok {
		return x.Income
	}
	return nil
}

type isGetListResponse_Response interface {
	isGetListResponse_Response()
}

type GetListResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetListResponse_Income struct {
	Income *Income `protobuf:"bytes,2,opt,name=income,proto3,oneof"`
}

func (*GetListResponse_Error) isGetListResponse_Response() {}

func (*GetListResponse_Income) isGetListResponse_Response() {}

// A delete request is just an update request with status set to TERMINATED.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DeleteResponse_Error
	//	*DeleteResponse_Income
	Response isDeleteResponse_Response `protobuf_oneof:"response"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{27}
}

func (m *DeleteResponse) GetResponse() isDeleteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DeleteResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*DeleteResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *DeleteResponse) GetIncome() *Income {
	if x, ok := x.GetResponse().(*DeleteResponse_Income); ok {
		return x.Income
	}
	return nil
}

type isDeleteResponse_Response interface {
	isDeleteResponse_Response()
}

type DeleteResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type DeleteResponse_Income struct {
	Income *Income `protobuf:"bytes,2,opt,name=income,proto3,oneof"`
}

func (*DeleteResponse_Error) isDeleteResponse_Response() {}

func (*DeleteResponse_Income) isDeleteResponse_Response() {}

type LabeledIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string     `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Income *Income    `protobuf:"bytes,2,opt,name=income,proto3" json:"income,omitempty"`
	Status kyc.Status `protobuf:"varint,3,opt,name=status,proto3,enum=kyc.Status" json:"status,omitempty"`
}

func (x *LabeledIncome) Reset() {
	*x = LabeledIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledIncome) ProtoMessage() {}

func (x *LabeledIncome) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledIncome.ProtoReflect.Descriptor instead.
func (*LabeledIncome) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{28}
}

func (x *LabeledIncome) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabeledIncome) GetIncome() *Income {
	if x != nil {
		return x.Income
	}
	return nil
}

func (x *LabeledIncome) GetStatus() kyc.Status {
	if x != nil {
		return x.Status
	}
	return kyc.Status(0)
}

type LabeledIncomeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*LabeledIncome `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LabeledIncomeList) Reset() {
	*x = LabeledIncomeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledIncomeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledIncomeList) ProtoMessage() {}

func (x *LabeledIncomeList) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledIncomeList.ProtoReflect.Descriptor instead.
func (*LabeledIncomeList) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{29}
}

func (x *LabeledIncomeList) GetList() []*LabeledIncome {
	if x != nil {
		return x.List
	}
	return nil
}

// Assign existing income or create and assign new income to Entity
type SetLabeledIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to Response:
	//
	//	*SetLabeledIncome_Id
	//	*SetLabeledIncome_Income
	Response isSetLabeledIncome_Response `protobuf_oneof:"response"`
	Status   kyc.Status                  `protobuf:"varint,4,opt,name=status,proto3,enum=kyc.Status" json:"status,omitempty"`
}

func (x *SetLabeledIncome) Reset() {
	*x = SetLabeledIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLabeledIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLabeledIncome) ProtoMessage() {}

func (x *SetLabeledIncome) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLabeledIncome.ProtoReflect.Descriptor instead.
func (*SetLabeledIncome) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{30}
}

func (x *SetLabeledIncome) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *SetLabeledIncome) GetResponse() isSetLabeledIncome_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SetLabeledIncome) GetId() string {
	if x, ok := x.GetResponse().(*SetLabeledIncome_Id); ok {
		return x.Id
	}
	return ""
}

func (x *SetLabeledIncome) GetIncome() *CreateRequest {
	if x, ok := x.GetResponse().(*SetLabeledIncome_Income); ok {
		return x.Income
	}
	return nil
}

func (x *SetLabeledIncome) GetStatus() kyc.Status {
	if x != nil {
		return x.Status
	}
	return kyc.Status(0)
}

type isSetLabeledIncome_Response interface {
	isSetLabeledIncome_Response()
}

type SetLabeledIncome_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type SetLabeledIncome_Income struct {
	Income *CreateRequest `protobuf:"bytes,3,opt,name=income,proto3,oneof"`
}

func (*SetLabeledIncome_Id) isSetLabeledIncome_Response() {}

func (*SetLabeledIncome_Income) isSetLabeledIncome_Response() {}

type SetLabeledIncomeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SetLabeledIncome `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SetLabeledIncomeList) Reset() {
	*x = SetLabeledIncomeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLabeledIncomeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLabeledIncomeList) ProtoMessage() {}

func (x *SetLabeledIncomeList) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLabeledIncomeList.ProtoReflect.Descriptor instead.
func (*SetLabeledIncomeList) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{31}
}

func (x *SetLabeledIncomeList) GetList() []*SetLabeledIncome {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateLabeledIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  *string        `protobuf:"bytes,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Type   *Type          `protobuf:"varint,2,opt,name=type,proto3,enum=incomes.Type,oneof" json:"type,omitempty"`
	Value  *string        `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Status *common.Status `protobuf:"varint,4,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *UpdateLabeledIncome) Reset() {
	*x = UpdateLabeledIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabeledIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabeledIncome) ProtoMessage() {}

func (x *UpdateLabeledIncome) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabeledIncome.ProtoReflect.Descriptor instead.
func (*UpdateLabeledIncome) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateLabeledIncome) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *UpdateLabeledIncome) GetType() Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *UpdateLabeledIncome) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *UpdateLabeledIncome) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type UpdateLabeledIncomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByLabel string               `protobuf:"bytes,1,opt,name=by_label,json=byLabel,proto3" json:"by_label,omitempty"`
	Address *UpdateLabeledIncome `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status  kyc.Status           `protobuf:"varint,3,opt,name=status,proto3,enum=kyc.Status" json:"status,omitempty"`
}

func (x *UpdateLabeledIncomeRequest) Reset() {
	*x = UpdateLabeledIncomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabeledIncomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabeledIncomeRequest) ProtoMessage() {}

func (x *UpdateLabeledIncomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabeledIncomeRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabeledIncomeRequest) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateLabeledIncomeRequest) GetByLabel() string {
	if x != nil {
		return x.ByLabel
	}
	return ""
}

func (x *UpdateLabeledIncomeRequest) GetAddress() *UpdateLabeledIncome {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateLabeledIncomeRequest) GetStatus() kyc.Status {
	if x != nil {
		return x.Status
	}
	return kyc.Status(0)
}

type UpdateIncome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *Type          `protobuf:"varint,1,opt,name=type,proto3,enum=incomes.Type,oneof" json:"type,omitempty"`
	Value  *string        `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Status *common.Status `protobuf:"varint,3,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *UpdateIncome) Reset() {
	*x = UpdateIncome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incomes_incomes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIncome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIncome) ProtoMessage() {}

func (x *UpdateIncome) ProtoReflect() protoreflect.Message {
	mi := &file_incomes_incomes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIncome.ProtoReflect.Descriptor instead.
func (*UpdateIncome) Descriptor() ([]byte, []int) {
	return file_incomes_incomes_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateIncome) GetType() Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *UpdateIncome) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *UpdateIncome) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

var File_incomes_incomes_proto protoreflect.FileDescriptor

var file_incomes_incomes_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x1a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x6f, 0x6d, 0x73, 0x2f, 0x75,
	0x6f, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6b, 0x79, 0x63, 0x2f, 0x6b,
	0x79, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x09, 0x0a, 0x06, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f,
	0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x10,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x0f, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x10, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2b, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x06, 0x0a, 0x06, 0x53, 0x61,
	0x6c, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73,
	0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x97, 0x06,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65,
	0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75,
	0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x46,
	0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01,
	0x0a, 0x09, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48,
	0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x02, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x22,
	0x81, 0x04, 0x0a, 0x04, 0x52, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xaa, 0x03,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55,
	0x6f, 0x4d, 0x48, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xb0, 0x03, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xda, 0x03,
	0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75,
	0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x03, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75,
	0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x03,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x46, 0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x46, 0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf6, 0x09, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x10, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x11, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x12, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x0d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x79,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3f, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x45, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x36, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x88, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x41, 0x4c, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0xff, 0x01, 0x42, 0x75, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x42, 0x0c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x64, 0x61, 0x76, 0x65, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0xca, 0x02, 0x07, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0xe2, 0x02, 0x13, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x07, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_incomes_incomes_proto_rawDescOnce sync.Once
	file_incomes_incomes_proto_rawDescData = file_incomes_incomes_proto_rawDesc
)

func file_incomes_incomes_proto_rawDescGZIP() []byte {
	file_incomes_incomes_proto_rawDescOnce.Do(func() {
		file_incomes_incomes_proto_rawDescData = protoimpl.X.CompressGZIP(file_incomes_incomes_proto_rawDescData)
	})
	return file_incomes_incomes_proto_rawDescData
}

var file_incomes_incomes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_incomes_incomes_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_incomes_incomes_proto_goTypes = []interface{}{
	(Type)(0),                          // 0: incomes.Type
	(*TypeList)(nil),                   // 1: incomes.TypeList
	(*Income)(nil),                     // 2: incomes.Income
	(*List)(nil),                       // 3: incomes.List
	(*SelectList)(nil),                 // 4: incomes.SelectList
	(*Salary)(nil),                     // 5: incomes.Salary
	(*SetSalary)(nil),                  // 6: incomes.SetSalary
	(*Freelancing)(nil),                // 7: incomes.Freelancing
	(*SetFreelancing)(nil),             // 8: incomes.SetFreelancing
	(*Dividends)(nil),                  // 9: incomes.Dividends
	(*SetDividends)(nil),               // 10: incomes.SetDividends
	(*Investment)(nil),                 // 11: incomes.Investment
	(*SetInvestment)(nil),              // 12: incomes.SetInvestment
	(*Rent)(nil),                       // 13: incomes.Rent
	(*SetRent)(nil),                    // 14: incomes.SetRent
	(*Pension)(nil),                    // 15: incomes.Pension
	(*SetPension)(nil),                 // 16: incomes.SetPension
	(*Other)(nil),                      // 17: incomes.Other
	(*SetOther)(nil),                   // 18: incomes.SetOther
	(*CreateRequest)(nil),              // 19: incomes.CreateRequest
	(*CreateResponse)(nil),             // 20: incomes.CreateResponse
	(*UpdateRequest)(nil),              // 21: incomes.UpdateRequest
	(*UpdateResponse)(nil),             // 22: incomes.UpdateResponse
	(*GetRequest)(nil),                 // 23: incomes.GetRequest
	(*GetResponse)(nil),                // 24: incomes.GetResponse
	(*GetListRequest)(nil),             // 25: incomes.GetListRequest
	(*GetListResponse)(nil),            // 26: incomes.GetListResponse
	(*DeleteRequest)(nil),              // 27: incomes.DeleteRequest
	(*DeleteResponse)(nil),             // 28: incomes.DeleteResponse
	(*LabeledIncome)(nil),              // 29: incomes.LabeledIncome
	(*LabeledIncomeList)(nil),          // 30: incomes.LabeledIncomeList
	(*SetLabeledIncome)(nil),           // 31: incomes.SetLabeledIncome
	(*SetLabeledIncomeList)(nil),       // 32: incomes.SetLabeledIncomeList
	(*UpdateLabeledIncome)(nil),        // 33: incomes.UpdateLabeledIncome
	(*UpdateLabeledIncomeRequest)(nil), // 34: incomes.UpdateLabeledIncomeRequest
	(*UpdateIncome)(nil),               // 35: incomes.UpdateIncome
	(*common.Decimal)(nil),             // 36: common.Decimal
	(*uoms.UoM)(nil),                   // 37: uoms.UoM
	(*addresses.Address)(nil),          // 38: addresses.Address
	(*countries.Country)(nil),          // 39: countries.Country
	(common.Status)(0),                 // 40: common.Status
	(*uoms.Select)(nil),                // 41: uoms.Select
	(*addresses.CreateRequest)(nil),    // 42: addresses.CreateRequest
	(*countries.Select)(nil),           // 43: countries.Select
	(*common.Error)(nil),               // 44: common.Error
	(*uoms.GetListRequest)(nil),        // 45: uoms.GetListRequest
	(*addresses.GetListRequest)(nil),   // 46: addresses.GetListRequest
	(*countries.GetListRequest)(nil),   // 47: countries.GetListRequest
	(*common.StatusList)(nil),          // 48: common.StatusList
	(kyc.Status)(0),                    // 49: kyc.Status
}
var file_incomes_incomes_proto_depIdxs = []int32{
	0,   // 0: incomes.TypeList.list:type_name -> incomes.Type
	0,   // 1: incomes.Income.type:type_name -> incomes.Type
	36,  // 2: incomes.Income.amount_year:type_name -> common.Decimal
	36,  // 3: incomes.Income.amount_month:type_name -> common.Decimal
	36,  // 4: incomes.Income.amount_week:type_name -> common.Decimal
	36,  // 5: incomes.Income.amount_day:type_name -> common.Decimal
	36,  // 6: incomes.Income.amount_hour:type_name -> common.Decimal
	37,  // 7: incomes.Income.currency:type_name -> uoms.UoM
	38,  // 8: incomes.Income.property_address:type_name -> addresses.Address
	39,  // 9: incomes.Income.from_country:type_name -> countries.Country
	40,  // 10: incomes.Income.status:type_name -> common.Status
	2,   // 11: incomes.List.list:type_name -> incomes.Income
	36,  // 12: incomes.Salary.amount_year:type_name -> common.Decimal
	36,  // 13: incomes.Salary.amount_month:type_name -> common.Decimal
	36,  // 14: incomes.Salary.amount_week:type_name -> common.Decimal
	36,  // 15: incomes.Salary.amount_day:type_name -> common.Decimal
	36,  // 16: incomes.Salary.amount_hour:type_name -> common.Decimal
	37,  // 17: incomes.Salary.currency:type_name -> uoms.UoM
	36,  // 18: incomes.SetSalary.amount_year:type_name -> common.Decimal
	36,  // 19: incomes.SetSalary.amount_month:type_name -> common.Decimal
	36,  // 20: incomes.SetSalary.amount_week:type_name -> common.Decimal
	36,  // 21: incomes.SetSalary.amount_day:type_name -> common.Decimal
	36,  // 22: incomes.SetSalary.amount_hour:type_name -> common.Decimal
	41,  // 23: incomes.SetSalary.currency:type_name -> uoms.Select
	36,  // 24: incomes.Freelancing.amount_year:type_name -> common.Decimal
	36,  // 25: incomes.Freelancing.amount_month:type_name -> common.Decimal
	36,  // 26: incomes.Freelancing.amount_week:type_name -> common.Decimal
	36,  // 27: incomes.Freelancing.amount_day:type_name -> common.Decimal
	36,  // 28: incomes.Freelancing.amount_hour:type_name -> common.Decimal
	37,  // 29: incomes.Freelancing.currency:type_name -> uoms.UoM
	36,  // 30: incomes.SetFreelancing.amount_year:type_name -> common.Decimal
	36,  // 31: incomes.SetFreelancing.amount_month:type_name -> common.Decimal
	36,  // 32: incomes.SetFreelancing.amount_week:type_name -> common.Decimal
	36,  // 33: incomes.SetFreelancing.amount_day:type_name -> common.Decimal
	36,  // 34: incomes.SetFreelancing.amount_hour:type_name -> common.Decimal
	41,  // 35: incomes.SetFreelancing.currency:type_name -> uoms.Select
	36,  // 36: incomes.Dividends.amount_year:type_name -> common.Decimal
	37,  // 37: incomes.Dividends.currency:type_name -> uoms.UoM
	36,  // 38: incomes.SetDividends.amount_year:type_name -> common.Decimal
	41,  // 39: incomes.SetDividends.currency:type_name -> uoms.Select
	36,  // 40: incomes.Investment.amount_year:type_name -> common.Decimal
	36,  // 41: incomes.Investment.amount_month:type_name -> common.Decimal
	37,  // 42: incomes.Investment.currency:type_name -> uoms.UoM
	36,  // 43: incomes.SetInvestment.amount_year:type_name -> common.Decimal
	36,  // 44: incomes.SetInvestment.amount_month:type_name -> common.Decimal
	41,  // 45: incomes.SetInvestment.currency:type_name -> uoms.Select
	36,  // 46: incomes.Rent.amount_year:type_name -> common.Decimal
	36,  // 47: incomes.Rent.amount_month:type_name -> common.Decimal
	36,  // 48: incomes.Rent.amount_week:type_name -> common.Decimal
	36,  // 49: incomes.Rent.amount_day:type_name -> common.Decimal
	36,  // 50: incomes.Rent.amount_hour:type_name -> common.Decimal
	37,  // 51: incomes.Rent.currency:type_name -> uoms.UoM
	42,  // 52: incomes.Rent.property_address:type_name -> addresses.CreateRequest
	36,  // 53: incomes.SetRent.amount_year:type_name -> common.Decimal
	36,  // 54: incomes.SetRent.amount_month:type_name -> common.Decimal
	36,  // 55: incomes.SetRent.amount_week:type_name -> common.Decimal
	36,  // 56: incomes.SetRent.amount_day:type_name -> common.Decimal
	36,  // 57: incomes.SetRent.amount_hour:type_name -> common.Decimal
	41,  // 58: incomes.SetRent.currency:type_name -> uoms.Select
	42,  // 59: incomes.SetRent.property_address:type_name -> addresses.CreateRequest
	36,  // 60: incomes.Pension.amount_year:type_name -> common.Decimal
	36,  // 61: incomes.Pension.amount_month:type_name -> common.Decimal
	36,  // 62: incomes.Pension.amount_week:type_name -> common.Decimal
	36,  // 63: incomes.Pension.amount_day:type_name -> common.Decimal
	37,  // 64: incomes.Pension.currency:type_name -> uoms.UoM
	43,  // 65: incomes.Pension.from_country:type_name -> countries.Select
	36,  // 66: incomes.SetPension.amount_year:type_name -> common.Decimal
	36,  // 67: incomes.SetPension.amount_month:type_name -> common.Decimal
	36,  // 68: incomes.SetPension.amount_week:type_name -> common.Decimal
	36,  // 69: incomes.SetPension.amount_day:type_name -> common.Decimal
	41,  // 70: incomes.SetPension.currency:type_name -> uoms.Select
	43,  // 71: incomes.SetPension.from_country:type_name -> countries.Select
	36,  // 72: incomes.Other.amount_year:type_name -> common.Decimal
	36,  // 73: incomes.Other.amount_month:type_name -> common.Decimal
	36,  // 74: incomes.Other.amount_week:type_name -> common.Decimal
	36,  // 75: incomes.Other.amount_day:type_name -> common.Decimal
	36,  // 76: incomes.Other.amount_hour:type_name -> common.Decimal
	37,  // 77: incomes.Other.currency:type_name -> uoms.UoM
	36,  // 78: incomes.SetOther.amount_year:type_name -> common.Decimal
	36,  // 79: incomes.SetOther.amount_month:type_name -> common.Decimal
	36,  // 80: incomes.SetOther.amount_week:type_name -> common.Decimal
	36,  // 81: incomes.SetOther.amount_day:type_name -> common.Decimal
	36,  // 82: incomes.SetOther.amount_hour:type_name -> common.Decimal
	41,  // 83: incomes.SetOther.currency:type_name -> uoms.Select
	6,   // 84: incomes.CreateRequest.salary:type_name -> incomes.SetSalary
	8,   // 85: incomes.CreateRequest.freelancing:type_name -> incomes.SetFreelancing
	10,  // 86: incomes.CreateRequest.dividends:type_name -> incomes.SetDividends
	12,  // 87: incomes.CreateRequest.investment:type_name -> incomes.SetInvestment
	14,  // 88: incomes.CreateRequest.rent:type_name -> incomes.SetRent
	16,  // 89: incomes.CreateRequest.pension:type_name -> incomes.SetPension
	18,  // 90: incomes.CreateRequest.other:type_name -> incomes.SetOther
	40,  // 91: incomes.CreateRequest.status:type_name -> common.Status
	44,  // 92: incomes.CreateResponse.error:type_name -> common.Error
	2,   // 93: incomes.CreateResponse.income:type_name -> incomes.Income
	6,   // 94: incomes.UpdateRequest.salary:type_name -> incomes.SetSalary
	8,   // 95: incomes.UpdateRequest.freelancing:type_name -> incomes.SetFreelancing
	10,  // 96: incomes.UpdateRequest.dividends:type_name -> incomes.SetDividends
	12,  // 97: incomes.UpdateRequest.investment:type_name -> incomes.SetInvestment
	14,  // 98: incomes.UpdateRequest.rent:type_name -> incomes.SetRent
	16,  // 99: incomes.UpdateRequest.pension:type_name -> incomes.SetPension
	18,  // 100: incomes.UpdateRequest.other:type_name -> incomes.SetOther
	40,  // 101: incomes.UpdateRequest.status:type_name -> common.Status
	44,  // 102: incomes.UpdateResponse.error:type_name -> common.Error
	2,   // 103: incomes.UpdateResponse.income:type_name -> incomes.Income
	44,  // 104: incomes.GetResponse.error:type_name -> common.Error
	2,   // 105: incomes.GetResponse.income:type_name -> incomes.Income
	1,   // 106: incomes.GetListRequest.type:type_name -> incomes.TypeList
	36,  // 107: incomes.GetListRequest.amount_year:type_name -> common.Decimal
	36,  // 108: incomes.GetListRequest.amount_month:type_name -> common.Decimal
	36,  // 109: incomes.GetListRequest.amount_week:type_name -> common.Decimal
	36,  // 110: incomes.GetListRequest.amount_day:type_name -> common.Decimal
	36,  // 111: incomes.GetListRequest.amount_hour:type_name -> common.Decimal
	45,  // 112: incomes.GetListRequest.currency:type_name -> uoms.GetListRequest
	46,  // 113: incomes.GetListRequest.property_address:type_name -> addresses.GetListRequest
	47,  // 114: incomes.GetListRequest.from_country:type_name -> countries.GetListRequest
	48,  // 115: incomes.GetListRequest.status:type_name -> common.StatusList
	44,  // 116: incomes.GetListResponse.error:type_name -> common.Error
	2,   // 117: incomes.GetListResponse.income:type_name -> incomes.Income
	44,  // 118: incomes.DeleteResponse.error:type_name -> common.Error
	2,   // 119: incomes.DeleteResponse.income:type_name -> incomes.Income
	2,   // 120: incomes.LabeledIncome.income:type_name -> incomes.Income
	49,  // 121: incomes.LabeledIncome.status:type_name -> kyc.Status
	29,  // 122: incomes.LabeledIncomeList.list:type_name -> incomes.LabeledIncome
	19,  // 123: incomes.SetLabeledIncome.income:type_name -> incomes.CreateRequest
	49,  // 124: incomes.SetLabeledIncome.status:type_name -> kyc.Status
	31,  // 125: incomes.SetLabeledIncomeList.list:type_name -> incomes.SetLabeledIncome
	0,   // 126: incomes.UpdateLabeledIncome.type:type_name -> incomes.Type
	40,  // 127: incomes.UpdateLabeledIncome.status:type_name -> common.Status
	33,  // 128: incomes.UpdateLabeledIncomeRequest.address:type_name -> incomes.UpdateLabeledIncome
	49,  // 129: incomes.UpdateLabeledIncomeRequest.status:type_name -> kyc.Status
	0,   // 130: incomes.UpdateIncome.type:type_name -> incomes.Type
	40,  // 131: incomes.UpdateIncome.status:type_name -> common.Status
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_incomes_incomes_proto_init() }
func file_incomes_incomes_proto_init() {
	if File_incomes_incomes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_incomes_incomes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Income); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Salary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSalary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Freelancing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFreelancing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dividends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDividends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Investment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInvestment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Other); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOther); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledIncomeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLabeledIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLabeledIncomeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabeledIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabeledIncomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incomes_incomes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIncome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_incomes_incomes_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*CreateRequest_Salary)(nil),
		(*CreateRequest_Freelancing)(nil),
		(*CreateRequest_Dividends)(nil),
		(*CreateRequest_Investment)(nil),
		(*CreateRequest_Rent)(nil),
		(*CreateRequest_Pension)(nil),
		(*CreateRequest_Other)(nil),
	}
	file_incomes_incomes_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*CreateResponse_Error)(nil),
		(*CreateResponse_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*UpdateRequest_Salary)(nil),
		(*UpdateRequest_Freelancing)(nil),
		(*UpdateRequest_Dividends)(nil),
		(*UpdateRequest_Investment)(nil),
		(*UpdateRequest_Rent)(nil),
		(*UpdateRequest_Pension)(nil),
		(*UpdateRequest_Other)(nil),
	}
	file_incomes_incomes_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*UpdateResponse_Error)(nil),
		(*UpdateResponse_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*GetResponse_Error)(nil),
		(*GetResponse_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*GetListResponse_Error)(nil),
		(*GetListResponse_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*DeleteResponse_Error)(nil),
		(*DeleteResponse_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SetLabeledIncome_Id)(nil),
		(*SetLabeledIncome_Income)(nil),
	}
	file_incomes_incomes_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_incomes_incomes_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_incomes_incomes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_incomes_incomes_proto_goTypes,
		DependencyIndexes: file_incomes_incomes_proto_depIdxs,
		EnumInfos:         file_incomes_incomes_proto_enumTypes,
		MessageInfos:      file_incomes_incomes_proto_msgTypes,
	}.Build()
	File_incomes_incomes_proto = out.File
	file_incomes_incomes_proto_rawDesc = nil
	file_incomes_incomes_proto_goTypes = nil
	file_incomes_incomes_proto_depIdxs = nil
}

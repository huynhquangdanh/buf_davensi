// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: legalentities/legalentities_service.proto

package legalentitiesconnect

import (
	context "context"
	legalentities "davensi.com/core/gen/legalentities"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "legalentities.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/legalentities.Service/Create"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/legalentities.Service/Update"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/legalentities.Service/Get"
	// ServiceGetListProcedure is the fully-qualified name of the Service's GetList RPC.
	ServiceGetListProcedure = "/legalentities.Service/GetList"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/legalentities.Service/Delete"
	// ServiceSetAddressesProcedure is the fully-qualified name of the Service's SetAddresses RPC.
	ServiceSetAddressesProcedure = "/legalentities.Service/SetAddresses"
	// ServiceAddAddressesProcedure is the fully-qualified name of the Service's AddAddresses RPC.
	ServiceAddAddressesProcedure = "/legalentities.Service/AddAddresses"
	// ServiceUpdateAddressProcedure is the fully-qualified name of the Service's UpdateAddress RPC.
	ServiceUpdateAddressProcedure = "/legalentities.Service/UpdateAddress"
	// ServiceRemoveAddressesProcedure is the fully-qualified name of the Service's RemoveAddresses RPC.
	ServiceRemoveAddressesProcedure = "/legalentities.Service/RemoveAddresses"
	// ServiceSetContactsProcedure is the fully-qualified name of the Service's SetContacts RPC.
	ServiceSetContactsProcedure = "/legalentities.Service/SetContacts"
	// ServiceAddContactsProcedure is the fully-qualified name of the Service's AddContacts RPC.
	ServiceAddContactsProcedure = "/legalentities.Service/AddContacts"
	// ServiceUpdateContactProcedure is the fully-qualified name of the Service's UpdateContact RPC.
	ServiceUpdateContactProcedure = "/legalentities.Service/UpdateContact"
	// ServiceRemoveContactsProcedure is the fully-qualified name of the Service's RemoveContacts RPC.
	ServiceRemoveContactsProcedure = "/legalentities.Service/RemoveContacts"
)

// ServiceClient is a client for the legalentities.Service service.
type ServiceClient interface {
	Create(context.Context, *connect_go.Request[legalentities.CreateRequest]) (*connect_go.Response[legalentities.CreateResponse], error)
	Update(context.Context, *connect_go.Request[legalentities.UpdateRequest]) (*connect_go.Response[legalentities.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[legalentities.GetRequest]) (*connect_go.Response[legalentities.GetResponse], error)
	GetList(context.Context, *connect_go.Request[legalentities.GetListRequest]) (*connect_go.ServerStreamForClient[legalentities.GetListResponse], error)
	Delete(context.Context, *connect_go.Request[legalentities.DeleteRequest]) (*connect_go.Response[legalentities.DeleteResponse], error)
	SetAddresses(context.Context, *connect_go.Request[legalentities.SetAddressesRequest]) (*connect_go.Response[legalentities.SetAddressesResponse], error)
	AddAddresses(context.Context, *connect_go.Request[legalentities.AddAddressesRequest]) (*connect_go.Response[legalentities.AddAddressesResponse], error)
	UpdateAddress(context.Context, *connect_go.Request[legalentities.UpdateAddressRequest]) (*connect_go.Response[legalentities.UpdateAddressResponse], error)
	RemoveAddresses(context.Context, *connect_go.Request[legalentities.RemoveAddressesRequest]) (*connect_go.Response[legalentities.RemoveAddressesResponse], error)
	SetContacts(context.Context, *connect_go.Request[legalentities.SetContactsRequest]) (*connect_go.Response[legalentities.SetContactsResponse], error)
	AddContacts(context.Context, *connect_go.Request[legalentities.AddContactsRequest]) (*connect_go.Response[legalentities.AddContactsResponse], error)
	UpdateContact(context.Context, *connect_go.Request[legalentities.UpdateContactRequest]) (*connect_go.Response[legalentities.UpdateContactResponse], error)
	RemoveContacts(context.Context, *connect_go.Request[legalentities.RemoveContactsRequest]) (*connect_go.Response[legalentities.RemoveContactsResponse], error)
}

// NewServiceClient constructs a client for the legalentities.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[legalentities.CreateRequest, legalentities.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		update: connect_go.NewClient[legalentities.UpdateRequest, legalentities.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		get: connect_go.NewClient[legalentities.GetRequest, legalentities.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		getList: connect_go.NewClient[legalentities.GetListRequest, legalentities.GetListResponse](
			httpClient,
			baseURL+ServiceGetListProcedure,
			opts...,
		),
		delete: connect_go.NewClient[legalentities.DeleteRequest, legalentities.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		setAddresses: connect_go.NewClient[legalentities.SetAddressesRequest, legalentities.SetAddressesResponse](
			httpClient,
			baseURL+ServiceSetAddressesProcedure,
			opts...,
		),
		addAddresses: connect_go.NewClient[legalentities.AddAddressesRequest, legalentities.AddAddressesResponse](
			httpClient,
			baseURL+ServiceAddAddressesProcedure,
			opts...,
		),
		updateAddress: connect_go.NewClient[legalentities.UpdateAddressRequest, legalentities.UpdateAddressResponse](
			httpClient,
			baseURL+ServiceUpdateAddressProcedure,
			opts...,
		),
		removeAddresses: connect_go.NewClient[legalentities.RemoveAddressesRequest, legalentities.RemoveAddressesResponse](
			httpClient,
			baseURL+ServiceRemoveAddressesProcedure,
			opts...,
		),
		setContacts: connect_go.NewClient[legalentities.SetContactsRequest, legalentities.SetContactsResponse](
			httpClient,
			baseURL+ServiceSetContactsProcedure,
			opts...,
		),
		addContacts: connect_go.NewClient[legalentities.AddContactsRequest, legalentities.AddContactsResponse](
			httpClient,
			baseURL+ServiceAddContactsProcedure,
			opts...,
		),
		updateContact: connect_go.NewClient[legalentities.UpdateContactRequest, legalentities.UpdateContactResponse](
			httpClient,
			baseURL+ServiceUpdateContactProcedure,
			opts...,
		),
		removeContacts: connect_go.NewClient[legalentities.RemoveContactsRequest, legalentities.RemoveContactsResponse](
			httpClient,
			baseURL+ServiceRemoveContactsProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create          *connect_go.Client[legalentities.CreateRequest, legalentities.CreateResponse]
	update          *connect_go.Client[legalentities.UpdateRequest, legalentities.UpdateResponse]
	get             *connect_go.Client[legalentities.GetRequest, legalentities.GetResponse]
	getList         *connect_go.Client[legalentities.GetListRequest, legalentities.GetListResponse]
	delete          *connect_go.Client[legalentities.DeleteRequest, legalentities.DeleteResponse]
	setAddresses    *connect_go.Client[legalentities.SetAddressesRequest, legalentities.SetAddressesResponse]
	addAddresses    *connect_go.Client[legalentities.AddAddressesRequest, legalentities.AddAddressesResponse]
	updateAddress   *connect_go.Client[legalentities.UpdateAddressRequest, legalentities.UpdateAddressResponse]
	removeAddresses *connect_go.Client[legalentities.RemoveAddressesRequest, legalentities.RemoveAddressesResponse]
	setContacts     *connect_go.Client[legalentities.SetContactsRequest, legalentities.SetContactsResponse]
	addContacts     *connect_go.Client[legalentities.AddContactsRequest, legalentities.AddContactsResponse]
	updateContact   *connect_go.Client[legalentities.UpdateContactRequest, legalentities.UpdateContactResponse]
	removeContacts  *connect_go.Client[legalentities.RemoveContactsRequest, legalentities.RemoveContactsResponse]
}

// Create calls legalentities.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[legalentities.CreateRequest]) (*connect_go.Response[legalentities.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls legalentities.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[legalentities.UpdateRequest]) (*connect_go.Response[legalentities.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls legalentities.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[legalentities.GetRequest]) (*connect_go.Response[legalentities.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetList calls legalentities.Service.GetList.
func (c *serviceClient) GetList(ctx context.Context, req *connect_go.Request[legalentities.GetListRequest]) (*connect_go.ServerStreamForClient[legalentities.GetListResponse], error) {
	return c.getList.CallServerStream(ctx, req)
}

// Delete calls legalentities.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[legalentities.DeleteRequest]) (*connect_go.Response[legalentities.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SetAddresses calls legalentities.Service.SetAddresses.
func (c *serviceClient) SetAddresses(ctx context.Context, req *connect_go.Request[legalentities.SetAddressesRequest]) (*connect_go.Response[legalentities.SetAddressesResponse], error) {
	return c.setAddresses.CallUnary(ctx, req)
}

// AddAddresses calls legalentities.Service.AddAddresses.
func (c *serviceClient) AddAddresses(ctx context.Context, req *connect_go.Request[legalentities.AddAddressesRequest]) (*connect_go.Response[legalentities.AddAddressesResponse], error) {
	return c.addAddresses.CallUnary(ctx, req)
}

// UpdateAddress calls legalentities.Service.UpdateAddress.
func (c *serviceClient) UpdateAddress(ctx context.Context, req *connect_go.Request[legalentities.UpdateAddressRequest]) (*connect_go.Response[legalentities.UpdateAddressResponse], error) {
	return c.updateAddress.CallUnary(ctx, req)
}

// RemoveAddresses calls legalentities.Service.RemoveAddresses.
func (c *serviceClient) RemoveAddresses(ctx context.Context, req *connect_go.Request[legalentities.RemoveAddressesRequest]) (*connect_go.Response[legalentities.RemoveAddressesResponse], error) {
	return c.removeAddresses.CallUnary(ctx, req)
}

// SetContacts calls legalentities.Service.SetContacts.
func (c *serviceClient) SetContacts(ctx context.Context, req *connect_go.Request[legalentities.SetContactsRequest]) (*connect_go.Response[legalentities.SetContactsResponse], error) {
	return c.setContacts.CallUnary(ctx, req)
}

// AddContacts calls legalentities.Service.AddContacts.
func (c *serviceClient) AddContacts(ctx context.Context, req *connect_go.Request[legalentities.AddContactsRequest]) (*connect_go.Response[legalentities.AddContactsResponse], error) {
	return c.addContacts.CallUnary(ctx, req)
}

// UpdateContact calls legalentities.Service.UpdateContact.
func (c *serviceClient) UpdateContact(ctx context.Context, req *connect_go.Request[legalentities.UpdateContactRequest]) (*connect_go.Response[legalentities.UpdateContactResponse], error) {
	return c.updateContact.CallUnary(ctx, req)
}

// RemoveContacts calls legalentities.Service.RemoveContacts.
func (c *serviceClient) RemoveContacts(ctx context.Context, req *connect_go.Request[legalentities.RemoveContactsRequest]) (*connect_go.Response[legalentities.RemoveContactsResponse], error) {
	return c.removeContacts.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the legalentities.Service service.
type ServiceHandler interface {
	Create(context.Context, *connect_go.Request[legalentities.CreateRequest]) (*connect_go.Response[legalentities.CreateResponse], error)
	Update(context.Context, *connect_go.Request[legalentities.UpdateRequest]) (*connect_go.Response[legalentities.UpdateResponse], error)
	Get(context.Context, *connect_go.Request[legalentities.GetRequest]) (*connect_go.Response[legalentities.GetResponse], error)
	GetList(context.Context, *connect_go.Request[legalentities.GetListRequest], *connect_go.ServerStream[legalentities.GetListResponse]) error
	Delete(context.Context, *connect_go.Request[legalentities.DeleteRequest]) (*connect_go.Response[legalentities.DeleteResponse], error)
	SetAddresses(context.Context, *connect_go.Request[legalentities.SetAddressesRequest]) (*connect_go.Response[legalentities.SetAddressesResponse], error)
	AddAddresses(context.Context, *connect_go.Request[legalentities.AddAddressesRequest]) (*connect_go.Response[legalentities.AddAddressesResponse], error)
	UpdateAddress(context.Context, *connect_go.Request[legalentities.UpdateAddressRequest]) (*connect_go.Response[legalentities.UpdateAddressResponse], error)
	RemoveAddresses(context.Context, *connect_go.Request[legalentities.RemoveAddressesRequest]) (*connect_go.Response[legalentities.RemoveAddressesResponse], error)
	SetContacts(context.Context, *connect_go.Request[legalentities.SetContactsRequest]) (*connect_go.Response[legalentities.SetContactsResponse], error)
	AddContacts(context.Context, *connect_go.Request[legalentities.AddContactsRequest]) (*connect_go.Response[legalentities.AddContactsResponse], error)
	UpdateContact(context.Context, *connect_go.Request[legalentities.UpdateContactRequest]) (*connect_go.Response[legalentities.UpdateContactResponse], error)
	RemoveContacts(context.Context, *connect_go.Request[legalentities.RemoveContactsRequest]) (*connect_go.Response[legalentities.RemoveContactsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceGetListHandler := connect_go.NewServerStreamHandler(
		ServiceGetListProcedure,
		svc.GetList,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceSetAddressesHandler := connect_go.NewUnaryHandler(
		ServiceSetAddressesProcedure,
		svc.SetAddresses,
		opts...,
	)
	serviceAddAddressesHandler := connect_go.NewUnaryHandler(
		ServiceAddAddressesProcedure,
		svc.AddAddresses,
		opts...,
	)
	serviceUpdateAddressHandler := connect_go.NewUnaryHandler(
		ServiceUpdateAddressProcedure,
		svc.UpdateAddress,
		opts...,
	)
	serviceRemoveAddressesHandler := connect_go.NewUnaryHandler(
		ServiceRemoveAddressesProcedure,
		svc.RemoveAddresses,
		opts...,
	)
	serviceSetContactsHandler := connect_go.NewUnaryHandler(
		ServiceSetContactsProcedure,
		svc.SetContacts,
		opts...,
	)
	serviceAddContactsHandler := connect_go.NewUnaryHandler(
		ServiceAddContactsProcedure,
		svc.AddContacts,
		opts...,
	)
	serviceUpdateContactHandler := connect_go.NewUnaryHandler(
		ServiceUpdateContactProcedure,
		svc.UpdateContact,
		opts...,
	)
	serviceRemoveContactsHandler := connect_go.NewUnaryHandler(
		ServiceRemoveContactsProcedure,
		svc.RemoveContacts,
		opts...,
	)
	return "/legalentities.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceGetListProcedure:
			serviceGetListHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceSetAddressesProcedure:
			serviceSetAddressesHandler.ServeHTTP(w, r)
		case ServiceAddAddressesProcedure:
			serviceAddAddressesHandler.ServeHTTP(w, r)
		case ServiceUpdateAddressProcedure:
			serviceUpdateAddressHandler.ServeHTTP(w, r)
		case ServiceRemoveAddressesProcedure:
			serviceRemoveAddressesHandler.ServeHTTP(w, r)
		case ServiceSetContactsProcedure:
			serviceSetContactsHandler.ServeHTTP(w, r)
		case ServiceAddContactsProcedure:
			serviceAddContactsHandler.ServeHTTP(w, r)
		case ServiceUpdateContactProcedure:
			serviceUpdateContactHandler.ServeHTTP(w, r)
		case ServiceRemoveContactsProcedure:
			serviceRemoveContactsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[legalentities.CreateRequest]) (*connect_go.Response[legalentities.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[legalentities.UpdateRequest]) (*connect_go.Response[legalentities.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[legalentities.GetRequest]) (*connect_go.Response[legalentities.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) GetList(context.Context, *connect_go.Request[legalentities.GetListRequest], *connect_go.ServerStream[legalentities.GetListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.GetList is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[legalentities.DeleteRequest]) (*connect_go.Response[legalentities.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) SetAddresses(context.Context, *connect_go.Request[legalentities.SetAddressesRequest]) (*connect_go.Response[legalentities.SetAddressesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.SetAddresses is not implemented"))
}

func (UnimplementedServiceHandler) AddAddresses(context.Context, *connect_go.Request[legalentities.AddAddressesRequest]) (*connect_go.Response[legalentities.AddAddressesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.AddAddresses is not implemented"))
}

func (UnimplementedServiceHandler) UpdateAddress(context.Context, *connect_go.Request[legalentities.UpdateAddressRequest]) (*connect_go.Response[legalentities.UpdateAddressResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.UpdateAddress is not implemented"))
}

func (UnimplementedServiceHandler) RemoveAddresses(context.Context, *connect_go.Request[legalentities.RemoveAddressesRequest]) (*connect_go.Response[legalentities.RemoveAddressesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.RemoveAddresses is not implemented"))
}

func (UnimplementedServiceHandler) SetContacts(context.Context, *connect_go.Request[legalentities.SetContactsRequest]) (*connect_go.Response[legalentities.SetContactsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.SetContacts is not implemented"))
}

func (UnimplementedServiceHandler) AddContacts(context.Context, *connect_go.Request[legalentities.AddContactsRequest]) (*connect_go.Response[legalentities.AddContactsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.AddContacts is not implemented"))
}

func (UnimplementedServiceHandler) UpdateContact(context.Context, *connect_go.Request[legalentities.UpdateContactRequest]) (*connect_go.Response[legalentities.UpdateContactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.UpdateContact is not implemented"))
}

func (UnimplementedServiceHandler) RemoveContacts(context.Context, *connect_go.Request[legalentities.RemoveContactsRequest]) (*connect_go.Response[legalentities.RemoveContactsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("legalentities.Service.RemoveContacts is not implemented"))
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ohlcvt/ohlcvt.proto

package ohlcvt

import (
	common "davensi.com/core/gen/common"
	datasources "davensi.com/core/gen/datasources"
	markets "davensi.com/core/gen/markets"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Backed by table 'ohlcvt'
type OHLCVT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // System Key: id is generated by the server or the database
	Source              *datasources.DataSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                // source + market + type + timestamp form the Human-Readable Key (unique identifier)
	Market              *markets.Market         `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`                                                // source + market + type + timestamp form the Human-Readable Key (unique identifier)
	PriceType           markets.PriceType       `protobuf:"varint,4,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType" json:"price_type,omitempty"` // source + market + type + timestamp form the Human-Readable Key (unique identifier)
	Timestamp           *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // source + market + type + timestamp form the Human-Readable Key (unique identifier)
	Open                *common.Decimal         `protobuf:"bytes,6,opt,name=open,proto3" json:"open,omitempty"`
	High                *common.Decimal         `protobuf:"bytes,7,opt,name=high,proto3" json:"high,omitempty"`
	Low                 *common.Decimal         `protobuf:"bytes,8,opt,name=low,proto3" json:"low,omitempty"`
	Close               *common.Decimal         `protobuf:"bytes,9,opt,name=close,proto3" json:"close,omitempty"`
	VolumeInQuantityUom *common.Decimal         `protobuf:"bytes,10,opt,name=volume_in_quantity_uom,json=volumeInQuantityUom,proto3" json:"volume_in_quantity_uom,omitempty"`
	VolumeInPriceUom    *common.Decimal         `protobuf:"bytes,11,opt,name=volume_in_price_uom,json=volumeInPriceUom,proto3" json:"volume_in_price_uom,omitempty"`
	Trades              uint32                  `protobuf:"varint,12,opt,name=trades,proto3" json:"trades,omitempty"`
	Status              common.Status           `protobuf:"varint,13,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
}

func (x *OHLCVT) Reset() {
	*x = OHLCVT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OHLCVT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OHLCVT) ProtoMessage() {}

func (x *OHLCVT) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OHLCVT.ProtoReflect.Descriptor instead.
func (*OHLCVT) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{0}
}

func (x *OHLCVT) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OHLCVT) GetSource() *datasources.DataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OHLCVT) GetMarket() *markets.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *OHLCVT) GetPriceType() markets.PriceType {
	if x != nil {
		return x.PriceType
	}
	return markets.PriceType(0)
}

func (x *OHLCVT) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OHLCVT) GetOpen() *common.Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *OHLCVT) GetHigh() *common.Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *OHLCVT) GetLow() *common.Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *OHLCVT) GetClose() *common.Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *OHLCVT) GetVolumeInQuantityUom() *common.Decimal {
	if x != nil {
		return x.VolumeInQuantityUom
	}
	return nil
}

func (x *OHLCVT) GetVolumeInPriceUom() *common.Decimal {
	if x != nil {
		return x.VolumeInPriceUom
	}
	return nil
}

func (x *OHLCVT) GetTrades() uint32 {
	if x != nil {
		return x.Trades
	}
	return 0
}

func (x *OHLCVT) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OHLCVT `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{1}
}

func (x *List) GetList() []*OHLCVT {
	if x != nil {
		return x.List
	}
	return nil
}

type OHLCVTKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *datasources.DataSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Market    *markets.Market         `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	PriceType markets.PriceType       `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType" json:"price_type,omitempty"`
	Timestamp *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OHLCVTKey) Reset() {
	*x = OHLCVTKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OHLCVTKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OHLCVTKey) ProtoMessage() {}

func (x *OHLCVTKey) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OHLCVTKey.ProtoReflect.Descriptor instead.
func (*OHLCVTKey) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{2}
}

func (x *OHLCVTKey) GetSource() *datasources.DataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OHLCVTKey) GetMarket() *markets.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *OHLCVTKey) GetPriceType() markets.PriceType {
	if x != nil {
		return x.PriceType
	}
	return markets.PriceType(0)
}

func (x *OHLCVTKey) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Select struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Select:
	//
	//	*Select_ById
	//	*Select_ByOhlcvtKey
	Select isSelect_Select `protobuf_oneof:"select"`
}

func (x *Select) Reset() {
	*x = Select{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Select) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Select) ProtoMessage() {}

func (x *Select) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Select.ProtoReflect.Descriptor instead.
func (*Select) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{3}
}

func (m *Select) GetSelect() isSelect_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *Select) GetById() string {
	if x, ok := x.GetSelect().(*Select_ById); ok {
		return x.ById
	}
	return ""
}

func (x *Select) GetByOhlcvtKey() *OHLCVTKey {
	if x, ok := x.GetSelect().(*Select_ByOhlcvtKey); ok {
		return x.ByOhlcvtKey
	}
	return nil
}

type isSelect_Select interface {
	isSelect_Select()
}

type Select_ById struct {
	ById string `protobuf:"bytes,1,opt,name=by_id,json=byId,proto3,oneof"`
}

type Select_ByOhlcvtKey struct {
	ByOhlcvtKey *OHLCVTKey `protobuf:"bytes,2,opt,name=by_ohlcvt_key,json=byOhlcvtKey,proto3,oneof"`
}

func (*Select_ById) isSelect_Select() {}

func (*Select_ByOhlcvtKey) isSelect_Select() {}

type SelectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Select `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectList) Reset() {
	*x = SelectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectList) ProtoMessage() {}

func (x *SelectList) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectList.ProtoReflect.Descriptor instead.
func (*SelectList) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{4}
}

func (x *SelectList) GetList() []*Select {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is generated by the server or the database
	Source              *datasources.Select    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Market              *markets.Select        `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	PriceType           markets.PriceType      `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType" json:"price_type,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open                *common.Decimal        `protobuf:"bytes,5,opt,name=open,proto3" json:"open,omitempty"`
	High                *common.Decimal        `protobuf:"bytes,6,opt,name=high,proto3" json:"high,omitempty"`
	Low                 *common.Decimal        `protobuf:"bytes,7,opt,name=low,proto3" json:"low,omitempty"`
	Close               *common.Decimal        `protobuf:"bytes,8,opt,name=close,proto3" json:"close,omitempty"`
	VolumeInQuantityUom *common.Decimal        `protobuf:"bytes,9,opt,name=volume_in_quantity_uom,json=volumeInQuantityUom,proto3" json:"volume_in_quantity_uom,omitempty"`
	VolumeInPriceUom    *common.Decimal        `protobuf:"bytes,10,opt,name=volume_in_price_uom,json=volumeInPriceUom,proto3" json:"volume_in_price_uom,omitempty"`
	Trades              uint32                 `protobuf:"varint,11,opt,name=trades,proto3" json:"trades,omitempty"`
	Status              common.Status          `protobuf:"varint,12,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRequest) GetSource() *datasources.Select {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateRequest) GetMarket() *markets.Select {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *CreateRequest) GetPriceType() markets.PriceType {
	if x != nil {
		return x.PriceType
	}
	return markets.PriceType(0)
}

func (x *CreateRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CreateRequest) GetOpen() *common.Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *CreateRequest) GetHigh() *common.Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *CreateRequest) GetLow() *common.Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *CreateRequest) GetClose() *common.Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *CreateRequest) GetVolumeInQuantityUom() *common.Decimal {
	if x != nil {
		return x.VolumeInQuantityUom
	}
	return nil
}

func (x *CreateRequest) GetVolumeInPriceUom() *common.Decimal {
	if x != nil {
		return x.VolumeInPriceUom
	}
	return nil
}

func (x *CreateRequest) GetTrades() uint32 {
	if x != nil {
		return x.Trades
	}
	return 0
}

func (x *CreateRequest) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CreateResponse_Error
	//	*CreateResponse_Ohlcvt
	Response isCreateResponse_Response `protobuf_oneof:"response"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{6}
}

func (m *CreateResponse) GetResponse() isCreateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CreateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*CreateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *CreateResponse) GetOhlcvt() *OHLCVT {
	if x, ok := x.GetResponse().(*CreateResponse_Ohlcvt); ok {
		return x.Ohlcvt
	}
	return nil
}

type isCreateResponse_Response interface {
	isCreateResponse_Response()
}

type CreateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type CreateResponse_Ohlcvt struct {
	Ohlcvt *OHLCVT `protobuf:"bytes,2,opt,name=ohlcvt,proto3,oneof"`
}

func (*CreateResponse_Error) isCreateResponse_Response() {}

func (*CreateResponse_Ohlcvt) isCreateResponse_Response() {}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select              *Select                `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
	Source              *datasources.Select    `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Market              *markets.Select        `protobuf:"bytes,3,opt,name=market,proto3,oneof" json:"market,omitempty"`
	PriceType           *markets.PriceType     `protobuf:"varint,4,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType,oneof" json:"price_type,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Open                *common.Decimal        `protobuf:"bytes,6,opt,name=open,proto3,oneof" json:"open,omitempty"`
	High                *common.Decimal        `protobuf:"bytes,7,opt,name=high,proto3,oneof" json:"high,omitempty"`
	Low                 *common.Decimal        `protobuf:"bytes,8,opt,name=low,proto3,oneof" json:"low,omitempty"`
	Close               *common.Decimal        `protobuf:"bytes,9,opt,name=close,proto3,oneof" json:"close,omitempty"`
	VolumeInQuantityUom *common.Decimal        `protobuf:"bytes,10,opt,name=volume_in_quantity_uom,json=volumeInQuantityUom,proto3,oneof" json:"volume_in_quantity_uom,omitempty"`
	VolumeInPriceUom    *common.Decimal        `protobuf:"bytes,11,opt,name=volume_in_price_uom,json=volumeInPriceUom,proto3,oneof" json:"volume_in_price_uom,omitempty"`
	Trades              *uint32                `protobuf:"varint,12,opt,name=trades,proto3,oneof" json:"trades,omitempty"`
	Status              *common.Status         `protobuf:"varint,13,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRequest) GetSelect() *Select {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *UpdateRequest) GetSource() *datasources.Select {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UpdateRequest) GetMarket() *markets.Select {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *UpdateRequest) GetPriceType() markets.PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return markets.PriceType(0)
}

func (x *UpdateRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UpdateRequest) GetOpen() *common.Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *UpdateRequest) GetHigh() *common.Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *UpdateRequest) GetLow() *common.Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *UpdateRequest) GetClose() *common.Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *UpdateRequest) GetVolumeInQuantityUom() *common.Decimal {
	if x != nil {
		return x.VolumeInQuantityUom
	}
	return nil
}

func (x *UpdateRequest) GetVolumeInPriceUom() *common.Decimal {
	if x != nil {
		return x.VolumeInPriceUom
	}
	return nil
}

func (x *UpdateRequest) GetTrades() uint32 {
	if x != nil && x.Trades != nil {
		return *x.Trades
	}
	return 0
}

func (x *UpdateRequest) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*UpdateResponse_Error
	//	*UpdateResponse_Ohlcvt
	Response isUpdateResponse_Response `protobuf_oneof:"response"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{8}
}

func (m *UpdateResponse) GetResponse() isUpdateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UpdateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*UpdateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *UpdateResponse) GetOhlcvt() *OHLCVT {
	if x, ok := x.GetResponse().(*UpdateResponse_Ohlcvt); ok {
		return x.Ohlcvt
	}
	return nil
}

type isUpdateResponse_Response interface {
	isUpdateResponse_Response()
}

type UpdateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type UpdateResponse_Ohlcvt struct {
	Ohlcvt *OHLCVT `protobuf:"bytes,2,opt,name=ohlcvt,proto3,oneof"`
}

func (*UpdateResponse_Error) isUpdateResponse_Response() {}

func (*UpdateResponse_Ohlcvt) isUpdateResponse_Response() {}

// GetRequest is expected to return a single value.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *Select `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{9}
}

func (x *GetRequest) GetSelect() *Select {
	if x != nil {
		return x.Select
	}
	return nil
}

// An error is returned if there is more than one record found.
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetResponse_Error
	//	*GetResponse_Ohlcvt
	Response isGetResponse_Response `protobuf_oneof:"response"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{10}
}

func (m *GetResponse) GetResponse() isGetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetOhlcvt() *OHLCVT {
	if x, ok := x.GetResponse().(*GetResponse_Ohlcvt); ok {
		return x.Ohlcvt
	}
	return nil
}

type isGetResponse_Response interface {
	isGetResponse_Response()
}

type GetResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetResponse_Ohlcvt struct {
	Ohlcvt *OHLCVT `protobuf:"bytes,2,opt,name=ohlcvt,proto3,oneof"`
}

func (*GetResponse_Error) isGetResponse_Response() {}

func (*GetResponse_Ohlcvt) isGetResponse_Response() {}

// GetList will use SQL 'LIKE' instead of '=' for string fields
type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source              *datasources.GetListRequest `protobuf:"bytes,1,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Market              *markets.GetListRequest     `protobuf:"bytes,2,opt,name=market,proto3,oneof" json:"market,omitempty"`
	Type                *markets.PriceTypeList      `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Timestamp           *common.TimestampValueList  `protobuf:"bytes,4,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Open                *common.DecimalValueList    `protobuf:"bytes,5,opt,name=open,proto3,oneof" json:"open,omitempty"`
	High                *common.DecimalValueList    `protobuf:"bytes,6,opt,name=high,proto3,oneof" json:"high,omitempty"`
	Low                 *common.DecimalValueList    `protobuf:"bytes,7,opt,name=low,proto3,oneof" json:"low,omitempty"`
	Close               *common.DecimalValueList    `protobuf:"bytes,8,opt,name=close,proto3,oneof" json:"close,omitempty"`
	VolumeInQuantityUom *common.DecimalValueList    `protobuf:"bytes,9,opt,name=volume_in_quantity_uom,json=volumeInQuantityUom,proto3,oneof" json:"volume_in_quantity_uom,omitempty"`
	VolumeInPriceUom    *common.DecimalValueList    `protobuf:"bytes,10,opt,name=volume_in_price_uom,json=volumeInPriceUom,proto3,oneof" json:"volume_in_price_uom,omitempty"`
	Trades              *common.UInt32ValueList     `protobuf:"bytes,11,opt,name=trades,proto3,oneof" json:"trades,omitempty"`
	Status              *common.StatusList          `protobuf:"bytes,12,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{11}
}

func (x *GetListRequest) GetSource() *datasources.GetListRequest {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GetListRequest) GetMarket() *markets.GetListRequest {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetListRequest) GetType() *markets.PriceTypeList {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetListRequest) GetTimestamp() *common.TimestampValueList {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetListRequest) GetOpen() *common.DecimalValueList {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *GetListRequest) GetHigh() *common.DecimalValueList {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *GetListRequest) GetLow() *common.DecimalValueList {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *GetListRequest) GetClose() *common.DecimalValueList {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *GetListRequest) GetVolumeInQuantityUom() *common.DecimalValueList {
	if x != nil {
		return x.VolumeInQuantityUom
	}
	return nil
}

func (x *GetListRequest) GetVolumeInPriceUom() *common.DecimalValueList {
	if x != nil {
		return x.VolumeInPriceUom
	}
	return nil
}

func (x *GetListRequest) GetTrades() *common.UInt32ValueList {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *GetListRequest) GetStatus() *common.StatusList {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetListResponse_Error
	//	*GetListResponse_Ohlcvt
	Response isGetListResponse_Response `protobuf_oneof:"response"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{12}
}

func (m *GetListResponse) GetResponse() isGetListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetListResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetListResponse) GetOhlcvt() *OHLCVT {
	if x, ok := x.GetResponse().(*GetListResponse_Ohlcvt); ok {
		return x.Ohlcvt
	}
	return nil
}

type isGetListResponse_Response interface {
	isGetListResponse_Response()
}

type GetListResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetListResponse_Ohlcvt struct {
	Ohlcvt *OHLCVT `protobuf:"bytes,2,opt,name=ohlcvt,proto3,oneof"`
}

func (*GetListResponse_Error) isGetListResponse_Response() {}

func (*GetListResponse_Ohlcvt) isGetListResponse_Response() {}

// A delete request is just an update request with status set to TERMINATED.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *Select `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRequest) GetSelect() *Select {
	if x != nil {
		return x.Select
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DeleteResponse_Error
	//	*DeleteResponse_Ohlcvt
	Response isDeleteResponse_Response `protobuf_oneof:"response"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{14}
}

func (m *DeleteResponse) GetResponse() isDeleteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DeleteResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*DeleteResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *DeleteResponse) GetOhlcvt() *OHLCVT {
	if x, ok := x.GetResponse().(*DeleteResponse_Ohlcvt); ok {
		return x.Ohlcvt
	}
	return nil
}

type isDeleteResponse_Response interface {
	isDeleteResponse_Response()
}

type DeleteResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type DeleteResponse_Ohlcvt struct {
	Ohlcvt *OHLCVT `protobuf:"bytes,2,opt,name=ohlcvt,proto3,oneof"`
}

func (*DeleteResponse_Error) isDeleteResponse_Response() {}

func (*DeleteResponse_Ohlcvt) isDeleteResponse_Response() {}

type TimeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp           *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open                *common.DecimalValueList `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	High                *common.DecimalValueList `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	Low                 *common.DecimalValueList `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	Close               *common.DecimalValueList `protobuf:"bytes,5,opt,name=close,proto3" json:"close,omitempty"`
	VolumeInQuantityUom *common.DecimalValueList `protobuf:"bytes,6,opt,name=volume_in_quantity_uom,json=volumeInQuantityUom,proto3" json:"volume_in_quantity_uom,omitempty"`
	VolumeInPriceUom    *common.DecimalValueList `protobuf:"bytes,7,opt,name=volume_in_price_uom,json=volumeInPriceUom,proto3" json:"volume_in_price_uom,omitempty"`
	Trades              *common.UInt32ValueList  `protobuf:"bytes,8,opt,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TimeValue) Reset() {
	*x = TimeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeValue) ProtoMessage() {}

func (x *TimeValue) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeValue.ProtoReflect.Descriptor instead.
func (*TimeValue) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{15}
}

func (x *TimeValue) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TimeValue) GetOpen() *common.DecimalValueList {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *TimeValue) GetHigh() *common.DecimalValueList {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *TimeValue) GetLow() *common.DecimalValueList {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *TimeValue) GetClose() *common.DecimalValueList {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *TimeValue) GetVolumeInQuantityUom() *common.DecimalValueList {
	if x != nil {
		return x.VolumeInQuantityUom
	}
	return nil
}

func (x *TimeValue) GetVolumeInPriceUom() *common.DecimalValueList {
	if x != nil {
		return x.VolumeInPriceUom
	}
	return nil
}

func (x *TimeValue) GetTrades() *common.UInt32ValueList {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TimeValue `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{16}
}

func (x *TimeSeries) GetList() []*TimeValue {
	if x != nil {
		return x.List
	}
	return nil
}

type GetTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *datasources.DataSource    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Market    *markets.Market            `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	PriceType markets.PriceType          `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType" json:"price_type,omitempty"`
	Timescale *common.Timescale          `protobuf:"varint,4,opt,name=timescale,proto3,enum=common.Timescale,oneof" json:"timescale,omitempty"` // Default: UNSPECIFIED
	Timestamp *common.TimestampValueList `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetTimeSeriesRequest) Reset() {
	*x = GetTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeSeriesRequest) ProtoMessage() {}

func (x *GetTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*GetTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{17}
}

func (x *GetTimeSeriesRequest) GetSource() *datasources.DataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GetTimeSeriesRequest) GetMarket() *markets.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetTimeSeriesRequest) GetPriceType() markets.PriceType {
	if x != nil {
		return x.PriceType
	}
	return markets.PriceType(0)
}

func (x *GetTimeSeriesRequest) GetTimescale() common.Timescale {
	if x != nil && x.Timescale != nil {
		return *x.Timescale
	}
	return common.Timescale(0)
}

func (x *GetTimeSeriesRequest) GetTimestamp() *common.TimestampValueList {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GetTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *datasources.Select `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Market    *markets.Select     `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	PriceType markets.PriceType   `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=markets.PriceType" json:"price_type,omitempty"`
	Timescale *common.Timescale   `protobuf:"varint,4,opt,name=timescale,proto3,enum=common.Timescale,oneof" json:"timescale,omitempty"` // Only when UNSPECIFIED
	Values    *TimeSeries         `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *GetTimeSeriesResponse) Reset() {
	*x = GetTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ohlcvt_ohlcvt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeSeriesResponse) ProtoMessage() {}

func (x *GetTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ohlcvt_ohlcvt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*GetTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_ohlcvt_ohlcvt_proto_rawDescGZIP(), []int{18}
}

func (x *GetTimeSeriesResponse) GetSource() *datasources.Select {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GetTimeSeriesResponse) GetMarket() *markets.Select {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *GetTimeSeriesResponse) GetPriceType() markets.PriceType {
	if x != nil {
		return x.PriceType
	}
	return markets.PriceType(0)
}

func (x *GetTimeSeriesResponse) GetTimescale() common.Timescale {
	if x != nil && x.Timescale != nil {
		return *x.Timescale
	}
	return common.Timescale(0)
}

func (x *GetTimeSeriesResponse) GetValues() *TimeSeries {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_ohlcvt_ohlcvt_proto protoreflect.FileDescriptor

var file_ohlcvt_ohlcvt_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2f, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x04, 0x0a, 0x06, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x21, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x25,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x13, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56,
	0x54, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x4f, 0x48, 0x4c, 0x43,
	0x56, 0x54, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x62, 0x0a, 0x06,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x62, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0d, 0x62, 0x79, 0x5f, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48,
	0x4c, 0x43, 0x56, 0x54, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x79, 0x4f, 0x68, 0x6c,
	0x63, 0x76, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x22, 0x30, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xac, 0x04, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x21, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x16, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x13, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6f,
	0x6d, 0x12, 0x3e, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x68,
	0x6c, 0x63, 0x76, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c,
	0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x68,
	0x6c, 0x63, 0x76, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb0, 0x06, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x01, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x04, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x07, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x16, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x75, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x13, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6f,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x09, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x0b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x77,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6f, 0x6d, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x6d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06,
	0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0x6a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x06, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x02, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x04, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x05, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x06, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x07, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x08, 0x52,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x09,
	0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0a,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x0b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6f, 0x6d,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x28, 0x0a, 0x06, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22,
	0x6d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x68, 0x6c, 0x63,
	0x76, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76,
	0x74, 0x2e, 0x4f, 0x48, 0x4c, 0x43, 0x56, 0x54, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x68, 0x6c, 0x63,
	0x76, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6,
	0x03, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x2a, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x2e,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6f, 0x6d, 0x12, 0x47, 0x0a,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x02, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x90, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x68, 0x6c, 0x63,
	0x76, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x6e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x68, 0x6c, 0x63, 0x76,
	0x74, 0x42, 0x0b, 0x4f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x1b, 0x64, 0x61, 0x76, 0x65, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0xa2, 0x02, 0x03,
	0x4f, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x4f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0xca, 0x02, 0x06, 0x4f,
	0x68, 0x6c, 0x63, 0x76, 0x74, 0xe2, 0x02, 0x12, 0x4f, 0x68, 0x6c, 0x63, 0x76, 0x74, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x4f, 0x68, 0x6c,
	0x63, 0x76, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ohlcvt_ohlcvt_proto_rawDescOnce sync.Once
	file_ohlcvt_ohlcvt_proto_rawDescData = file_ohlcvt_ohlcvt_proto_rawDesc
)

func file_ohlcvt_ohlcvt_proto_rawDescGZIP() []byte {
	file_ohlcvt_ohlcvt_proto_rawDescOnce.Do(func() {
		file_ohlcvt_ohlcvt_proto_rawDescData = protoimpl.X.CompressGZIP(file_ohlcvt_ohlcvt_proto_rawDescData)
	})
	return file_ohlcvt_ohlcvt_proto_rawDescData
}

var file_ohlcvt_ohlcvt_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ohlcvt_ohlcvt_proto_goTypes = []interface{}{
	(*OHLCVT)(nil),                     // 0: ohlcvt.OHLCVT
	(*List)(nil),                       // 1: ohlcvt.List
	(*OHLCVTKey)(nil),                  // 2: ohlcvt.OHLCVTKey
	(*Select)(nil),                     // 3: ohlcvt.Select
	(*SelectList)(nil),                 // 4: ohlcvt.SelectList
	(*CreateRequest)(nil),              // 5: ohlcvt.CreateRequest
	(*CreateResponse)(nil),             // 6: ohlcvt.CreateResponse
	(*UpdateRequest)(nil),              // 7: ohlcvt.UpdateRequest
	(*UpdateResponse)(nil),             // 8: ohlcvt.UpdateResponse
	(*GetRequest)(nil),                 // 9: ohlcvt.GetRequest
	(*GetResponse)(nil),                // 10: ohlcvt.GetResponse
	(*GetListRequest)(nil),             // 11: ohlcvt.GetListRequest
	(*GetListResponse)(nil),            // 12: ohlcvt.GetListResponse
	(*DeleteRequest)(nil),              // 13: ohlcvt.DeleteRequest
	(*DeleteResponse)(nil),             // 14: ohlcvt.DeleteResponse
	(*TimeValue)(nil),                  // 15: ohlcvt.TimeValue
	(*TimeSeries)(nil),                 // 16: ohlcvt.TimeSeries
	(*GetTimeSeriesRequest)(nil),       // 17: ohlcvt.GetTimeSeriesRequest
	(*GetTimeSeriesResponse)(nil),      // 18: ohlcvt.GetTimeSeriesResponse
	(*datasources.DataSource)(nil),     // 19: datasources.DataSource
	(*markets.Market)(nil),             // 20: markets.Market
	(markets.PriceType)(0),             // 21: markets.PriceType
	(*timestamppb.Timestamp)(nil),      // 22: google.protobuf.Timestamp
	(*common.Decimal)(nil),             // 23: common.Decimal
	(common.Status)(0),                 // 24: common.Status
	(*datasources.Select)(nil),         // 25: datasources.Select
	(*markets.Select)(nil),             // 26: markets.Select
	(*common.Error)(nil),               // 27: common.Error
	(*datasources.GetListRequest)(nil), // 28: datasources.GetListRequest
	(*markets.GetListRequest)(nil),     // 29: markets.GetListRequest
	(*markets.PriceTypeList)(nil),      // 30: markets.PriceTypeList
	(*common.TimestampValueList)(nil),  // 31: common.TimestampValueList
	(*common.DecimalValueList)(nil),    // 32: common.DecimalValueList
	(*common.UInt32ValueList)(nil),     // 33: common.UInt32ValueList
	(*common.StatusList)(nil),          // 34: common.StatusList
	(common.Timescale)(0),              // 35: common.Timescale
}
var file_ohlcvt_ohlcvt_proto_depIdxs = []int32{
	19, // 0: ohlcvt.OHLCVT.source:type_name -> datasources.DataSource
	20, // 1: ohlcvt.OHLCVT.market:type_name -> markets.Market
	21, // 2: ohlcvt.OHLCVT.price_type:type_name -> markets.PriceType
	22, // 3: ohlcvt.OHLCVT.timestamp:type_name -> google.protobuf.Timestamp
	23, // 4: ohlcvt.OHLCVT.open:type_name -> common.Decimal
	23, // 5: ohlcvt.OHLCVT.high:type_name -> common.Decimal
	23, // 6: ohlcvt.OHLCVT.low:type_name -> common.Decimal
	23, // 7: ohlcvt.OHLCVT.close:type_name -> common.Decimal
	23, // 8: ohlcvt.OHLCVT.volume_in_quantity_uom:type_name -> common.Decimal
	23, // 9: ohlcvt.OHLCVT.volume_in_price_uom:type_name -> common.Decimal
	24, // 10: ohlcvt.OHLCVT.status:type_name -> common.Status
	0,  // 11: ohlcvt.List.list:type_name -> ohlcvt.OHLCVT
	19, // 12: ohlcvt.OHLCVTKey.source:type_name -> datasources.DataSource
	20, // 13: ohlcvt.OHLCVTKey.market:type_name -> markets.Market
	21, // 14: ohlcvt.OHLCVTKey.price_type:type_name -> markets.PriceType
	22, // 15: ohlcvt.OHLCVTKey.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 16: ohlcvt.Select.by_ohlcvt_key:type_name -> ohlcvt.OHLCVTKey
	3,  // 17: ohlcvt.SelectList.list:type_name -> ohlcvt.Select
	25, // 18: ohlcvt.CreateRequest.source:type_name -> datasources.Select
	26, // 19: ohlcvt.CreateRequest.market:type_name -> markets.Select
	21, // 20: ohlcvt.CreateRequest.price_type:type_name -> markets.PriceType
	22, // 21: ohlcvt.CreateRequest.timestamp:type_name -> google.protobuf.Timestamp
	23, // 22: ohlcvt.CreateRequest.open:type_name -> common.Decimal
	23, // 23: ohlcvt.CreateRequest.high:type_name -> common.Decimal
	23, // 24: ohlcvt.CreateRequest.low:type_name -> common.Decimal
	23, // 25: ohlcvt.CreateRequest.close:type_name -> common.Decimal
	23, // 26: ohlcvt.CreateRequest.volume_in_quantity_uom:type_name -> common.Decimal
	23, // 27: ohlcvt.CreateRequest.volume_in_price_uom:type_name -> common.Decimal
	24, // 28: ohlcvt.CreateRequest.status:type_name -> common.Status
	27, // 29: ohlcvt.CreateResponse.error:type_name -> common.Error
	0,  // 30: ohlcvt.CreateResponse.ohlcvt:type_name -> ohlcvt.OHLCVT
	3,  // 31: ohlcvt.UpdateRequest.select:type_name -> ohlcvt.Select
	25, // 32: ohlcvt.UpdateRequest.source:type_name -> datasources.Select
	26, // 33: ohlcvt.UpdateRequest.market:type_name -> markets.Select
	21, // 34: ohlcvt.UpdateRequest.price_type:type_name -> markets.PriceType
	22, // 35: ohlcvt.UpdateRequest.timestamp:type_name -> google.protobuf.Timestamp
	23, // 36: ohlcvt.UpdateRequest.open:type_name -> common.Decimal
	23, // 37: ohlcvt.UpdateRequest.high:type_name -> common.Decimal
	23, // 38: ohlcvt.UpdateRequest.low:type_name -> common.Decimal
	23, // 39: ohlcvt.UpdateRequest.close:type_name -> common.Decimal
	23, // 40: ohlcvt.UpdateRequest.volume_in_quantity_uom:type_name -> common.Decimal
	23, // 41: ohlcvt.UpdateRequest.volume_in_price_uom:type_name -> common.Decimal
	24, // 42: ohlcvt.UpdateRequest.status:type_name -> common.Status
	27, // 43: ohlcvt.UpdateResponse.error:type_name -> common.Error
	0,  // 44: ohlcvt.UpdateResponse.ohlcvt:type_name -> ohlcvt.OHLCVT
	3,  // 45: ohlcvt.GetRequest.select:type_name -> ohlcvt.Select
	27, // 46: ohlcvt.GetResponse.error:type_name -> common.Error
	0,  // 47: ohlcvt.GetResponse.ohlcvt:type_name -> ohlcvt.OHLCVT
	28, // 48: ohlcvt.GetListRequest.source:type_name -> datasources.GetListRequest
	29, // 49: ohlcvt.GetListRequest.market:type_name -> markets.GetListRequest
	30, // 50: ohlcvt.GetListRequest.type:type_name -> markets.PriceTypeList
	31, // 51: ohlcvt.GetListRequest.timestamp:type_name -> common.TimestampValueList
	32, // 52: ohlcvt.GetListRequest.open:type_name -> common.DecimalValueList
	32, // 53: ohlcvt.GetListRequest.high:type_name -> common.DecimalValueList
	32, // 54: ohlcvt.GetListRequest.low:type_name -> common.DecimalValueList
	32, // 55: ohlcvt.GetListRequest.close:type_name -> common.DecimalValueList
	32, // 56: ohlcvt.GetListRequest.volume_in_quantity_uom:type_name -> common.DecimalValueList
	32, // 57: ohlcvt.GetListRequest.volume_in_price_uom:type_name -> common.DecimalValueList
	33, // 58: ohlcvt.GetListRequest.trades:type_name -> common.UInt32ValueList
	34, // 59: ohlcvt.GetListRequest.status:type_name -> common.StatusList
	27, // 60: ohlcvt.GetListResponse.error:type_name -> common.Error
	0,  // 61: ohlcvt.GetListResponse.ohlcvt:type_name -> ohlcvt.OHLCVT
	3,  // 62: ohlcvt.DeleteRequest.select:type_name -> ohlcvt.Select
	27, // 63: ohlcvt.DeleteResponse.error:type_name -> common.Error
	0,  // 64: ohlcvt.DeleteResponse.ohlcvt:type_name -> ohlcvt.OHLCVT
	22, // 65: ohlcvt.TimeValue.timestamp:type_name -> google.protobuf.Timestamp
	32, // 66: ohlcvt.TimeValue.open:type_name -> common.DecimalValueList
	32, // 67: ohlcvt.TimeValue.high:type_name -> common.DecimalValueList
	32, // 68: ohlcvt.TimeValue.low:type_name -> common.DecimalValueList
	32, // 69: ohlcvt.TimeValue.close:type_name -> common.DecimalValueList
	32, // 70: ohlcvt.TimeValue.volume_in_quantity_uom:type_name -> common.DecimalValueList
	32, // 71: ohlcvt.TimeValue.volume_in_price_uom:type_name -> common.DecimalValueList
	33, // 72: ohlcvt.TimeValue.trades:type_name -> common.UInt32ValueList
	15, // 73: ohlcvt.TimeSeries.list:type_name -> ohlcvt.TimeValue
	19, // 74: ohlcvt.GetTimeSeriesRequest.source:type_name -> datasources.DataSource
	20, // 75: ohlcvt.GetTimeSeriesRequest.market:type_name -> markets.Market
	21, // 76: ohlcvt.GetTimeSeriesRequest.price_type:type_name -> markets.PriceType
	35, // 77: ohlcvt.GetTimeSeriesRequest.timescale:type_name -> common.Timescale
	31, // 78: ohlcvt.GetTimeSeriesRequest.timestamp:type_name -> common.TimestampValueList
	25, // 79: ohlcvt.GetTimeSeriesResponse.source:type_name -> datasources.Select
	26, // 80: ohlcvt.GetTimeSeriesResponse.market:type_name -> markets.Select
	21, // 81: ohlcvt.GetTimeSeriesResponse.price_type:type_name -> markets.PriceType
	35, // 82: ohlcvt.GetTimeSeriesResponse.timescale:type_name -> common.Timescale
	16, // 83: ohlcvt.GetTimeSeriesResponse.values:type_name -> ohlcvt.TimeSeries
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_ohlcvt_ohlcvt_proto_init() }
func file_ohlcvt_ohlcvt_proto_init() {
	if File_ohlcvt_ohlcvt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ohlcvt_ohlcvt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OHLCVT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OHLCVTKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Select); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ohlcvt_ohlcvt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Select_ById)(nil),
		(*Select_ByOhlcvtKey)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CreateResponse_Error)(nil),
		(*CreateResponse_Ohlcvt)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_ohlcvt_ohlcvt_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UpdateResponse_Error)(nil),
		(*UpdateResponse_Ohlcvt)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetResponse_Error)(nil),
		(*GetResponse_Ohlcvt)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_ohlcvt_ohlcvt_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GetListResponse_Error)(nil),
		(*GetListResponse_Ohlcvt)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DeleteResponse_Error)(nil),
		(*DeleteResponse_Ohlcvt)(nil),
	}
	file_ohlcvt_ohlcvt_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_ohlcvt_ohlcvt_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ohlcvt_ohlcvt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ohlcvt_ohlcvt_proto_goTypes,
		DependencyIndexes: file_ohlcvt_ohlcvt_proto_depIdxs,
		MessageInfos:      file_ohlcvt_ohlcvt_proto_msgTypes,
	}.Build()
	File_ohlcvt_ohlcvt_proto = out.File
	file_ohlcvt_ohlcvt_proto_rawDesc = nil
	file_ohlcvt_ohlcvt_proto_goTypes = nil
	file_ohlcvt_ohlcvt_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: transactions/transactions.proto

package transactions

import (
	authgroups "davensi.com/core/gen/authgroups"
	common "davensi.com/core/gen/common"
	datasources "davensi.com/core/gen/datasources"
	ledgers "davensi.com/core/gen/ledgers"
	legalentities "davensi.com/core/gen/legalentities"
	orgs "davensi.com/core/gen/orgs"
	prices "davensi.com/core/gen/prices"
	recipients "davensi.com/core/gen/recipients"
	uoms "davensi.com/core/gen/uoms"
	users "davensi.com/core/gen/users"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_TYPE_UNSPECIFIED               Type = 0
	Type_TYPE_DEPOSIT                   Type = 1
	Type_TYPE_DEPOSIT_AIRDOP            Type = 2
	Type_TYPE_DEPOSIT_FORK              Type = 3
	Type_TYPE_DEPOSIT_GIFT              Type = 4
	Type_TYPE_DEPOSIT_MINING            Type = 5
	Type_TYPE_DEPOSIT_STAKING_REWARD    Type = 6
	Type_TYPE_DEPOSIT_INTEREST          Type = 7
	Type_TYPE_DEPOSIT_LOAN              Type = 8
	Type_TYPE_DEPOSIT_INCOME            Type = 9
	Type_TYPE_DEPOSIT_REWARD            Type = 10
	Type_TYPE_DEPOSIT_REALIZED_PROFIT   Type = 11
	Type_TYPE_DEPOSIT_TAX_REFUND        Type = 12
	Type_TYPE_WITHDRAWAL                Type = 16
	Type_TYPE_WITHDRAWAL_FEES           Type = 17
	Type_TYPE_WITHDRAWAL_GIFT           Type = 18
	Type_TYPE_WITHDRAWAL_LOST           Type = 19
	Type_TYPE_WITHDRAWAL_DONATION       Type = 20
	Type_TYPE_WITHDRAWAL_GOODS_SERVICES Type = 21
	Type_TYPE_WITHDRAWAL_OTHER_EXPENSES Type = 22
	Type_TYPE_WITHDRAWAL_INTEREST       Type = 23
	Type_TYPE_WITHDRAWAL_LOAN_FEES      Type = 24
	Type_TYPE_WITHDRAWAL_LOAN_REPAYMENT Type = 25
	Type_TYPE_WITHDRAWAL_LIQUIDATION    Type = 26
	Type_TYPE_WITHDRAWAL_REALIZED_LOSS  Type = 27
	Type_TYPE_WITHDRAWAL_TAX            Type = 28
	Type_TYPE_TRADE                     Type = 32
	Type_TYPE_TRADE_BUY                 Type = 33 // Buy Crypto with Fiat
	Type_TYPE_TRADE_SELL                Type = 34 // Sell Crypto for Fiat
	Type_TYPE_TRADE_FIAT                Type = 35 // Fiat to Fiat
	Type_TYPE_TRADE_CRYPTO              Type = 36 // Crypto to Crypto
	Type_TYPE_TRANSFER                  Type = 64 // Internal Transfer (between 2 recipients of the same user/legalentity)
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_DEPOSIT",
		2:  "TYPE_DEPOSIT_AIRDOP",
		3:  "TYPE_DEPOSIT_FORK",
		4:  "TYPE_DEPOSIT_GIFT",
		5:  "TYPE_DEPOSIT_MINING",
		6:  "TYPE_DEPOSIT_STAKING_REWARD",
		7:  "TYPE_DEPOSIT_INTEREST",
		8:  "TYPE_DEPOSIT_LOAN",
		9:  "TYPE_DEPOSIT_INCOME",
		10: "TYPE_DEPOSIT_REWARD",
		11: "TYPE_DEPOSIT_REALIZED_PROFIT",
		12: "TYPE_DEPOSIT_TAX_REFUND",
		16: "TYPE_WITHDRAWAL",
		17: "TYPE_WITHDRAWAL_FEES",
		18: "TYPE_WITHDRAWAL_GIFT",
		19: "TYPE_WITHDRAWAL_LOST",
		20: "TYPE_WITHDRAWAL_DONATION",
		21: "TYPE_WITHDRAWAL_GOODS_SERVICES",
		22: "TYPE_WITHDRAWAL_OTHER_EXPENSES",
		23: "TYPE_WITHDRAWAL_INTEREST",
		24: "TYPE_WITHDRAWAL_LOAN_FEES",
		25: "TYPE_WITHDRAWAL_LOAN_REPAYMENT",
		26: "TYPE_WITHDRAWAL_LIQUIDATION",
		27: "TYPE_WITHDRAWAL_REALIZED_LOSS",
		28: "TYPE_WITHDRAWAL_TAX",
		32: "TYPE_TRADE",
		33: "TYPE_TRADE_BUY",
		34: "TYPE_TRADE_SELL",
		35: "TYPE_TRADE_FIAT",
		36: "TYPE_TRADE_CRYPTO",
		64: "TYPE_TRANSFER",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":               0,
		"TYPE_DEPOSIT":                   1,
		"TYPE_DEPOSIT_AIRDOP":            2,
		"TYPE_DEPOSIT_FORK":              3,
		"TYPE_DEPOSIT_GIFT":              4,
		"TYPE_DEPOSIT_MINING":            5,
		"TYPE_DEPOSIT_STAKING_REWARD":    6,
		"TYPE_DEPOSIT_INTEREST":          7,
		"TYPE_DEPOSIT_LOAN":              8,
		"TYPE_DEPOSIT_INCOME":            9,
		"TYPE_DEPOSIT_REWARD":            10,
		"TYPE_DEPOSIT_REALIZED_PROFIT":   11,
		"TYPE_DEPOSIT_TAX_REFUND":        12,
		"TYPE_WITHDRAWAL":                16,
		"TYPE_WITHDRAWAL_FEES":           17,
		"TYPE_WITHDRAWAL_GIFT":           18,
		"TYPE_WITHDRAWAL_LOST":           19,
		"TYPE_WITHDRAWAL_DONATION":       20,
		"TYPE_WITHDRAWAL_GOODS_SERVICES": 21,
		"TYPE_WITHDRAWAL_OTHER_EXPENSES": 22,
		"TYPE_WITHDRAWAL_INTEREST":       23,
		"TYPE_WITHDRAWAL_LOAN_FEES":      24,
		"TYPE_WITHDRAWAL_LOAN_REPAYMENT": 25,
		"TYPE_WITHDRAWAL_LIQUIDATION":    26,
		"TYPE_WITHDRAWAL_REALIZED_LOSS":  27,
		"TYPE_WITHDRAWAL_TAX":            28,
		"TYPE_TRADE":                     32,
		"TYPE_TRADE_BUY":                 33,
		"TYPE_TRADE_SELL":                34,
		"TYPE_TRADE_FIAT":                35,
		"TYPE_TRADE_CRYPTO":              36,
		"TYPE_TRANSFER":                  64,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_transactions_transactions_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_transactions_transactions_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{0}
}

type ItemType int32

const (
	ItemType_ITEM_TYPE_UNSPECIFIED ItemType = 0
	ItemType_ITEM_TYPE_DEBIT       ItemType = 1
	ItemType_ITEM_TYPE_CREDIT      ItemType = 2
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ITEM_TYPE_UNSPECIFIED",
		1: "ITEM_TYPE_DEBIT",
		2: "ITEM_TYPE_CREDIT",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_UNSPECIFIED": 0,
		"ITEM_TYPE_DEBIT":       1,
		"ITEM_TYPE_CREDIT":      2,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_transactions_transactions_proto_enumTypes[1].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_transactions_transactions_proto_enumTypes[1]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{1}
}

type TypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []Type `protobuf:"varint,1,rep,packed,name=list,proto3,enum=transactions.Type" json:"list,omitempty"`
}

func (x *TypeList) Reset() {
	*x = TypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeList) ProtoMessage() {}

func (x *TypeList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeList.ProtoReflect.Descriptor instead.
func (*TypeList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{0}
}

func (x *TypeList) GetList() []Type {
	if x != nil {
		return x.List
	}
	return nil
}

// Backed by table 'transactions' + 'transactionitems' + 'transactionitems_alt'
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // System Key: id is generated by the server or the database
	Type               Type                       `protobuf:"varint,2,opt,name=type,proto3,enum=transactions.Type" json:"type,omitempty"`
	Source             *datasources.DataSource    `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Legalentity        *legalentities.LegalEntity `protobuf:"bytes,4,opt,name=legalentity,proto3" json:"legalentity,omitempty"`
	Ledger             *ledgers.Ledger            `protobuf:"bytes,5,opt,name=ledger,proto3" json:"ledger,omitempty"`
	PostingDate        *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=posting_date,json=postingDate,proto3" json:"posting_date,omitempty"`
	AccountingPeriod   string                     `protobuf:"bytes,7,opt,name=accounting_period,json=accountingPeriod,proto3" json:"accounting_period,omitempty"` // Format: YYYYMM (e.g. 202307 for July 2023)
	AccountingDocument string                     `protobuf:"bytes,8,opt,name=accounting_document,json=accountingDocument,proto3" json:"accounting_document,omitempty"`
	Amount             *common.Decimal            `protobuf:"bytes,9,opt,name=amount,proto3" json:"amount,omitempty"`      // Total transaction amount in Transaction Currency
	Currency           *uoms.UoM                  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"` // Transaction Currency
	LegalCurrency1     *Conversion                `protobuf:"bytes,11,opt,name=legal_currency1,json=legalCurrency1,proto3,oneof" json:"legal_currency1,omitempty"`
	LegalCurrency2     *Conversion                `protobuf:"bytes,12,opt,name=legal_currency2,json=legalCurrency2,proto3,oneof" json:"legal_currency2,omitempty"`
	LegalCurrency3     *Conversion                `protobuf:"bytes,13,opt,name=legal_currency3,json=legalCurrency3,proto3,oneof" json:"legal_currency3,omitempty"`
	AltConversions     *AltConversionList         `protobuf:"bytes,14,opt,name=alt_conversions,json=altConversions,proto3,oneof" json:"alt_conversions,omitempty"`
	Reference          *string                    `protobuf:"bytes,15,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	Purpose            *string                    `protobuf:"bytes,16,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	User               *users.User                `protobuf:"bytes,17,opt,name=user,proto3" json:"user,omitempty"`
	Authgroup          *authgroups.AuthGroup      `protobuf:"bytes,18,opt,name=authgroup,proto3" json:"authgroup,omitempty"`
	Org                *orgs.Org                  `protobuf:"bytes,19,opt,name=org,proto3,oneof" json:"org,omitempty"`
	Status             common.Status              `protobuf:"varint,20,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Items              *ItemList                  `protobuf:"bytes,21,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *Transaction) GetSource() *datasources.DataSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Transaction) GetLegalentity() *legalentities.LegalEntity {
	if x != nil {
		return x.Legalentity
	}
	return nil
}

func (x *Transaction) GetLedger() *ledgers.Ledger {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *Transaction) GetPostingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PostingDate
	}
	return nil
}

func (x *Transaction) GetAccountingPeriod() string {
	if x != nil {
		return x.AccountingPeriod
	}
	return ""
}

func (x *Transaction) GetAccountingDocument() string {
	if x != nil {
		return x.AccountingDocument
	}
	return ""
}

func (x *Transaction) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Transaction) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Transaction) GetLegalCurrency1() *Conversion {
	if x != nil {
		return x.LegalCurrency1
	}
	return nil
}

func (x *Transaction) GetLegalCurrency2() *Conversion {
	if x != nil {
		return x.LegalCurrency2
	}
	return nil
}

func (x *Transaction) GetLegalCurrency3() *Conversion {
	if x != nil {
		return x.LegalCurrency3
	}
	return nil
}

func (x *Transaction) GetAltConversions() *AltConversionList {
	if x != nil {
		return x.AltConversions
	}
	return nil
}

func (x *Transaction) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *Transaction) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *Transaction) GetUser() *users.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Transaction) GetAuthgroup() *authgroups.AuthGroup {
	if x != nil {
		return x.Authgroup
	}
	return nil
}

func (x *Transaction) GetOrg() *orgs.Org {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *Transaction) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *Transaction) GetItems() *ItemList {
	if x != nil {
		return x.Items
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Transaction `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{2}
}

func (x *List) GetList() []*Transaction {
	if x != nil {
		return x.List
	}
	return nil
}

type SelectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectList) Reset() {
	*x = SelectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectList) ProtoMessage() {}

func (x *SelectList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectList.ProtoReflect.Descriptor instead.
func (*SelectList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{3}
}

func (x *SelectList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type Conversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   *common.Decimal `protobuf:"bytes,1,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency *uoms.UoM       `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Rate     *common.Decimal `protobuf:"bytes,3,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	Price    *prices.Price   `protobuf:"bytes,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
}

func (x *Conversion) Reset() {
	*x = Conversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversion) ProtoMessage() {}

func (x *Conversion) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversion.ProtoReflect.Descriptor instead.
func (*Conversion) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{4}
}

func (x *Conversion) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Conversion) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Conversion) GetRate() *common.Decimal {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *Conversion) GetPrice() *prices.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

type SelectConversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   *common.DecimalValueList `protobuf:"bytes,1,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency *uoms.GetListRequest     `protobuf:"bytes,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Rate     *common.DecimalValueList `protobuf:"bytes,3,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	Price    *prices.GetListRequest   `protobuf:"bytes,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
}

func (x *SelectConversion) Reset() {
	*x = SelectConversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectConversion) ProtoMessage() {}

func (x *SelectConversion) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectConversion.ProtoReflect.Descriptor instead.
func (*SelectConversion) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{5}
}

func (x *SelectConversion) GetAmount() *common.DecimalValueList {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SelectConversion) GetCurrency() *uoms.GetListRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *SelectConversion) GetRate() *common.DecimalValueList {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *SelectConversion) GetPrice() *prices.GetListRequest {
	if x != nil {
		return x.Price
	}
	return nil
}

type AltConversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alt      uint32          `protobuf:"varint,1,opt,name=alt,proto3" json:"alt,omitempty"`
	Amount   *common.Decimal `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency *uoms.UoM       `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Rate     *common.Decimal `protobuf:"bytes,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Price    *prices.Price   `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	Status   common.Status   `protobuf:"varint,6,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
}

func (x *AltConversion) Reset() {
	*x = AltConversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltConversion) ProtoMessage() {}

func (x *AltConversion) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltConversion.ProtoReflect.Descriptor instead.
func (*AltConversion) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{6}
}

func (x *AltConversion) GetAlt() uint32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *AltConversion) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AltConversion) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *AltConversion) GetRate() *common.Decimal {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *AltConversion) GetPrice() *prices.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *AltConversion) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type AltConversionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AltConversion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AltConversionList) Reset() {
	*x = AltConversionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltConversionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltConversionList) ProtoMessage() {}

func (x *AltConversionList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltConversionList.ProtoReflect.Descriptor instead.
func (*AltConversionList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{7}
}

func (x *AltConversionList) GetList() []*AltConversion {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is generated by the server or the database
	Type               Type                   `protobuf:"varint,1,opt,name=type,proto3,enum=transactions.Type" json:"type,omitempty"`
	Source             *datasources.Select    `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Legalentity        *legalentities.Select  `protobuf:"bytes,3,opt,name=legalentity,proto3" json:"legalentity,omitempty"`
	Ledger             *ledgers.Select        `protobuf:"bytes,4,opt,name=ledger,proto3" json:"ledger,omitempty"`
	PostingDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=posting_date,json=postingDate,proto3,oneof" json:"posting_date,omitempty"`                      // Default: current timestamp
	AccountingPeriod   *string                `protobuf:"bytes,6,opt,name=accounting_period,json=accountingPeriod,proto3,oneof" json:"accounting_period,omitempty"`       // Default: derived from posting_date
	AccountingDocument *string                `protobuf:"bytes,7,opt,name=accounting_document,json=accountingDocument,proto3,oneof" json:"accounting_document,omitempty"` // Default: continugous numbering per legalentity/ledger
	Amount             *common.Decimal        `protobuf:"bytes,8,opt,name=amount,proto3,oneof" json:"amount,omitempty"`                                                   // Normally should be calculated automatically from items
	Currency           *uoms.Select           `protobuf:"bytes,9,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Reference          *string                `protobuf:"bytes,10,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	Purpose            *string                `protobuf:"bytes,11,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	User               *users.Select          `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	Authgroup          *authgroups.Select     `protobuf:"bytes,13,opt,name=authgroup,proto3,oneof" json:"authgroup,omitempty"` // Default: derived from user_id
	Org                *orgs.Select           `protobuf:"bytes,14,opt,name=org,proto3,oneof" json:"org,omitempty"`
	Status             *common.Status         `protobuf:"varint,15,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"` // Default: 1
	Items              *CreateItemList        `protobuf:"bytes,16,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *CreateRequest) GetSource() *datasources.Select {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateRequest) GetLegalentity() *legalentities.Select {
	if x != nil {
		return x.Legalentity
	}
	return nil
}

func (x *CreateRequest) GetLedger() *ledgers.Select {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *CreateRequest) GetPostingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PostingDate
	}
	return nil
}

func (x *CreateRequest) GetAccountingPeriod() string {
	if x != nil && x.AccountingPeriod != nil {
		return *x.AccountingPeriod
	}
	return ""
}

func (x *CreateRequest) GetAccountingDocument() string {
	if x != nil && x.AccountingDocument != nil {
		return *x.AccountingDocument
	}
	return ""
}

func (x *CreateRequest) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CreateRequest) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CreateRequest) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *CreateRequest) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *CreateRequest) GetUser() *users.Select {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateRequest) GetAuthgroup() *authgroups.Select {
	if x != nil {
		return x.Authgroup
	}
	return nil
}

func (x *CreateRequest) GetOrg() *orgs.Select {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *CreateRequest) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

func (x *CreateRequest) GetItems() *CreateItemList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CreateResponse_Error
	//	*CreateResponse_Transaction
	Response isCreateResponse_Response `protobuf_oneof:"response"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{9}
}

func (m *CreateResponse) GetResponse() isCreateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CreateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*CreateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *CreateResponse) GetTransaction() *Transaction {
	if x, ok := x.GetResponse().(*CreateResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isCreateResponse_Response interface {
	isCreateResponse_Response()
}

type CreateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type CreateResponse_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*CreateResponse_Error) isCreateResponse_Response() {}

func (*CreateResponse_Transaction) isCreateResponse_Response() {}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type               *Type                  `protobuf:"varint,2,opt,name=type,proto3,enum=transactions.Type,oneof" json:"type,omitempty"`
	Source             *datasources.Select    `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Legalentity        *legalentities.Select  `protobuf:"bytes,4,opt,name=legalentity,proto3,oneof" json:"legalentity,omitempty"`
	Ledger             *ledgers.Select        `protobuf:"bytes,5,opt,name=ledger,proto3,oneof" json:"ledger,omitempty"`
	PostingDate        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=posting_date,json=postingDate,proto3,oneof" json:"posting_date,omitempty"`
	AccountingPeriod   *string                `protobuf:"bytes,7,opt,name=accounting_period,json=accountingPeriod,proto3,oneof" json:"accounting_period,omitempty"`
	AccountingDocument *string                `protobuf:"bytes,8,opt,name=accounting_document,json=accountingDocument,proto3,oneof" json:"accounting_document,omitempty"`
	Amount             *common.Decimal        `protobuf:"bytes,9,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency           *uoms.Select           `protobuf:"bytes,10,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Reference          *string                `protobuf:"bytes,11,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	Purpose            *string                `protobuf:"bytes,12,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	User               *users.Select          `protobuf:"bytes,13,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Authgroup          *authgroups.Select     `protobuf:"bytes,14,opt,name=authgroup,proto3,oneof" json:"authgroup,omitempty"` // Default: derived from user
	Org                *orgs.Select           `protobuf:"bytes,15,opt,name=org,proto3,oneof" json:"org,omitempty"`
	Status             *common.Status         `protobuf:"varint,16,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
	Items              *UpdateItemList        `protobuf:"bytes,17,opt,name=items,proto3,oneof" json:"items,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetType() Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *UpdateRequest) GetSource() *datasources.Select {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UpdateRequest) GetLegalentity() *legalentities.Select {
	if x != nil {
		return x.Legalentity
	}
	return nil
}

func (x *UpdateRequest) GetLedger() *ledgers.Select {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *UpdateRequest) GetPostingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PostingDate
	}
	return nil
}

func (x *UpdateRequest) GetAccountingPeriod() string {
	if x != nil && x.AccountingPeriod != nil {
		return *x.AccountingPeriod
	}
	return ""
}

func (x *UpdateRequest) GetAccountingDocument() string {
	if x != nil && x.AccountingDocument != nil {
		return *x.AccountingDocument
	}
	return ""
}

func (x *UpdateRequest) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UpdateRequest) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *UpdateRequest) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *UpdateRequest) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *UpdateRequest) GetUser() *users.Select {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateRequest) GetAuthgroup() *authgroups.Select {
	if x != nil {
		return x.Authgroup
	}
	return nil
}

func (x *UpdateRequest) GetOrg() *orgs.Select {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *UpdateRequest) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

func (x *UpdateRequest) GetItems() *UpdateItemList {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*UpdateResponse_Error
	//	*UpdateResponse_Transaction
	Response isUpdateResponse_Response `protobuf_oneof:"response"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{11}
}

func (m *UpdateResponse) GetResponse() isUpdateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UpdateResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*UpdateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *UpdateResponse) GetTransaction() *Transaction {
	if x, ok := x.GetResponse().(*UpdateResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isUpdateResponse_Response interface {
	isUpdateResponse_Response()
}

type UpdateResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type UpdateResponse_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*UpdateResponse_Error) isUpdateResponse_Response() {}

func (*UpdateResponse_Transaction) isUpdateResponse_Response() {}

// GetRequest is expected to return a single value.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{12}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// An error is returned if there is more than one record found.
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetResponse_Error
	//	*GetResponse_Transaction
	Response isGetResponse_Response `protobuf_oneof:"response"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{13}
}

func (m *GetResponse) GetResponse() isGetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetTransaction() *Transaction {
	if x, ok := x.GetResponse().(*GetResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isGetResponse_Response interface {
	isGetResponse_Response()
}

type GetResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetResponse_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*GetResponse_Error) isGetResponse_Response() {}

func (*GetResponse_Transaction) isGetResponse_Response() {}

// GetList will use SQL 'LIKE' instead of '=' for string fields
type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               *TypeList                     `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Source             *datasources.GetListRequest   `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Legalentity        *legalentities.GetListRequest `protobuf:"bytes,3,opt,name=legalentity,proto3,oneof" json:"legalentity,omitempty"`
	Ledger             *ledgers.GetListRequest       `protobuf:"bytes,4,opt,name=ledger,proto3,oneof" json:"ledger,omitempty"`
	PostingDate        *timestamppb.Timestamp        `protobuf:"bytes,5,opt,name=posting_date,json=postingDate,proto3,oneof" json:"posting_date,omitempty"`
	AccountingPeriod   *string                       `protobuf:"bytes,6,opt,name=accounting_period,json=accountingPeriod,proto3,oneof" json:"accounting_period,omitempty"`
	AccountingDocument *string                       `protobuf:"bytes,7,opt,name=accounting_document,json=accountingDocument,proto3,oneof" json:"accounting_document,omitempty"`
	Amount             *common.DecimalValueList      `protobuf:"bytes,8,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency           *uoms.GetListRequest          `protobuf:"bytes,9,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	LegalCurrency1     *SelectConversion             `protobuf:"bytes,10,opt,name=legal_currency1,json=legalCurrency1,proto3,oneof" json:"legal_currency1,omitempty"`
	LegalCurrency2     *SelectConversion             `protobuf:"bytes,11,opt,name=legal_currency2,json=legalCurrency2,proto3,oneof" json:"legal_currency2,omitempty"`
	LegalCurrency3     *SelectConversion             `protobuf:"bytes,12,opt,name=legal_currency3,json=legalCurrency3,proto3,oneof" json:"legal_currency3,omitempty"`
	Reference          *string                       `protobuf:"bytes,13,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	Purpose            *string                       `protobuf:"bytes,14,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	User               *users.GetListRequest         `protobuf:"bytes,15,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Authgroup          *authgroups.GetListRequest    `protobuf:"bytes,16,opt,name=authgroup,proto3,oneof" json:"authgroup,omitempty"` // Default: derived from user
	Org                *orgs.GetListRequest          `protobuf:"bytes,17,opt,name=org,proto3,oneof" json:"org,omitempty"`
	Status             *common.StatusList            `protobuf:"bytes,18,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Items              *GetItemList                  `protobuf:"bytes,19,opt,name=items,proto3,oneof" json:"items,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{14}
}

func (x *GetListRequest) GetType() *TypeList {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetListRequest) GetSource() *datasources.GetListRequest {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *GetListRequest) GetLegalentity() *legalentities.GetListRequest {
	if x != nil {
		return x.Legalentity
	}
	return nil
}

func (x *GetListRequest) GetLedger() *ledgers.GetListRequest {
	if x != nil {
		return x.Ledger
	}
	return nil
}

func (x *GetListRequest) GetPostingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PostingDate
	}
	return nil
}

func (x *GetListRequest) GetAccountingPeriod() string {
	if x != nil && x.AccountingPeriod != nil {
		return *x.AccountingPeriod
	}
	return ""
}

func (x *GetListRequest) GetAccountingDocument() string {
	if x != nil && x.AccountingDocument != nil {
		return *x.AccountingDocument
	}
	return ""
}

func (x *GetListRequest) GetAmount() *common.DecimalValueList {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *GetListRequest) GetCurrency() *uoms.GetListRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *GetListRequest) GetLegalCurrency1() *SelectConversion {
	if x != nil {
		return x.LegalCurrency1
	}
	return nil
}

func (x *GetListRequest) GetLegalCurrency2() *SelectConversion {
	if x != nil {
		return x.LegalCurrency2
	}
	return nil
}

func (x *GetListRequest) GetLegalCurrency3() *SelectConversion {
	if x != nil {
		return x.LegalCurrency3
	}
	return nil
}

func (x *GetListRequest) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *GetListRequest) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *GetListRequest) GetUser() *users.GetListRequest {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetListRequest) GetAuthgroup() *authgroups.GetListRequest {
	if x != nil {
		return x.Authgroup
	}
	return nil
}

func (x *GetListRequest) GetOrg() *orgs.GetListRequest {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *GetListRequest) GetStatus() *common.StatusList {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetListRequest) GetItems() *GetItemList {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetListResponse_Error
	//	*GetListResponse_Transaction
	Response isGetListResponse_Response `protobuf_oneof:"response"`
}

func (x *GetListResponse) Reset() {
	*x = GetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListResponse) ProtoMessage() {}

func (x *GetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListResponse.ProtoReflect.Descriptor instead.
func (*GetListResponse) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{15}
}

func (m *GetListResponse) GetResponse() isGetListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetListResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*GetListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetListResponse) GetTransaction() *Transaction {
	if x, ok := x.GetResponse().(*GetListResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isGetListResponse_Response interface {
	isGetListResponse_Response()
}

type GetListResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetListResponse_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*GetListResponse_Error) isGetListResponse_Response() {}

func (*GetListResponse_Transaction) isGetListResponse_Response() {}

// A delete request is just an update request with status set to TERMINATED.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DeleteResponse_Error
	//	*DeleteResponse_Transaction
	Response isDeleteResponse_Response `protobuf_oneof:"response"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{17}
}

func (m *DeleteResponse) GetResponse() isDeleteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DeleteResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*DeleteResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *DeleteResponse) GetTransaction() *Transaction {
	if x, ok := x.GetResponse().(*DeleteResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isDeleteResponse_Response interface {
	isDeleteResponse_Response()
}

type DeleteResponse_Error struct {
	Error *common.Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type DeleteResponse_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*DeleteResponse_Error) isDeleteResponse_Response() {}

func (*DeleteResponse_Transaction) isDeleteResponse_Response() {}

type ItemTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []ItemType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=transactions.ItemType" json:"list,omitempty"`
}

func (x *ItemTypeList) Reset() {
	*x = ItemTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemTypeList) ProtoMessage() {}

func (x *ItemTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemTypeList.ProtoReflect.Descriptor instead.
func (*ItemTypeList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{18}
}

func (x *ItemTypeList) GetList() []ItemType {
	if x != nil {
		return x.List
	}
	return nil
}

type TransactionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNo              uint32                     `protobuf:"varint,1,opt,name=item_no,json=itemNo,proto3" json:"item_no,omitempty"` // transaction_id + item_no form the Human-Readable Key
	Type                ItemType                   `protobuf:"varint,2,opt,name=type,proto3,enum=transactions.ItemType" json:"type,omitempty"`
	Recipient           *recipients.Recipient      `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	FinancialAccount    string                     `protobuf:"bytes,4,opt,name=financial_account,json=financialAccount,proto3" json:"financial_account,omitempty"`
	Amount              *common.Decimal            `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`     // Transaction Item amount in Transaction Currency
	Currency            *uoms.UoM                  `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"` // Transaction Currency
	LegalCurrency1      *Conversion                `protobuf:"bytes,7,opt,name=legal_currency1,json=legalCurrency1,proto3,oneof" json:"legal_currency1,omitempty"`
	LegalCurrency2      *Conversion                `protobuf:"bytes,8,opt,name=legal_currency2,json=legalCurrency2,proto3,oneof" json:"legal_currency2,omitempty"`
	LegalCurrency3      *Conversion                `protobuf:"bytes,9,opt,name=legal_currency3,json=legalCurrency3,proto3,oneof" json:"legal_currency3,omitempty"`
	AltConversions      *AltConversionList         `protobuf:"bytes,10,opt,name=alt_conversions,json=altConversions,proto3,oneof" json:"alt_conversions,omitempty"`
	Reference           *string                    `protobuf:"bytes,11,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	LegalentityOffset   *legalentities.LegalEntity `protobuf:"bytes,12,opt,name=legalentity_offset,json=legalentityOffset,proto3,oneof" json:"legalentity_offset,omitempty"`
	UserOffset          *users.GetListRequest      `protobuf:"bytes,13,opt,name=user_offset,json=userOffset,proto3,oneof" json:"user_offset,omitempty"`
	OrgOffset           *orgs.GetListRequest       `protobuf:"bytes,14,opt,name=org_offset,json=orgOffset,proto3,oneof" json:"org_offset,omitempty"`
	RecipientOffset     *recipients.Recipient      `protobuf:"bytes,15,opt,name=recipient_offset,json=recipientOffset,proto3,oneof" json:"recipient_offset,omitempty"`
	TransactionIdOffset *string                    `protobuf:"bytes,16,opt,name=transaction_id_offset,json=transactionIdOffset,proto3,oneof" json:"transaction_id_offset,omitempty"`
	ItemNoOffset        *uint32                    `protobuf:"varint,17,opt,name=item_no_offset,json=itemNoOffset,proto3,oneof" json:"item_no_offset,omitempty"`
	Status              common.Status              `protobuf:"varint,18,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
}

func (x *TransactionItem) Reset() {
	*x = TransactionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionItem) ProtoMessage() {}

func (x *TransactionItem) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionItem.ProtoReflect.Descriptor instead.
func (*TransactionItem) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{19}
}

func (x *TransactionItem) GetItemNo() uint32 {
	if x != nil {
		return x.ItemNo
	}
	return 0
}

func (x *TransactionItem) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (x *TransactionItem) GetRecipient() *recipients.Recipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *TransactionItem) GetFinancialAccount() string {
	if x != nil {
		return x.FinancialAccount
	}
	return ""
}

func (x *TransactionItem) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransactionItem) GetCurrency() *uoms.UoM {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TransactionItem) GetLegalCurrency1() *Conversion {
	if x != nil {
		return x.LegalCurrency1
	}
	return nil
}

func (x *TransactionItem) GetLegalCurrency2() *Conversion {
	if x != nil {
		return x.LegalCurrency2
	}
	return nil
}

func (x *TransactionItem) GetLegalCurrency3() *Conversion {
	if x != nil {
		return x.LegalCurrency3
	}
	return nil
}

func (x *TransactionItem) GetAltConversions() *AltConversionList {
	if x != nil {
		return x.AltConversions
	}
	return nil
}

func (x *TransactionItem) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *TransactionItem) GetLegalentityOffset() *legalentities.LegalEntity {
	if x != nil {
		return x.LegalentityOffset
	}
	return nil
}

func (x *TransactionItem) GetUserOffset() *users.GetListRequest {
	if x != nil {
		return x.UserOffset
	}
	return nil
}

func (x *TransactionItem) GetOrgOffset() *orgs.GetListRequest {
	if x != nil {
		return x.OrgOffset
	}
	return nil
}

func (x *TransactionItem) GetRecipientOffset() *recipients.Recipient {
	if x != nil {
		return x.RecipientOffset
	}
	return nil
}

func (x *TransactionItem) GetTransactionIdOffset() string {
	if x != nil && x.TransactionIdOffset != nil {
		return *x.TransactionIdOffset
	}
	return ""
}

func (x *TransactionItem) GetItemNoOffset() uint32 {
	if x != nil && x.ItemNoOffset != nil {
		return *x.ItemNoOffset
	}
	return 0
}

func (x *TransactionItem) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type ItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TransactionItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ItemList) Reset() {
	*x = ItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemList) ProtoMessage() {}

func (x *ItemList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemList.ProtoReflect.Descriptor instead.
func (*ItemList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{20}
}

func (x *ItemList) GetList() []*TransactionItem {
	if x != nil {
		return x.List
	}
	return nil
}

type SelectItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []uint32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectItemList) Reset() {
	*x = SelectItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectItemList) ProtoMessage() {}

func (x *SelectItemList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectItemList.ProtoReflect.Descriptor instead.
func (*SelectItemList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{21}
}

func (x *SelectItemList) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNo              *uint32               `protobuf:"varint,1,opt,name=item_no,json=itemNo,proto3,oneof" json:"item_no,omitempty"`    // Default: transaction's highest item_no + 10
	Type                ItemType              `protobuf:"varint,2,opt,name=type,proto3,enum=transactions.ItemType" json:"type,omitempty"` // Default: UNSPECIFIED
	Recipient           *recipients.Select    `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	FinancialAccount    *string               `protobuf:"bytes,4,opt,name=financial_account,json=financialAccount,proto3,oneof" json:"financial_account,omitempty"`
	Amount              *common.Decimal       `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`     // Transaction Item amount in Transaction Currency
	Currency            *uoms.Select          `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"` // Transaction Currency
	Reference           *string               `protobuf:"bytes,7,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	LegalentityOffset   *legalentities.Select `protobuf:"bytes,8,opt,name=legalentity_offset,json=legalentityOffset,proto3,oneof" json:"legalentity_offset,omitempty"`
	UserOffset          *users.Select         `protobuf:"bytes,9,opt,name=user_offset,json=userOffset,proto3,oneof" json:"user_offset,omitempty"`
	OrgOffset           *orgs.Select          `protobuf:"bytes,10,opt,name=org_offset,json=orgOffset,proto3,oneof" json:"org_offset,omitempty"`
	RecipientOffset     *recipients.Select    `protobuf:"bytes,11,opt,name=recipient_offset,json=recipientOffset,proto3,oneof" json:"recipient_offset,omitempty"`
	TransactionIdOffset *string               `protobuf:"bytes,12,opt,name=transaction_id_offset,json=transactionIdOffset,proto3,oneof" json:"transaction_id_offset,omitempty"`
	ItemNoOffset        *uint32               `protobuf:"varint,13,opt,name=item_no_offset,json=itemNoOffset,proto3,oneof" json:"item_no_offset,omitempty"`
	Status              *common.Status        `protobuf:"varint,14,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"` // Default: 1
}

func (x *CreateItem) Reset() {
	*x = CreateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItem) ProtoMessage() {}

func (x *CreateItem) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItem.ProtoReflect.Descriptor instead.
func (*CreateItem) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{22}
}

func (x *CreateItem) GetItemNo() uint32 {
	if x != nil && x.ItemNo != nil {
		return *x.ItemNo
	}
	return 0
}

func (x *CreateItem) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (x *CreateItem) GetRecipient() *recipients.Select {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *CreateItem) GetFinancialAccount() string {
	if x != nil && x.FinancialAccount != nil {
		return *x.FinancialAccount
	}
	return ""
}

func (x *CreateItem) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CreateItem) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CreateItem) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *CreateItem) GetLegalentityOffset() *legalentities.Select {
	if x != nil {
		return x.LegalentityOffset
	}
	return nil
}

func (x *CreateItem) GetUserOffset() *users.Select {
	if x != nil {
		return x.UserOffset
	}
	return nil
}

func (x *CreateItem) GetOrgOffset() *orgs.Select {
	if x != nil {
		return x.OrgOffset
	}
	return nil
}

func (x *CreateItem) GetRecipientOffset() *recipients.Select {
	if x != nil {
		return x.RecipientOffset
	}
	return nil
}

func (x *CreateItem) GetTransactionIdOffset() string {
	if x != nil && x.TransactionIdOffset != nil {
		return *x.TransactionIdOffset
	}
	return ""
}

func (x *CreateItem) GetItemNoOffset() uint32 {
	if x != nil && x.ItemNoOffset != nil {
		return *x.ItemNoOffset
	}
	return 0
}

func (x *CreateItem) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type CreateItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CreateItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CreateItemList) Reset() {
	*x = CreateItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemList) ProtoMessage() {}

func (x *CreateItemList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemList.ProtoReflect.Descriptor instead.
func (*CreateItemList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{23}
}

func (x *CreateItemList) GetList() []*CreateItem {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNo              uint32                `protobuf:"varint,1,opt,name=item_no,json=itemNo,proto3" json:"item_no,omitempty"`
	Type                *ItemType             `protobuf:"varint,2,opt,name=type,proto3,enum=transactions.ItemType,oneof" json:"type,omitempty"`
	Recipient           *recipients.Select    `protobuf:"bytes,3,opt,name=recipient,proto3,oneof" json:"recipient,omitempty"`
	FinancialAccount    *string               `protobuf:"bytes,4,opt,name=financial_account,json=financialAccount,proto3,oneof" json:"financial_account,omitempty"`
	Amount              *common.Decimal       `protobuf:"bytes,5,opt,name=amount,proto3,oneof" json:"amount,omitempty"`     // Transaction Item amount in Transaction Currency
	Currency            *uoms.Select          `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"` // Transaction Currency
	Reference           *string               `protobuf:"bytes,7,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	LegalentityOffset   *legalentities.Select `protobuf:"bytes,8,opt,name=legalentity_offset,json=legalentityOffset,proto3,oneof" json:"legalentity_offset,omitempty"`
	UserOffset          *users.Select         `protobuf:"bytes,9,opt,name=user_offset,json=userOffset,proto3,oneof" json:"user_offset,omitempty"`
	OrgOffset           *orgs.Select          `protobuf:"bytes,10,opt,name=org_offset,json=orgOffset,proto3,oneof" json:"org_offset,omitempty"`
	RecipientOffset     *recipients.Select    `protobuf:"bytes,11,opt,name=recipient_offset,json=recipientOffset,proto3,oneof" json:"recipient_offset,omitempty"`
	TransactionIdOffset *string               `protobuf:"bytes,12,opt,name=transaction_id_offset,json=transactionIdOffset,proto3,oneof" json:"transaction_id_offset,omitempty"`
	ItemNoOffset        *uint32               `protobuf:"varint,13,opt,name=item_no_offset,json=itemNoOffset,proto3,oneof" json:"item_no_offset,omitempty"`
	Status              *common.Status        `protobuf:"varint,14,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *UpdateItem) Reset() {
	*x = UpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItem) ProtoMessage() {}

func (x *UpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItem.ProtoReflect.Descriptor instead.
func (*UpdateItem) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateItem) GetItemNo() uint32 {
	if x != nil {
		return x.ItemNo
	}
	return 0
}

func (x *UpdateItem) GetType() ItemType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (x *UpdateItem) GetRecipient() *recipients.Select {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *UpdateItem) GetFinancialAccount() string {
	if x != nil && x.FinancialAccount != nil {
		return *x.FinancialAccount
	}
	return ""
}

func (x *UpdateItem) GetAmount() *common.Decimal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *UpdateItem) GetCurrency() *uoms.Select {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *UpdateItem) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *UpdateItem) GetLegalentityOffset() *legalentities.Select {
	if x != nil {
		return x.LegalentityOffset
	}
	return nil
}

func (x *UpdateItem) GetUserOffset() *users.Select {
	if x != nil {
		return x.UserOffset
	}
	return nil
}

func (x *UpdateItem) GetOrgOffset() *orgs.Select {
	if x != nil {
		return x.OrgOffset
	}
	return nil
}

func (x *UpdateItem) GetRecipientOffset() *recipients.Select {
	if x != nil {
		return x.RecipientOffset
	}
	return nil
}

func (x *UpdateItem) GetTransactionIdOffset() string {
	if x != nil && x.TransactionIdOffset != nil {
		return *x.TransactionIdOffset
	}
	return ""
}

func (x *UpdateItem) GetItemNoOffset() uint32 {
	if x != nil && x.ItemNoOffset != nil {
		return *x.ItemNoOffset
	}
	return 0
}

func (x *UpdateItem) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

type UpdateItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UpdateItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UpdateItemList) Reset() {
	*x = UpdateItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemList) ProtoMessage() {}

func (x *UpdateItemList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemList.ProtoReflect.Descriptor instead.
func (*UpdateItemList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateItemList) GetList() []*UpdateItem {
	if x != nil {
		return x.List
	}
	return nil
}

type GetItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemNo              *common.UInt32ValueList       `protobuf:"bytes,1,opt,name=item_no,json=itemNo,proto3,oneof" json:"item_no,omitempty"`
	Type                *ItemTypeList                 `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Recipient           *recipients.GetListRequest    `protobuf:"bytes,3,opt,name=recipient,proto3,oneof" json:"recipient,omitempty"`
	FinancialAccount    *string                       `protobuf:"bytes,4,opt,name=financial_account,json=financialAccount,proto3,oneof" json:"financial_account,omitempty"`
	Amount              *common.DecimalValueList      `protobuf:"bytes,5,opt,name=amount,proto3,oneof" json:"amount,omitempty"`     // Transaction Item amount in Transaction Currency
	Currency            *uoms.GetListRequest          `protobuf:"bytes,6,opt,name=currency,proto3,oneof" json:"currency,omitempty"` // Transaction Currency
	LegalCurrency1      *SelectConversion             `protobuf:"bytes,7,opt,name=legal_currency1,json=legalCurrency1,proto3,oneof" json:"legal_currency1,omitempty"`
	LegalCurrency2      *SelectConversion             `protobuf:"bytes,8,opt,name=legal_currency2,json=legalCurrency2,proto3,oneof" json:"legal_currency2,omitempty"`
	LegalCurrency3      *SelectConversion             `protobuf:"bytes,9,opt,name=legal_currency3,json=legalCurrency3,proto3,oneof" json:"legal_currency3,omitempty"`
	Reference           *string                       `protobuf:"bytes,10,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	LegalentityOffset   *legalentities.GetListRequest `protobuf:"bytes,11,opt,name=legalentity_offset,json=legalentityOffset,proto3,oneof" json:"legalentity_offset,omitempty"`
	UserOffset          *users.GetListRequest         `protobuf:"bytes,12,opt,name=user_offset,json=userOffset,proto3,oneof" json:"user_offset,omitempty"`
	OrgOffset           *orgs.GetListRequest          `protobuf:"bytes,13,opt,name=org_offset,json=orgOffset,proto3,oneof" json:"org_offset,omitempty"`
	RecipientOffset     *recipients.GetListRequest    `protobuf:"bytes,14,opt,name=recipient_offset,json=recipientOffset,proto3,oneof" json:"recipient_offset,omitempty"`
	TransactionIdOffset *string                       `protobuf:"bytes,15,opt,name=transaction_id_offset,json=transactionIdOffset,proto3,oneof" json:"transaction_id_offset,omitempty"`
	ItemNoOffset        *common.UInt32ValueList       `protobuf:"bytes,16,opt,name=item_no_offset,json=itemNoOffset,proto3,oneof" json:"item_no_offset,omitempty"`
	Status              *common.Status                `protobuf:"varint,17,opt,name=status,proto3,enum=common.Status,oneof" json:"status,omitempty"`
}

func (x *GetItemList) Reset() {
	*x = GetItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transactions_transactions_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemList) ProtoMessage() {}

func (x *GetItemList) ProtoReflect() protoreflect.Message {
	mi := &file_transactions_transactions_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemList.ProtoReflect.Descriptor instead.
func (*GetItemList) Descriptor() ([]byte, []int) {
	return file_transactions_transactions_proto_rawDescGZIP(), []int{26}
}

func (x *GetItemList) GetItemNo() *common.UInt32ValueList {
	if x != nil {
		return x.ItemNo
	}
	return nil
}

func (x *GetItemList) GetType() *ItemTypeList {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetItemList) GetRecipient() *recipients.GetListRequest {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *GetItemList) GetFinancialAccount() string {
	if x != nil && x.FinancialAccount != nil {
		return *x.FinancialAccount
	}
	return ""
}

func (x *GetItemList) GetAmount() *common.DecimalValueList {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *GetItemList) GetCurrency() *uoms.GetListRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *GetItemList) GetLegalCurrency1() *SelectConversion {
	if x != nil {
		return x.LegalCurrency1
	}
	return nil
}

func (x *GetItemList) GetLegalCurrency2() *SelectConversion {
	if x != nil {
		return x.LegalCurrency2
	}
	return nil
}

func (x *GetItemList) GetLegalCurrency3() *SelectConversion {
	if x != nil {
		return x.LegalCurrency3
	}
	return nil
}

func (x *GetItemList) GetReference() string {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return ""
}

func (x *GetItemList) GetLegalentityOffset() *legalentities.GetListRequest {
	if x != nil {
		return x.LegalentityOffset
	}
	return nil
}

func (x *GetItemList) GetUserOffset() *users.GetListRequest {
	if x != nil {
		return x.UserOffset
	}
	return nil
}

func (x *GetItemList) GetOrgOffset() *orgs.GetListRequest {
	if x != nil {
		return x.OrgOffset
	}
	return nil
}

func (x *GetItemList) GetRecipientOffset() *recipients.GetListRequest {
	if x != nil {
		return x.RecipientOffset
	}
	return nil
}

func (x *GetItemList) GetTransactionIdOffset() string {
	if x != nil && x.TransactionIdOffset != nil {
		return *x.TransactionIdOffset
	}
	return ""
}

func (x *GetItemList) GetItemNoOffset() *common.UInt32ValueList {
	if x != nil {
		return x.ItemNoOffset
	}
	return nil
}

func (x *GetItemList) GetStatus() common.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.Status(0)
}

var File_transactions_transactions_proto protoreflect.FileDescriptor

var file_transactions_transactions_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1b, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x6f, 0x6d,
	0x73, 0x2f, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x32, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xf3, 0x08, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f,
	0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x33, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x20, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f,
	0x72, 0x67, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x48, 0x06, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x33, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x72, 0x67, 0x22, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x20, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xe3,
	0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x07, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x04, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x07, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x48, 0x08, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6f, 0x72, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf3, 0x07, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x02, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x07, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x08, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x0b, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x0c, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03,
	0x6f, 0x72, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x0d, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0f, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6f, 0x72, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd0, 0x0a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x02, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x03, 0x52, 0x06,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x07, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x08, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x09, 0x52, 0x0e,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x0a, 0x52, 0x0e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x0b, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x0e, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x0f,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72,
	0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x10, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x11, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x12, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x72, 0x67, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc2, 0x09, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x55, 0x6f, 0x4d, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x32, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x0f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x05, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a,
	0x6f, 0x72, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x07, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x33, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x3d, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x24,
	0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xea, 0x06, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75,
	0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x03, 0x52, 0x11, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x67,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x9c, 0x07, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x48, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x06, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x07, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x08, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x48, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x4e, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x0c, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xc3, 0x0a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6f, 0x6d, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x07, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x32, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x08, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x33, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x0a, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x0b, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x72, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x0c, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x0f, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d,
	0x4e, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x10, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f,
	0x72, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0xd1, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x41, 0x49, 0x52, 0x44, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53,
	0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54,
	0x41, 0x58, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x47, 0x49,
	0x46, 0x54, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x13, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41,
	0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x15,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x4e, 0x53,
	0x45, 0x53, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54,
	0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10,
	0x18, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x58,
	0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x41, 0x54, 0x10, 0x23,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x40, 0x2a, 0x50, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x02, 0x42, 0x98, 0x01, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x64, 0x61, 0x76, 0x65, 0x6e, 0x73, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa,
	0x02, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xca, 0x02,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x18,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transactions_transactions_proto_rawDescOnce sync.Once
	file_transactions_transactions_proto_rawDescData = file_transactions_transactions_proto_rawDesc
)

func file_transactions_transactions_proto_rawDescGZIP() []byte {
	file_transactions_transactions_proto_rawDescOnce.Do(func() {
		file_transactions_transactions_proto_rawDescData = protoimpl.X.CompressGZIP(file_transactions_transactions_proto_rawDescData)
	})
	return file_transactions_transactions_proto_rawDescData
}

var file_transactions_transactions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_transactions_transactions_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_transactions_transactions_proto_goTypes = []interface{}{
	(Type)(0),                            // 0: transactions.Type
	(ItemType)(0),                        // 1: transactions.ItemType
	(*TypeList)(nil),                     // 2: transactions.TypeList
	(*Transaction)(nil),                  // 3: transactions.Transaction
	(*List)(nil),                         // 4: transactions.List
	(*SelectList)(nil),                   // 5: transactions.SelectList
	(*Conversion)(nil),                   // 6: transactions.Conversion
	(*SelectConversion)(nil),             // 7: transactions.SelectConversion
	(*AltConversion)(nil),                // 8: transactions.AltConversion
	(*AltConversionList)(nil),            // 9: transactions.AltConversionList
	(*CreateRequest)(nil),                // 10: transactions.CreateRequest
	(*CreateResponse)(nil),               // 11: transactions.CreateResponse
	(*UpdateRequest)(nil),                // 12: transactions.UpdateRequest
	(*UpdateResponse)(nil),               // 13: transactions.UpdateResponse
	(*GetRequest)(nil),                   // 14: transactions.GetRequest
	(*GetResponse)(nil),                  // 15: transactions.GetResponse
	(*GetListRequest)(nil),               // 16: transactions.GetListRequest
	(*GetListResponse)(nil),              // 17: transactions.GetListResponse
	(*DeleteRequest)(nil),                // 18: transactions.DeleteRequest
	(*DeleteResponse)(nil),               // 19: transactions.DeleteResponse
	(*ItemTypeList)(nil),                 // 20: transactions.ItemTypeList
	(*TransactionItem)(nil),              // 21: transactions.TransactionItem
	(*ItemList)(nil),                     // 22: transactions.ItemList
	(*SelectItemList)(nil),               // 23: transactions.SelectItemList
	(*CreateItem)(nil),                   // 24: transactions.CreateItem
	(*CreateItemList)(nil),               // 25: transactions.CreateItemList
	(*UpdateItem)(nil),                   // 26: transactions.UpdateItem
	(*UpdateItemList)(nil),               // 27: transactions.UpdateItemList
	(*GetItemList)(nil),                  // 28: transactions.GetItemList
	(*datasources.DataSource)(nil),       // 29: datasources.DataSource
	(*legalentities.LegalEntity)(nil),    // 30: legalentities.LegalEntity
	(*ledgers.Ledger)(nil),               // 31: ledgers.Ledger
	(*timestamppb.Timestamp)(nil),        // 32: google.protobuf.Timestamp
	(*common.Decimal)(nil),               // 33: common.Decimal
	(*uoms.UoM)(nil),                     // 34: uoms.UoM
	(*users.User)(nil),                   // 35: users.User
	(*authgroups.AuthGroup)(nil),         // 36: authgroups.AuthGroup
	(*orgs.Org)(nil),                     // 37: orgs.Org
	(common.Status)(0),                   // 38: common.Status
	(*prices.Price)(nil),                 // 39: prices.Price
	(*common.DecimalValueList)(nil),      // 40: common.DecimalValueList
	(*uoms.GetListRequest)(nil),          // 41: uoms.GetListRequest
	(*prices.GetListRequest)(nil),        // 42: prices.GetListRequest
	(*datasources.Select)(nil),           // 43: datasources.Select
	(*legalentities.Select)(nil),         // 44: legalentities.Select
	(*ledgers.Select)(nil),               // 45: ledgers.Select
	(*uoms.Select)(nil),                  // 46: uoms.Select
	(*users.Select)(nil),                 // 47: users.Select
	(*authgroups.Select)(nil),            // 48: authgroups.Select
	(*orgs.Select)(nil),                  // 49: orgs.Select
	(*common.Error)(nil),                 // 50: common.Error
	(*datasources.GetListRequest)(nil),   // 51: datasources.GetListRequest
	(*legalentities.GetListRequest)(nil), // 52: legalentities.GetListRequest
	(*ledgers.GetListRequest)(nil),       // 53: ledgers.GetListRequest
	(*users.GetListRequest)(nil),         // 54: users.GetListRequest
	(*authgroups.GetListRequest)(nil),    // 55: authgroups.GetListRequest
	(*orgs.GetListRequest)(nil),          // 56: orgs.GetListRequest
	(*common.StatusList)(nil),            // 57: common.StatusList
	(*recipients.Recipient)(nil),         // 58: recipients.Recipient
	(*recipients.Select)(nil),            // 59: recipients.Select
	(*common.UInt32ValueList)(nil),       // 60: common.UInt32ValueList
	(*recipients.GetListRequest)(nil),    // 61: recipients.GetListRequest
}
var file_transactions_transactions_proto_depIdxs = []int32{
	0,   // 0: transactions.TypeList.list:type_name -> transactions.Type
	0,   // 1: transactions.Transaction.type:type_name -> transactions.Type
	29,  // 2: transactions.Transaction.source:type_name -> datasources.DataSource
	30,  // 3: transactions.Transaction.legalentity:type_name -> legalentities.LegalEntity
	31,  // 4: transactions.Transaction.ledger:type_name -> ledgers.Ledger
	32,  // 5: transactions.Transaction.posting_date:type_name -> google.protobuf.Timestamp
	33,  // 6: transactions.Transaction.amount:type_name -> common.Decimal
	34,  // 7: transactions.Transaction.currency:type_name -> uoms.UoM
	6,   // 8: transactions.Transaction.legal_currency1:type_name -> transactions.Conversion
	6,   // 9: transactions.Transaction.legal_currency2:type_name -> transactions.Conversion
	6,   // 10: transactions.Transaction.legal_currency3:type_name -> transactions.Conversion
	9,   // 11: transactions.Transaction.alt_conversions:type_name -> transactions.AltConversionList
	35,  // 12: transactions.Transaction.user:type_name -> users.User
	36,  // 13: transactions.Transaction.authgroup:type_name -> authgroups.AuthGroup
	37,  // 14: transactions.Transaction.org:type_name -> orgs.Org
	38,  // 15: transactions.Transaction.status:type_name -> common.Status
	22,  // 16: transactions.Transaction.items:type_name -> transactions.ItemList
	3,   // 17: transactions.List.list:type_name -> transactions.Transaction
	33,  // 18: transactions.Conversion.amount:type_name -> common.Decimal
	34,  // 19: transactions.Conversion.currency:type_name -> uoms.UoM
	33,  // 20: transactions.Conversion.rate:type_name -> common.Decimal
	39,  // 21: transactions.Conversion.price:type_name -> prices.Price
	40,  // 22: transactions.SelectConversion.amount:type_name -> common.DecimalValueList
	41,  // 23: transactions.SelectConversion.currency:type_name -> uoms.GetListRequest
	40,  // 24: transactions.SelectConversion.rate:type_name -> common.DecimalValueList
	42,  // 25: transactions.SelectConversion.price:type_name -> prices.GetListRequest
	33,  // 26: transactions.AltConversion.amount:type_name -> common.Decimal
	34,  // 27: transactions.AltConversion.currency:type_name -> uoms.UoM
	33,  // 28: transactions.AltConversion.rate:type_name -> common.Decimal
	39,  // 29: transactions.AltConversion.price:type_name -> prices.Price
	38,  // 30: transactions.AltConversion.status:type_name -> common.Status
	8,   // 31: transactions.AltConversionList.list:type_name -> transactions.AltConversion
	0,   // 32: transactions.CreateRequest.type:type_name -> transactions.Type
	43,  // 33: transactions.CreateRequest.source:type_name -> datasources.Select
	44,  // 34: transactions.CreateRequest.legalentity:type_name -> legalentities.Select
	45,  // 35: transactions.CreateRequest.ledger:type_name -> ledgers.Select
	32,  // 36: transactions.CreateRequest.posting_date:type_name -> google.protobuf.Timestamp
	33,  // 37: transactions.CreateRequest.amount:type_name -> common.Decimal
	46,  // 38: transactions.CreateRequest.currency:type_name -> uoms.Select
	47,  // 39: transactions.CreateRequest.user:type_name -> users.Select
	48,  // 40: transactions.CreateRequest.authgroup:type_name -> authgroups.Select
	49,  // 41: transactions.CreateRequest.org:type_name -> orgs.Select
	38,  // 42: transactions.CreateRequest.status:type_name -> common.Status
	25,  // 43: transactions.CreateRequest.items:type_name -> transactions.CreateItemList
	50,  // 44: transactions.CreateResponse.error:type_name -> common.Error
	3,   // 45: transactions.CreateResponse.transaction:type_name -> transactions.Transaction
	0,   // 46: transactions.UpdateRequest.type:type_name -> transactions.Type
	43,  // 47: transactions.UpdateRequest.source:type_name -> datasources.Select
	44,  // 48: transactions.UpdateRequest.legalentity:type_name -> legalentities.Select
	45,  // 49: transactions.UpdateRequest.ledger:type_name -> ledgers.Select
	32,  // 50: transactions.UpdateRequest.posting_date:type_name -> google.protobuf.Timestamp
	33,  // 51: transactions.UpdateRequest.amount:type_name -> common.Decimal
	46,  // 52: transactions.UpdateRequest.currency:type_name -> uoms.Select
	47,  // 53: transactions.UpdateRequest.user:type_name -> users.Select
	48,  // 54: transactions.UpdateRequest.authgroup:type_name -> authgroups.Select
	49,  // 55: transactions.UpdateRequest.org:type_name -> orgs.Select
	38,  // 56: transactions.UpdateRequest.status:type_name -> common.Status
	27,  // 57: transactions.UpdateRequest.items:type_name -> transactions.UpdateItemList
	50,  // 58: transactions.UpdateResponse.error:type_name -> common.Error
	3,   // 59: transactions.UpdateResponse.transaction:type_name -> transactions.Transaction
	50,  // 60: transactions.GetResponse.error:type_name -> common.Error
	3,   // 61: transactions.GetResponse.transaction:type_name -> transactions.Transaction
	2,   // 62: transactions.GetListRequest.type:type_name -> transactions.TypeList
	51,  // 63: transactions.GetListRequest.source:type_name -> datasources.GetListRequest
	52,  // 64: transactions.GetListRequest.legalentity:type_name -> legalentities.GetListRequest
	53,  // 65: transactions.GetListRequest.ledger:type_name -> ledgers.GetListRequest
	32,  // 66: transactions.GetListRequest.posting_date:type_name -> google.protobuf.Timestamp
	40,  // 67: transactions.GetListRequest.amount:type_name -> common.DecimalValueList
	41,  // 68: transactions.GetListRequest.currency:type_name -> uoms.GetListRequest
	7,   // 69: transactions.GetListRequest.legal_currency1:type_name -> transactions.SelectConversion
	7,   // 70: transactions.GetListRequest.legal_currency2:type_name -> transactions.SelectConversion
	7,   // 71: transactions.GetListRequest.legal_currency3:type_name -> transactions.SelectConversion
	54,  // 72: transactions.GetListRequest.user:type_name -> users.GetListRequest
	55,  // 73: transactions.GetListRequest.authgroup:type_name -> authgroups.GetListRequest
	56,  // 74: transactions.GetListRequest.org:type_name -> orgs.GetListRequest
	57,  // 75: transactions.GetListRequest.status:type_name -> common.StatusList
	28,  // 76: transactions.GetListRequest.items:type_name -> transactions.GetItemList
	50,  // 77: transactions.GetListResponse.error:type_name -> common.Error
	3,   // 78: transactions.GetListResponse.transaction:type_name -> transactions.Transaction
	50,  // 79: transactions.DeleteResponse.error:type_name -> common.Error
	3,   // 80: transactions.DeleteResponse.transaction:type_name -> transactions.Transaction
	1,   // 81: transactions.ItemTypeList.list:type_name -> transactions.ItemType
	1,   // 82: transactions.TransactionItem.type:type_name -> transactions.ItemType
	58,  // 83: transactions.TransactionItem.recipient:type_name -> recipients.Recipient
	33,  // 84: transactions.TransactionItem.amount:type_name -> common.Decimal
	34,  // 85: transactions.TransactionItem.currency:type_name -> uoms.UoM
	6,   // 86: transactions.TransactionItem.legal_currency1:type_name -> transactions.Conversion
	6,   // 87: transactions.TransactionItem.legal_currency2:type_name -> transactions.Conversion
	6,   // 88: transactions.TransactionItem.legal_currency3:type_name -> transactions.Conversion
	9,   // 89: transactions.TransactionItem.alt_conversions:type_name -> transactions.AltConversionList
	30,  // 90: transactions.TransactionItem.legalentity_offset:type_name -> legalentities.LegalEntity
	54,  // 91: transactions.TransactionItem.user_offset:type_name -> users.GetListRequest
	56,  // 92: transactions.TransactionItem.org_offset:type_name -> orgs.GetListRequest
	58,  // 93: transactions.TransactionItem.recipient_offset:type_name -> recipients.Recipient
	38,  // 94: transactions.TransactionItem.status:type_name -> common.Status
	21,  // 95: transactions.ItemList.list:type_name -> transactions.TransactionItem
	1,   // 96: transactions.CreateItem.type:type_name -> transactions.ItemType
	59,  // 97: transactions.CreateItem.recipient:type_name -> recipients.Select
	33,  // 98: transactions.CreateItem.amount:type_name -> common.Decimal
	46,  // 99: transactions.CreateItem.currency:type_name -> uoms.Select
	44,  // 100: transactions.CreateItem.legalentity_offset:type_name -> legalentities.Select
	47,  // 101: transactions.CreateItem.user_offset:type_name -> users.Select
	49,  // 102: transactions.CreateItem.org_offset:type_name -> orgs.Select
	59,  // 103: transactions.CreateItem.recipient_offset:type_name -> recipients.Select
	38,  // 104: transactions.CreateItem.status:type_name -> common.Status
	24,  // 105: transactions.CreateItemList.list:type_name -> transactions.CreateItem
	1,   // 106: transactions.UpdateItem.type:type_name -> transactions.ItemType
	59,  // 107: transactions.UpdateItem.recipient:type_name -> recipients.Select
	33,  // 108: transactions.UpdateItem.amount:type_name -> common.Decimal
	46,  // 109: transactions.UpdateItem.currency:type_name -> uoms.Select
	44,  // 110: transactions.UpdateItem.legalentity_offset:type_name -> legalentities.Select
	47,  // 111: transactions.UpdateItem.user_offset:type_name -> users.Select
	49,  // 112: transactions.UpdateItem.org_offset:type_name -> orgs.Select
	59,  // 113: transactions.UpdateItem.recipient_offset:type_name -> recipients.Select
	38,  // 114: transactions.UpdateItem.status:type_name -> common.Status
	26,  // 115: transactions.UpdateItemList.list:type_name -> transactions.UpdateItem
	60,  // 116: transactions.GetItemList.item_no:type_name -> common.UInt32ValueList
	20,  // 117: transactions.GetItemList.type:type_name -> transactions.ItemTypeList
	61,  // 118: transactions.GetItemList.recipient:type_name -> recipients.GetListRequest
	40,  // 119: transactions.GetItemList.amount:type_name -> common.DecimalValueList
	41,  // 120: transactions.GetItemList.currency:type_name -> uoms.GetListRequest
	7,   // 121: transactions.GetItemList.legal_currency1:type_name -> transactions.SelectConversion
	7,   // 122: transactions.GetItemList.legal_currency2:type_name -> transactions.SelectConversion
	7,   // 123: transactions.GetItemList.legal_currency3:type_name -> transactions.SelectConversion
	52,  // 124: transactions.GetItemList.legalentity_offset:type_name -> legalentities.GetListRequest
	54,  // 125: transactions.GetItemList.user_offset:type_name -> users.GetListRequest
	56,  // 126: transactions.GetItemList.org_offset:type_name -> orgs.GetListRequest
	61,  // 127: transactions.GetItemList.recipient_offset:type_name -> recipients.GetListRequest
	60,  // 128: transactions.GetItemList.item_no_offset:type_name -> common.UInt32ValueList
	38,  // 129: transactions.GetItemList.status:type_name -> common.Status
	130, // [130:130] is the sub-list for method output_type
	130, // [130:130] is the sub-list for method input_type
	130, // [130:130] is the sub-list for extension type_name
	130, // [130:130] is the sub-list for extension extendee
	0,   // [0:130] is the sub-list for field type_name
}

func init() { file_transactions_transactions_proto_init() }
func file_transactions_transactions_proto_init() {
	if File_transactions_transactions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transactions_transactions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectConversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltConversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltConversionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transactions_transactions_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transactions_transactions_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CreateResponse_Error)(nil),
		(*CreateResponse_Transaction)(nil),
	}
	file_transactions_transactions_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*UpdateResponse_Error)(nil),
		(*UpdateResponse_Transaction)(nil),
	}
	file_transactions_transactions_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetResponse_Error)(nil),
		(*GetResponse_Transaction)(nil),
	}
	file_transactions_transactions_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*GetListResponse_Error)(nil),
		(*GetListResponse_Transaction)(nil),
	}
	file_transactions_transactions_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DeleteResponse_Error)(nil),
		(*DeleteResponse_Transaction)(nil),
	}
	file_transactions_transactions_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_transactions_transactions_proto_msgTypes[26].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transactions_transactions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transactions_transactions_proto_goTypes,
		DependencyIndexes: file_transactions_transactions_proto_depIdxs,
		EnumInfos:         file_transactions_transactions_proto_enumTypes,
		MessageInfos:      file_transactions_transactions_proto_msgTypes,
	}.Build()
	File_transactions_transactions_proto = out.File
	file_transactions_transactions_proto_rawDesc = nil
	file_transactions_transactions_proto_goTypes = nil
	file_transactions_transactions_proto_depIdxs = nil
}

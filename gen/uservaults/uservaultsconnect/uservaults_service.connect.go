// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: uservaults/uservaults_service.proto

package uservaultsconnect

import (
	context "context"
	uservaults "davensi.com/core/gen/uservaults"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "uservaults.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceSetProcedure is the fully-qualified name of the Service's Set RPC.
	ServiceSetProcedure = "/uservaults.Service/Set"
	// ServiceRemoveProcedure is the fully-qualified name of the Service's Remove RPC.
	ServiceRemoveProcedure = "/uservaults.Service/Remove"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/uservaults.Service/Get"
	// ServiceGetListProcedure is the fully-qualified name of the Service's GetList RPC.
	ServiceGetListProcedure = "/uservaults.Service/GetList"
	// ServiceResetProcedure is the fully-qualified name of the Service's Reset RPC.
	ServiceResetProcedure = "/uservaults.Service/Reset"
)

// ServiceClient is a client for the uservaults.Service service.
type ServiceClient interface {
	Set(context.Context, *connect_go.Request[uservaults.SetRequest]) (*connect_go.Response[uservaults.SetResponse], error)
	Remove(context.Context, *connect_go.Request[uservaults.RemoveRequest]) (*connect_go.Response[uservaults.RemoveResponse], error)
	Get(context.Context, *connect_go.Request[uservaults.GetRequest]) (*connect_go.Response[uservaults.GetResponse], error)
	GetList(context.Context, *connect_go.Request[uservaults.GetListRequest]) (*connect_go.ServerStreamForClient[uservaults.GetListResponse], error)
	Reset(context.Context, *connect_go.Request[uservaults.ResetRequest]) (*connect_go.ServerStreamForClient[uservaults.ResetResponse], error)
}

// NewServiceClient constructs a client for the uservaults.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		set: connect_go.NewClient[uservaults.SetRequest, uservaults.SetResponse](
			httpClient,
			baseURL+ServiceSetProcedure,
			opts...,
		),
		remove: connect_go.NewClient[uservaults.RemoveRequest, uservaults.RemoveResponse](
			httpClient,
			baseURL+ServiceRemoveProcedure,
			opts...,
		),
		get: connect_go.NewClient[uservaults.GetRequest, uservaults.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		getList: connect_go.NewClient[uservaults.GetListRequest, uservaults.GetListResponse](
			httpClient,
			baseURL+ServiceGetListProcedure,
			opts...,
		),
		reset: connect_go.NewClient[uservaults.ResetRequest, uservaults.ResetResponse](
			httpClient,
			baseURL+ServiceResetProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	set     *connect_go.Client[uservaults.SetRequest, uservaults.SetResponse]
	remove  *connect_go.Client[uservaults.RemoveRequest, uservaults.RemoveResponse]
	get     *connect_go.Client[uservaults.GetRequest, uservaults.GetResponse]
	getList *connect_go.Client[uservaults.GetListRequest, uservaults.GetListResponse]
	reset   *connect_go.Client[uservaults.ResetRequest, uservaults.ResetResponse]
}

// Set calls uservaults.Service.Set.
func (c *serviceClient) Set(ctx context.Context, req *connect_go.Request[uservaults.SetRequest]) (*connect_go.Response[uservaults.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Remove calls uservaults.Service.Remove.
func (c *serviceClient) Remove(ctx context.Context, req *connect_go.Request[uservaults.RemoveRequest]) (*connect_go.Response[uservaults.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// Get calls uservaults.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[uservaults.GetRequest]) (*connect_go.Response[uservaults.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetList calls uservaults.Service.GetList.
func (c *serviceClient) GetList(ctx context.Context, req *connect_go.Request[uservaults.GetListRequest]) (*connect_go.ServerStreamForClient[uservaults.GetListResponse], error) {
	return c.getList.CallServerStream(ctx, req)
}

// Reset calls uservaults.Service.Reset.
func (c *serviceClient) Reset(ctx context.Context, req *connect_go.Request[uservaults.ResetRequest]) (*connect_go.ServerStreamForClient[uservaults.ResetResponse], error) {
	return c.reset.CallServerStream(ctx, req)
}

// ServiceHandler is an implementation of the uservaults.Service service.
type ServiceHandler interface {
	Set(context.Context, *connect_go.Request[uservaults.SetRequest]) (*connect_go.Response[uservaults.SetResponse], error)
	Remove(context.Context, *connect_go.Request[uservaults.RemoveRequest]) (*connect_go.Response[uservaults.RemoveResponse], error)
	Get(context.Context, *connect_go.Request[uservaults.GetRequest]) (*connect_go.Response[uservaults.GetResponse], error)
	GetList(context.Context, *connect_go.Request[uservaults.GetListRequest], *connect_go.ServerStream[uservaults.GetListResponse]) error
	Reset(context.Context, *connect_go.Request[uservaults.ResetRequest], *connect_go.ServerStream[uservaults.ResetResponse]) error
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceSetHandler := connect_go.NewUnaryHandler(
		ServiceSetProcedure,
		svc.Set,
		opts...,
	)
	serviceRemoveHandler := connect_go.NewUnaryHandler(
		ServiceRemoveProcedure,
		svc.Remove,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceGetListHandler := connect_go.NewServerStreamHandler(
		ServiceGetListProcedure,
		svc.GetList,
		opts...,
	)
	serviceResetHandler := connect_go.NewServerStreamHandler(
		ServiceResetProcedure,
		svc.Reset,
		opts...,
	)
	return "/uservaults.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceSetProcedure:
			serviceSetHandler.ServeHTTP(w, r)
		case ServiceRemoveProcedure:
			serviceRemoveHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceGetListProcedure:
			serviceGetListHandler.ServeHTTP(w, r)
		case ServiceResetProcedure:
			serviceResetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Set(context.Context, *connect_go.Request[uservaults.SetRequest]) (*connect_go.Response[uservaults.SetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uservaults.Service.Set is not implemented"))
}

func (UnimplementedServiceHandler) Remove(context.Context, *connect_go.Request[uservaults.RemoveRequest]) (*connect_go.Response[uservaults.RemoveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uservaults.Service.Remove is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[uservaults.GetRequest]) (*connect_go.Response[uservaults.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uservaults.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) GetList(context.Context, *connect_go.Request[uservaults.GetListRequest], *connect_go.ServerStream[uservaults.GetListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uservaults.Service.GetList is not implemented"))
}

func (UnimplementedServiceHandler) Reset(context.Context, *connect_go.Request[uservaults.ResetRequest], *connect_go.ServerStream[uservaults.ResetResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uservaults.Service.Reset is not implemented"))
}

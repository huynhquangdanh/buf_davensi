syntax = "proto3";

package bankbranches;

import "addresses/addresses.proto";
import "banks/banks.proto";
import "common/errors.proto";
import "common/statuses.proto";
import "contacts/contacts.proto";

// Backed by table 'bankbranches'
message BankBranch {
  string id = 1; // System Key: id is generated by the server or the database
  banks.Bank bank = 2; // bank + branch_code form the Human-Readable Key (unique identifier)
  string branch_code = 3; // bank + branch_code form the Human-Readable Key (unique identifier)
  banks.Type type = 4;
  string name = 5;
  addresses.Address address = 6;
  optional contacts.Contact contact1 = 7;
  optional contacts.Contact contact2 = 8;
  optional contacts.Contact contact3 = 9;
  common.Status status = 10;
}

message List {
  repeated BankBranch list = 1;
}

message BankBranchCode {
  banks.Select bank = 1;
  string branch_code = 2;
}

message Select {
  oneof select {
    string by_id = 1;
    BankBranchCode by_bank_branch_code = 2;
  }
}

message SelectList {
  repeated Select list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  banks.Select bank = 1;
  string branch_code = 2;
  banks.Type type = 3;
  string name = 4;
  optional addresses.CreateRequest address = 5;
  optional contacts.CreateRequest contact1 = 6;
  optional contacts.CreateRequest contact2 = 7;
  optional contacts.CreateRequest contact3 = 8;
  optional common.Status status = 9; // Default: 0 (STATUS_UNSPECIFIED)
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    BankBranch bankbranch = 2;
  }
}

message UpdateRequest {
  Select select = 1;
  optional string name = 3;
  optional banks.Type type = 4;
  optional string bic = 5;
  optional string bank_code = 6;
  optional addresses.UpdateAddress address = 7; // Will create the address with geolocalized country as default if NULL
  optional contacts.UpdateContact contact1 = 8; // Will create the contact if NULL
  optional contacts.UpdateContact contact2 = 9; // Will create the contact if NULL
  optional contacts.UpdateContact contact3 = 10; // Will create the contact if NULL
  optional common.Status status = 11;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    BankBranch bankbranch = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  Select select = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    BankBranch bankbranch = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional banks.GetListRequest bank = 1;
  optional string branch_code = 2;
  optional banks.TypeList type = 3;
  optional string name = 4;
  optional addresses.GetListRequest address = 5;
  optional contacts.GetListRequest contact1 = 6;
  optional contacts.GetListRequest contact2 = 7;
  optional contacts.GetListRequest contact3 = 8;
  optional common.StatusList status = 9;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    BankBranch bankbranch = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  Select select = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    BankBranch bankbranch = 2;
  }
}

syntax = "proto3";

package contacts;

import "common/errors.proto";
import "common/statuses.proto";
import "kyc/kyc.proto";
import "google/protobuf/timestamp.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_EMAIL = 1;
  TYPE_PHONE_MOBILE = 2;
  TYPE_PHONE_LANDLINE = 3;
  TYPE_WEBSITE = 4;
  TYPE_SOCIAL_MEDIA = 5;
}

message TypeList {
  repeated Type list = 1;
}

// Backed by table 'contacts'
message Contact {
  string id = 1; // System Key: id is generated by the server or the database
  Type type = 2;
  string value = 3;
  common.Status status = 4;
}

message List {
  repeated Contact list = 1;
}

message SelectList {
  repeated string list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  Type type = 1;
  string value = 2;
  optional common.Status status = 3; // Default: STATUS_UNSPECIFIED, which means Contact needs to be activated after creation
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    Contact contact = 2;
  }
}

message UpdateRequest {
  string id = 1;
  optional Type type = 2;
  optional string value = 3;
  optional common.Status status = 4;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    Contact contact = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  string id = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    Contact contact = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional TypeList type = 1;
  optional string value = 2;
  optional common.StatusList status = 3;
}

message GetListResponse {
  oneof response {
    common.Error error = 1;
    Contact contact = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  string id = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    Contact contact = 2;
  }
}

// Labeled Contact messages are used in Entities that requires Labeled Contact Assignment

message LabeledContact {
  string label = 1;
  Contact contact = 2;
  optional bool main_contact = 3;
  kyc.Status status = 4;
}

message LabeledContactList {
  repeated LabeledContact list = 1;
}

// Assign existing contact or create and assign new contact to Entity
message SetLabeledContact {
  string label = 1;
  oneof select {
    string id = 2;
    CreateRequest contact = 3;
  }
  optional kyc.Status status = 4;
  optional bool main_contact = 5;
}

message SetLabeledContactList {
  repeated SetLabeledContact list = 1;
}

message UpdateLabeledContact {
  optional string label = 1;
  optional Type type = 2;
  optional string value = 3;
  optional common.Status status = 4;
}

message UpdateLabeledContactRequest {
  string by_label = 1;
  UpdateLabeledContact contact = 2;
  optional kyc.Status status = 3;
  optional bool main_contact = 4;
}

// Unlabeled Contact messages are used in Entities that requires UnLabeled Contact Assignment

message UpdateContact {
  optional Type type = 1;
  optional string value = 2;
  optional common.Status status = 3;
  optional bool main_contact = 4;
}

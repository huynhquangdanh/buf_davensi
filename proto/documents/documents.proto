syntax = "proto3";

package documents;

import "common/errors.proto";
import "common/statuses.proto";
import "google/protobuf/timestamp.proto";

// Backed by table 'documents' and 'documents_data'
message Document {
  string id = 1; // System Key: id is generated by the server or the database
  string file = 2;
  string file_type = 3; // file_type is determined automatically from file extension or content analysis
  google.protobuf.Timestamp file_timestamp = 4; // file_timestamp is automatically updated when the file is updated
  common.Status status = 5;
  map<string, string> data = 6; // key-values from table 'documents_data'
}

message List {
  repeated Document list = 1;
}

message SelectList {
  repeated string list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  string file = 1;
  optional common.Status status = 2; // Default: STATUS_UNSPECIFIED, which means Document needs to be activated after creation
  map<string, string> data = 3;
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    Document document = 2;
  }
}

message UpdateRequest {
  string id = 1;
  optional string file = 2;
  optional common.Status status = 3;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    Document document = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  string id = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    Document document = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional string file = 1;
  optional string file_type = 2;
  optional common.StatusList status = 3;
}

message GetListResponse {
  oneof response {
    common.Error error = 1;
    Document document = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  string id = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    Document document = 2;
  }
}

// Document data management

message SetDataRequest {
  string id = 1;
  map<string, string> data = 2;
}

message SetDataResponse {
  string id = 1;
  map<string, string> data = 2;
}

message UpdateDataRequest {
  string id = 1;
  map<string, string> data = 2;
}

message UpdateDataResponse {
  string id = 1;
  map<string, string> data = 2;
}

message KeyList {
  repeated string list = 1;
}

// Removing document data will just change the status in table 'documents_data'
message RemoveDataRequest {
  string id = 1;
  KeyList keys = 2;
}

message RemoveDataResponse {
  string id = 1;
  map<string, string> data = 2;
}

// Labeled Document messages are used in Entities that requires Labeled Document Assignment

message LabeledDocument {
  string label = 1;
  Document document = 2;
}

message LabeledDocumentList {
  repeated LabeledDocument list = 1;
}

// Assign existing document or create and assign new document to Entity
message SetLabeledDocument {
  string label = 1;
  oneof response {
    string id = 2;
    CreateRequest document = 3;
  }
}

message SetLabeledDocumentList {
  repeated SetLabeledDocument list = 1;
}

message UpdateLabeledDocument {
  optional string label = 1;
  optional string file = 2;
  optional string file_type = 3;
  optional common.Status status = 4;
}

message UpdateLabeledDocumentRequest {
  string by_label = 1;
  UpdateLabeledDocument adress = 2;
}

// Unlabeled Document messages are used in Entities that requires UnLabeled Document Assignment

message UpdateDocument {
  optional string file = 1;
  optional string file_type = 2;
  optional common.Status status = 3;
}

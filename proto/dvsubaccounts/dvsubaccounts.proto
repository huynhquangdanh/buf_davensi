syntax = "proto3";

package dvsubaccounts;

import "common/errors.proto";
import "recipients/recipients.proto";

// TO-DO: to be completed
enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_MAIN = 1;
  TYPE_TRADING = 2;
  TYPE_MARGIN = 3;
  TYPE_FUTURES = 4;
  TYPE_INVESTMENT = 5;
  TYPE_STAKING = 6;
  TYPE_SAVINGS = 7;
  TYPE_LOAN = 8;
  TYPE_CARD = 9;
  TYPE_SPACE = 10;
}

message TypeList {
  repeated Type list = 1;
}

// Backed by table 'recipients' + 'dvsubaccounts'
// dvsubaccounts are recipients of type 3
message DVSubAccount {
  recipients.Recipient recipient = 1;
  // Fields from table 'dvsubaccounts'
  Type subaccount_type = 2;
  string address = 3;
  // TO-DO: Add more fields from table 'dvsubaccounts'
}

message List {
  repeated DVSubAccount list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  recipients.CreateRequest recipient = 1;
  Type subaccount_type = 2;
  string address = 3;
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    DVSubAccount dvsubaccount = 2;
  }
}

message UpdateRequest {
  recipients.UpdateRequest recipient = 1;
  optional Type subaccount_type = 2;
  optional string address = 3;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    DVSubAccount dvsubaccount = 2;
  }
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    DVSubAccount dvsubaccount = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional recipients.GetListRequest recipient = 1;
  optional TypeList subaccount_type = 2;
  optional string address = 3;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    DVSubAccount dvsubaccount = 2;
  }
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    DVSubAccount dvsubaccount = 2;
  }
}

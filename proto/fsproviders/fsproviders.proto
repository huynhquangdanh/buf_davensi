syntax = "proto3";

package fsproviders;

import "common/errors.proto";
import "common/statuses.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_OPENBANKING = 1;
  TYPE_CEX = 2;
  TYPE_KYC = 3;
  TYPE_MARKET_DATA = 4;
}

message TypeList {
  repeated Type list = 1;
}

// Backed by table 'fsproviders'
message FSProvider {
  string id = 1; // System Key: id is generated by the server or the database
  Type type = 2; // type + name form the Human-Readable Key (unique identifier)
  string name = 3; // type + name form the Human-Readable Key (unique identifier)
  optional string icon = 4;
  common.Status status = 5;
}

message List {
  repeated FSProvider list = 1;
}

message TypeName {
  Type type = 1;
  string name = 2;
}

message Select {
  oneof select {
    string by_id = 1;
    TypeName by_type_name = 2;
  }
}

message SelectList {
  repeated Select list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  Type type = 1;
  string name = 2;
  optional string icon = 3;
  optional common.Status status = 4; // Default: 0 (STATUS_UNSPECIFIED)
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    FSProvider fsprovider = 2;
  }
}

message UpdateRequest {
  Select select = 1;
  optional Type type = 2;
  optional string name = 3;
  optional string icon = 4;
  optional common.Status status = 5;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    FSProvider fsprovider = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  Select select = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    FSProvider fsprovider = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional TypeList type = 1;
  optional string name = 2;
  optional string icon = 3;
  optional common.StatusList status = 4;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    FSProvider fsprovider = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  Select select = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    FSProvider fsprovider = 2;
  }
}

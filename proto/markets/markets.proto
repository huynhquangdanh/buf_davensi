syntax = "proto3";

package markets;

import "common/errors.proto";
import "common/numbers.proto";
import "common/statuses.proto";
import "tradingpairs/tradingpairs.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_SPOT = 1;
  TYPE_FUTURES = 2;
  TYPE_OPTIONS = 3;
  TYPE_FORWARDS = 4;
  TYPE_SWAPS = 5;
  TYPE_SPOT_DAY_AVERAGE = 128;
  TYPE_SPOT_MONTH_AVERAGE = 129;
  TYPE_SPOT_YEAR_AVERAGE = 130;
}
message TypeList {
  repeated Type list = 1;
}

enum MatchingAlgorithm {
  MATCHING_ALGORITHM_TIME_UNSPECIFIED = 0;
  MATCHING_ALGORITHM_TIME_PRIORITY = 1;
  MATCHING_ALGORITHM_PRO_RATA = 2;
  MATCHING_ALGORITHM_AUCTION = 3;
}

message MatchingAlgorithmList {
  repeated MatchingAlgorithm list = 1;
}

enum PriceType {
  PRICE_TYPE_UNSPECIFIED = 0;
  PRICE_TYPE_LTP = 1; // Last Traded Price
  PRICE_TYPE_MTM = 2; // Mark-to-Market
  PRICE_TYPE_MID = 3;
  PRICE_TYPE_BID = 4;
  PRICE_TYPE_ASK = 5;
  PRICE_TYPE_VWAP = 6; // Volume-Weighted Average Price
  PRICE_TYPE_TWAP = 7; // Time-Weighted Average Price
  PRICE_TYPE_ARRIVAL = 8;
}

message PriceTypeList {
  repeated PriceType list = 1;
}

enum State {
  STATE_UNSPECIFIED = 0;
  STATE_INACTIVE = 1;
  STATE_OPEN = 2;
  STATE_RESTRICTED = 3;
  STATE_CLOSED = 4;
  STATE_MAINTENANCE = 5;
  STATE_SUSPENDED = 6;
}

message StateList {
  repeated State list = 1;
}

// Backed by table 'markets' + 'markets_config'
message Market {
  string id = 1; // System Key: id is generated by the server or the database
  string symbol = 2; // Human-Readable Key (unique identifier)
  Type type = 3;
  tradingpairs.TradingPair tradingpair = 4;
  MatchingAlgorithm algorithm = 5;
  PriceType price_type = 6;
  common.Decimal tick_size = 7;
  State state = 8;
  common.Status status = 9;
}

message List {
  repeated Market list = 1;
}

message Select {
  oneof select {
    string by_id = 1;
    string by_symbol = 2;
  }
}

message SelectList {
  repeated Select list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  string symbol = 1; // Human-Readable Key (unique identifier)
  Type type = 2;
  tradingpairs.Select tradingpair = 3;
  MatchingAlgorithm algorithm = 4;
  PriceType price_type = 5;
  optional common.Decimal tick_size = 6; // Default: 1x quantity uom decimals
  State state = 7;
  common.Status status = 8;
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    Market market = 2;
  }
}

message UpdateRequest {
  Select select = 1;
  optional string symbol = 2;
  optional Type type = 3;
  optional tradingpairs.Select tradingpair = 4;
  optional MatchingAlgorithm algorithm = 5;
  optional PriceType price_type = 6;
  optional common.Decimal tick_size = 7;
  optional State state = 8;
  optional common.Status status = 9;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    Market market = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  Select select = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    Market market = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional string symbol = 1;
  optional TypeList type = 2;
  optional tradingpairs.SelectList tradingpair = 3;
  optional MatchingAlgorithmList algorithm = 4;
  optional PriceTypeList price_type = 5;
  optional common.DecimalValueList tick_size = 6;
  optional StateList state = 7;
  optional common.StatusList status = 8;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    Market market = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  Select select = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    Market market = 2;
  }
}

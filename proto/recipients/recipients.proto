syntax = "proto3";

package recipients;

import "common/errors.proto";
import "common/numbers.proto";
import "common/statuses.proto";
import "google/protobuf/timestamp.proto";
import "legalentities/legalentities.proto";
import "orgs/orgs.proto";
import "users/users.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_DV_FIAT_ACCOUNT = 1;
  TYPE_DV_CRYPTO_WALLET = 2;
  TYPE_DV_SUBACCOUNT = 3;
  TYPE_DV_BOT = 4;
  TYPE_CEX_ACCOUNT = 8;
  TYPE_BANK_ACCOUNT = 16;
  TYPE_DEFI_WALLET = 32;
}

message TypeList {
  repeated Type list = 1;
}

// Backed by table 'recipients'
message Recipient {
  string id = 1; // System Key: id is generated by the server or the database
  optional legalentities.LegalEntity legal_entity = 2; // legal_entity + user + label form the Human-Readable Key (unique identifier)
  optional users.User user = 3; // legal_entity + user + label form the Human-Readable Key (unique identifier)
  string label = 4; // legal_entity + user + label form the Human-Readable Key (unique identifier)
  Type type = 5;
  optional orgs.Org org = 6;
  common.Status status = 7;
}

message List {
  repeated Recipient list = 1;
}

message LegalEntityUserLabel {
  optional legalentities.Select legal_entity = 1; // At least one of legal_entity and user must be specified
  optional users.Select user = 2; // At least one of legal_entity and user must be specified
  string label = 3;
}

message Select {
  oneof select {
    string by_id = 1;
    LegalEntityUserLabel by_legal_entity_user_label = 2;
  }
}

message SelectList {
  repeated Select list = 1;
}

message CreateRequest {
  // id is generated by the server or the database
  optional legalentities.Select legal_entity = 1; // At least one of legal_entity and user must be specified
  optional users.Select user = 2; // At least one of legal_entity and user must be specified
  string label = 3;
  optional Type type = 4; // Default:  STATUS_UNSPECIFIED
  optional orgs.Select org = 5;
  optional common.Status status = 6; // Default: STATUS_UNSPECIFIED, which means Recipient needs to be activated after creation
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    Recipient recipient = 2;
  }
}

message UpdateRequest {
  Select select = 1;
  optional legalentities.Select legal_entity = 2;
  optional users.Select user = 3;
  optional string label = 4;
  optional Type type = 5;
  optional orgs.Select org = 6;
  optional common.Status status = 7;
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    Recipient recipient = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  Select select = 1;
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    Recipient recipient = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional legalentities.GetListRequest legal_entity = 1;
  optional users.GetListRequest user = 2;
  optional string label = 3;
  optional TypeList type = 4;
  optional orgs.GetListRequest org = 5;
  optional common.StatusList status = 6;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    Recipient recipient = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  Select select = 1;
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    Recipient recipient = 2;
  }
}

// Recipient Sharing
// Backed by table 'recipients_shared'

message UserShare {
  users.User user = 1;
  optional google.protobuf.Timestamp valid_from = 2;
  bool balance = 3;
  bool history = 4;
  optional google.protobuf.Timestamp history_from = 5;
  optional google.protobuf.Timestamp history_to = 6;
  bool deposit = 7;
  optional common.Decimal deposit_min_amount = 8;
  optional common.Decimal deposit_max_amount = 9;
  bool withdrawal = 10;
  optional common.Decimal withdrawal_max_amount = 11;
  optional common.Decimal withdrawal_max_percentage = 12;
  bool transfer = 13;
  optional common.Decimal transfer_max_amount = 14;
  optional common.Decimal transfer_max_percentage = 15;
  bool exchange = 16;
  optional common.Decimal exchange_max_amount = 17;
  optional common.Decimal exchange_max_percentage = 18;
}

message UserShareList {
  repeated UserShare list = 1;
}

message ShareRequest {
  oneof select {
    string by_id = 1;
    LegalEntityUserLabel by_legal_entity_user_label = 2;
  }
  users.SelectList users = 3;
  optional google.protobuf.Timestamp valid_from = 4; // Default: current timestamp
  optional bool balance = 5; // Default: true
  optional bool history = 6; // Default: false
  optional google.protobuf.Timestamp history_from = 7;
  optional google.protobuf.Timestamp history_to = 8;
  optional bool deposit = 9; // Default: false
  optional common.Decimal deposit_min_amount = 10;
  optional common.Decimal deposit_max_amount = 11;
  optional bool withdrawal = 12; // Default: false
  optional common.Decimal withdrawal_max_amount = 13;
  optional common.Decimal withdrawal_max_percentage = 14;
  optional bool transfer = 15; // Default: false
  optional common.Decimal transfer_max_amount = 16;
  optional common.Decimal transfer_max_percentage = 17;
  optional bool exchange = 18; // Default: false
  optional common.Decimal exchange_max_amount = 19;
  optional common.Decimal exchange_max_percentage = 20;
}

message ShareResponse {
  oneof response {
    common.Error error = 1;
    UserShareList shares = 2;
  }
}

message UnshareRequest {
  oneof select {
    string by_id = 1;
    LegalEntityUserLabel by_legal_entity_user_label = 2;
  }
  optional users.SelectList users = 3; // Update status of all user-related records to 'STATUS_TERMINATED'. Unshare from all users if not specified.
}

message UnshareResponse {
  oneof response {
    common.Error error = 1;
    users.List users = 2;
  }
}

message GetShareListRequest {
  oneof select {
    string by_id = 1;
    LegalEntityUserLabel by_legal_entity_user_label = 2;
  }
}

message GetShareListResponse {
  oneof response {
    common.Error error = 1;
    UserShareList shares = 2;
  }
}

// Search and replace:
// - <entityclass> by the entity class (typically the name of the backing table)
// - <EntityName> by camel-case entity name
// - <entityfield> by small-cap entity field
// - <Hrk> by camel-case Human-Readable Key field
// - <hrk> by small-cap Human-Readable Key field
// - <ENUMNAME> by capital enum name
// - <EnumName> by camel-case enum name
// - <enumfield> by small-cap enum field
// - <ENUM1>, <ENUM2> and <ENUM3> by capital enum values
// - <field1>, <field2>, <field3>, <field4>, <field5>, <field6>, <field7>, <field8>, <field9>, <field10> by small-cap fields
// - <fieldtype1>, <fieldtype2>, <fieldtype3>, <fieldtype4>, <fieldtype5>, <fieldtype6>, <fieldtype7>, <fieldtype8>, <fieldtype9>, <fieldtype10> by small-cap fields

syntax = "proto3";

package <entityclass>;

import "common/errors.proto";

enum <EnumName> {
  <ENUMNAME>_UNSPECIFIED = 0;
  <ENUMNAME>_<ENUM1> = 1;
  <ENUMNAME>_<ENUM2> = 2;
  <ENUMNAME>_<ENUM3> = 3;
}

message <EnumName>List {
  repeated <EnumName> select = 1;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_ACTIVE = 1;
  STATUS_SUSPENDED = 2;
  STATUS_DEPRECATED = 3;
  STATUS_TERMINATED = 4;
}

message StatusList {
  repeated Status select = 1;
}

// Backed by table '<entityclass>'
message <EntityName> {
  string id = 1; // System Key: id is generated by the server or the database
  string <hrk> = 2; // Human-Readable Key (unique identifier)
  <EnumName> <enumfield> = 3;
  <fieldtype1> <field1> = 4;
  <fieldtype2> <field2> = 5;
  <fieldtype3> <field3> = 6;
  <fieldtype4> <field4> = 7;
  <fieldtype5> <field5> = 8;
  <fieldtype6> <field6> = 9;
  <fieldtype7> <field7> = 10;
  <fieldtype8> <field8> = 11;
  <fieldtype9> <field9> = 12;
  <fieldtype10> <field10> = 13;
  // TO-DO: add more fields from table '<entityclass>'
  Status status = 14;
}

message List {
  repeated <EntityName> <entityfield> = 1;
}

// *** To be deleted if there is no HRK
message Select {
  oneof select {
    string id = 1;
    string <hrk> = 2;
  }
}

// *** To be deleted if there is no HRK
message SelectList {
  repeated Select select = 1;
}

// *** To be deleted if there is no HRK
message UpdateList {
  oneof select {
    SelectList set = 1;
    SelectList add = 2;
    SelectList remove = 3;
  }
}

message CreateRequest {
  // id is generated by the server or the database
  string <hrk> = 1;
  <EnumName> <enumfield> = 2;
  optional <fieldtype1> <field1> = 3; // Default: <TO-DO>
  optional <fieldtype2> <field2> = 4; // Default: <TO-DO>
  optional <fieldtype3> <field3> = 5; // Default: <TO-DO>
  optional <fieldtype4> <field4> = 6; // Default: <TO-DO>
  optional <fieldtype5> <field5> = 7; // Default: <TO-DO>
  optional <fieldtype6> <field6> = 8; // Default: <TO-DO>
  optional <fieldtype7> <field7> = 9; // Default: <TO-DO>
  optional <fieldtype8> <field8> = 10; // Default: <TO-DO>
  optional <fieldtype9> <field9> = 11; // Default: <TO-DO>
  optional <fieldtype10> <field10> = 12; // Default: <TO-DO>
  optional Status status = 13; // Default: STATUS_UNSPECIFIED, which means <EntityName> needs to be activated after creation
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    <EntityName> <entityfield> = 2;
  }
}

// Using id to select a record enables update of <hrk>
message UpdateById {
  string id = 1;
  optional string <hrk> = 2;
  optional <EnumName> <enumfield> = 3;
  optional <fieldtype1> <field1> = 4;
  optional <fieldtype2> <field2> = 5;
  optional <fieldtype3> <field3> = 6;
  optional <fieldtype4> <field4> = 7;
  optional <fieldtype5> <field5> = 8;
  optional <fieldtype6> <field6> = 9;
  optional <fieldtype7> <field7> = 10;
  optional <fieldtype8> <field8> = 11;
  optional <fieldtype9> <field9> = 12;
  optional <fieldtype10> <field10> = 13;
  optional Status status = 14;
}

// Using <hrk> to select a record does NOT enable update of id and <hrk>
message UpdateBy<Hrk> {
  string <hrk> = 1;
  optional <EnumName> <enumfield> = 2;
  optional <fieldtype1> <field1> = 3;
  optional <fieldtype2> <field2> = 4;
  optional <fieldtype3> <field3> = 5;
  optional <fieldtype4> <field4> = 6;
  optional <fieldtype5> <field5> = 7;
  optional <fieldtype6> <field6> = 8;
  optional <fieldtype7> <field7> = 9;
  optional <fieldtype8> <field8> = 10;
  optional <fieldtype9> <field9> = 11;
  optional <fieldtype10> <field10> = 12;
  optional Status status = 13;
}

message UpdateRequest {
  oneof select {
    UpdateById id = 1;
    UpdateBy<Hrk> <hrk> = 2;
  }
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    <EntityName> <entityfield> = 2;
  }
}

// GetRequest is expected to return a single value.
message GetRequest {
  oneof select {
    string id = 1;
    string <hrk> = 2;
  }
}

// An error is returned if there is more than one record found.
message GetResponse {
  oneof response {
    common.Error error = 1;
    <EntityName> <entityfield> = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional string <hrk> = 1;
  optional <EnumName>List <enumfield> = 2;
  optional <fieldtype1> <field1> = 3;
  optional <fieldtype2> <field2> = 4;
  optional <fieldtype3> <field3> = 5;
  optional <fieldtype4> <field4> = 6;
  optional <fieldtype5> <field5> = 7;
  optional <fieldtype6> <field6> = 8;
  optional <fieldtype7> <field7> = 9;
  optional <fieldtype8> <field8> = 10;
  optional <fieldtype9> <field9> = 11;
  optional <fieldtype10> <field10> = 12;
  optional StatusList status = 13;
}

message GetListResponse {
  oneof response {
    common.Error error = 1;
    <EntityName> <entityfield> = 2;
  }
}

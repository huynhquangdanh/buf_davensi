syntax = "proto3";

package users;

import "common/errors.proto";
import "common/statuses.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_INTERNAL = 1;
  TYPE_SERVICE = 2;
  TYPE_BOT = 3;
  TYPE_CUSTOMER = 64;
  TYPE_PARTNER = 128;
}

message TypeList {
  repeated Type list = 1;
}

// Backed by table 'users'
message User {
  string id = 1; // System Key: id is generated by the server or the database
  string login = 2; // login is the Human-Readable Key (unique identifier)
  Type type = 3;
  optional string screen_name = 4;
  optional string avatar = 5;
  common.Status status = 6;
}

message List {
  repeated User list = 1;
}

message Select {
  oneof select {
    string by_id = 1;
    string by_login = 2;
  }
}

message SelectList {
  repeated Select list = 1;
}

message CreateRequest {
  string login = 1;
  optional Type type = 2;
  optional string screen_name = 3;
  optional string avatar = 4;
  optional common.Status status = 5; // Default: 0 (STATUS_UNSPECIFIED)
}

message CreateResponse {
  oneof response {
    common.Error error = 1;
    User user = 2;
  }
}

message UpdateRequest {
  oneof select {
    string by_id = 1;
    string by_login = 2;
  }
  optional string login = 3;
  optional Type type = 4;
  optional string screen_name = 5;
  optional string avatar = 6;
  optional common.Status status = 7; // Default: 0 (STATUS_UNSPECIFIED)
}

message UpdateResponse {
  oneof response {
    common.Error error = 1;
    User user = 2;
  }
}

message GetRequest {
  oneof select {
    string by_id = 1;
    string by_login = 2;
  }
}

message GetResponse {
  oneof response {
    common.Error error = 1;
    User user = 2;
  }
}

// GetList will use SQL 'LIKE' instead of '=' for string fields
message GetListRequest {
  optional string login = 1;
  optional TypeList type = 2;
  optional string screen_name = 3;
  optional string avatar = 4;
  optional common.StatusList status = 5;
}

message GetListResponse { // ListResponse is formatted for streaming
  oneof response {
    common.Error error = 1;
    User user = 2;
  }
}

// A delete request is just an update request with status set to TERMINATED.
message DeleteRequest {
  oneof select {
    string by_id = 1;
    string by_login = 2;
  }
}

message DeleteResponse {
  oneof response {
    common.Error error = 1;
    User user = 2;
  }
}

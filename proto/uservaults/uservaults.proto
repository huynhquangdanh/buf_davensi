syntax = "proto3";

package uservaults;

import "common/errors.proto";
import "common/numbers.proto";
import "users/users.proto";

enum ValueType {
  VALUE_TYPE_UNSPECIFIED = 0;
  VALUE_TYPE_BOOL = 1;
  VALUE_TYPE_INT64 = 2;
  VALUE_TYPE_DECIMAL = 3;
  VALUE_TYPE_STRING = 4;
  VALUE_TYPE_BYTE = 5;
}

// Backed by table 'uservaults'

message Value {
  oneof value {
    bool bool = 1;
    int64 integer = 2;
    common.Decimal decimal = 3;
    string string = 4;
    bytes bytes = 5;
  }
}

message KeyValue {
  string key = 1;
  oneof value {
    bool bool = 2;
    int64 integer = 3;
    // lib for decimal: github.com/shopspring/decimal
    common.Decimal decimal = 4;
    string string = 5;
    bytes bytes = 6;
  }
}
// Should we convert the value to bytea? => Yes. convert it.
// Encrypt: Value to be put in the vault (bool, integer, etc.) --> bytes --> Call the encryption function --> bytes (encrypted) --> Saved in table uservault
// Decrypt: Get data (encrypted) from table uservaults (for a given key) --> Call the decryption function --> bytes (decrypted) --> convert into final type according to data type in table uservaults --> Put final type in response for the requester

message KeyValueList {
  repeated KeyValue list = 1;
}

message SetRequest {
  users.Select user = 1;
  string key = 2;
  oneof value {
    bool bool = 3;
    int64 integer = 4;
    common.Decimal decimal = 5;
    string string = 6;
    bytes bytes = 7;
  }
}

message SetResponse {
  oneof response {
    common.Error error = 1;
    bool ok = 2;
  }
}

// Remove will just set the status in table 'uservaults' to TERMINATED
message RemoveRequest {
  users.Select user = 1;
  string key = 2;
}

message RemoveResponse {
  oneof response {
    common.Error error = 1;
    bool ok = 2;
  }
}

message GetRequest {
  users.Select user = 1;
  string key = 2;
}

message GetResponse {
  oneof response {
    common.Error error = 1;
    Value value = 2;
  }
}

message GetListRequest {
  users.Select user = 1;
  optional string key_prefix = 2; // use SQL " LIKE 'key_prefix%' " instead of " = "
}

message GetListResponse {
  oneof response {
    common.Error error = 1;
    KeyValue key_value = 2;
  }
}

message ResetRequest {
  users.Select user = 1;
  optional string key_prefix = 2; // use SQL " LIKE 'key_prefix%' " instead of " = "
}

message ResetResponse {
  oneof response {
    common.Error error = 1;
    bool ok = 2;
  }
}
